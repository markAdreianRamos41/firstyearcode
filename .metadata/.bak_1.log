!SESSION 2023-04-30 15:23:57.425 -----------------------------------------------
eclipse.buildId=4.24.0.I20220607-0700
java.version=17.0.4
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_PH
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

This is a continuation of log file C:\Users\Admin\Documents\School\2nd Sem\CCS103 - Computer Programming\SchoolWorkspace\.metadata\.bak_0.log
Created Time: 2023-04-30 17:30:29.997

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-04-30 17:30:29.997
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-04-30 17:30:30.009
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-30 17:30:30.944
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import java.awt.Color;
import java.awt.Toolkit;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

import java.awt.Font;
import javax.swing.JRadioButton;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Arrays;
import java.util.Random;


public class Main extends JFrame {

	private JPanel contentPane;
	private JLabel lblNewLabel_1_2;
	private JLabel lblNewLabel_1;
	private JLabel lblNewLabel_1_1; 
	private JLabel lblNewLabel_1_2_1;
	private JLabel lblNewLabel_1_2_2;
	private JLabel lblNewLabel_1_2_3;
	private JLabel lblNewLabel_1_2_4;
	private JRadioButton rdbtnEasy;
	private JRadioButton rdbtnAverage;
	private JRadioButton rdbtnDifficult;
	private JButton btnStart; 
	private JLabel lblNewLabel;
	private JLabel lblNewLabel_2;
	private JLabel lblNewLabel_3;
	private JLabel lblNewLabel_4;
	private JTextField textField;
	private JButton btnNewButton_1;
	private JTextField textField1;
	private JButton btnNewButton_2;
	private JButton returnButton;

	private JTextField textField2;
	private JButton btnNewButton_3;
	int currentQuestionNumber = 1;
	int playerScore = 0;
	Random random = new Random();
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Main frame = new Main();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
	
	
	
	

	/**
	 * Create the frame.
	 */
	
	
	public int findIndex(char operand) {
		char[] operandOrder = {'-', '+', '/', '*'};
		int index = 0;
		
		for(int i = 0; i < operandOrder.length; i++) {
			if(operand == operandOrder[i]) index = i;
		}
		return index;
	}
	
	public double getResult(String question) {
		char[] questionData = question.toCharArray(); 
		
		char operand = questionData[1];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double result = 0;
		
		if(operand == '+') result = firstNumber + secondNumber;
		if(operand == '-') result = firstNumber - secondNumber;
		if(operand == '*') result = firstNumber * secondNumber;
		if(operand == '/') result = firstNumber / secondNumber;
		double roundedResult = Math.round(result);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	public double getResultAverage(String question) {
		char[] questionData = question.toCharArray(); 
		
		char firstOperand = questionData[1];
		char secondOperand = questionData[3];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double thirdNumber = Double.parseDouble(String.valueOf(questionData[4]));
		double result = 0;
		
		
		char[] operandOrder = {'-', '+', '/', '*'};
		int indexFirst = findIndex(firstOperand);
		int indexSecond = findIndex(secondOperand);
		double totalResult = 0;
		double initialResult = 0;
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+') initialResult = secondNumber + thirdNumber;
			if(secondOperand == '-') initialResult = secondNumber - thirdNumber;
			if(secondOperand == '*') initialResult = secondNumber * thirdNumber;
			if(secondOperand == '/') initialResult = secondNumber / thirdNumber;
			
			
		}
		else if (indexSecond > indexFirst) {
			if(firstOperand == '+') initialResult = firstNumber + secondNumber;
			if(firstOperand == '-') initialResult = firstNumber - secondNumber;
			if(firstOperand == '*') initialResult = firstNumber * secondNumber;
			if(firstOperand == '/') initialResult = firstNumber / secondNumber;
		}
		else {
			if(firstOperand == '+') totalResult = firstNumber + secondNumber + thirdNumber;
			if(firstOperand == '-') totalResult = firstNumber - secondNumber - thirdNumber;
			if(firstOperand == '*') totalResult = firstNumber * secondNumber * thirdNumber;
			if(firstOperand == '/') totalResult = firstNumber / secondNumber / thirdNumber;
		}
		
		
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+')  totalResult = firstNumber + thirdNumber;
			if(secondOperand == '-')  totalResult = firstNumber - thirdNumber;
			if(secondOperand == '*')  totalResult = firstNumber * thirdNumber;
			if(secondOperand == '/')  totalResult = firstNumber / thirdNumber;
			
			
		}
		else (indexSecond > indexFirst) {
			if(firstOperand == '+')  totalResult = initialResult + thirdNumber;
			if(firstOperand == '-')  totalResult = initialResult - thirdNumber;
			if(firstOperand == '*')  totalResult = initialResult * thirdNumber;
			if(firstOperand == '/')  totalResult = initialResult / thirdNumber;
		}
		
		
		
		
		
		double roundedResult = Math.round(totalResult);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	
	public String generateQuestion() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond];
		
		return question;
	}
	
	public String generateQuestionAverage() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexThird = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		int randomIndexOperand2 = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond] + operands[randomIndexOperand2] + numbers[randomIndexThird];
		System.out.println(question);
		return question;
	}
	
	
	public Main() {
		setIconImage(Toolkit.getDefaultToolkit().getImage("C:\\Users\\user\\Downloads\\quiz.png"));
		setTitle("QUIZ GAME");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(400, 100, 600, 600);
		contentPane = new JPanel();
		contentPane.setBackground(Color.WHITE);
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));

		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JPanel panel = new JPanel();
		panel.setBackground(Color.RED);
		panel.setBounds(10, 0, 564, 550);
		contentPane.add(panel);
		panel.setLayout(null);
		
		lblNewLabel_1_2_4 = new JLabel("quiz");
		lblNewLabel_1_2_4.setForeground(Color.WHITE);
		lblNewLabel_1_2_4.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_4.setBounds(140, 130, 561, 120);
		panel.add(lblNewLabel_1_2_4);
		
		lblNewLabel_1_2 = new JLabel("MATH");
		lblNewLabel_1_2.setForeground(Color.WHITE);
		lblNewLabel_1_2.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_2.setBounds(70, 50, 561, 120);
		panel.add(lblNewLabel_1_2);
		
		lblNewLabel_1 = new JLabel("MATH");
		lblNewLabel_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1.setForeground(Color.DARK_GRAY);
		lblNewLabel_1.setBounds(78, 50, 777, 120);
		panel.add(lblNewLabel_1);
		
		lblNewLabel_1_1 = new JLabel("MATH");
		lblNewLabel_1_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_1.setBounds(89, 50, 612, 120);
		panel.add(lblNewLabel_1_1);
		
		lblNewLabel_1_2_2 = new JLabel("quiz");
		lblNewLabel_1_2_2.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_2.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_2.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_2);
		
		lblNewLabel_1_2_1 = new JLabel("quiz");
		lblNewLabel_1_2_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_2_1.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_1.setBounds(159, 130, 561, 120);
		panel.add(lblNewLabel_1_2_1);
		
		lblNewLabel_1_2_3 = new JLabel("quiz");
		lblNewLabel_1_2_3.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_3.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_3.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_3);
		
		lblNewLabel = new JLabel("");
		lblNewLabel.setFont(new Font("Dialog", Font.BOLD, 9));
		lblNewLabel.setBounds(225, 428, 161, 14);
		panel.add(lblNewLabel);
		
		rdbtnEasy = new JRadioButton("EASY");
		rdbtnEasy.setForeground(Color.WHITE);
		rdbtnEasy.setBackground(Color.RED);
		rdbtnEasy.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnEasy.setBounds(215, 232, 269, 78);
		panel.add(rdbtnEasy);
		
		rdbtnAverage = new JRadioButton("AVERAGE");
		rdbtnAverage.setForeground(Color.WHITE);
		rdbtnAverage.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnAverage.setBackground(Color.RED);
		rdbtnAverage.setBounds(188, 290, 269, 73);
		panel.add(rdbtnAverage);
		
		rdbtnDifficult = new JRadioButton("DIFFICULT");
		rdbtnDifficult.setForeground(Color.WHITE);
		rdbtnDifficult.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnDifficult.setBackground(Color.RED);
		rdbtnDifficult.setBounds(176, 342, 269, 68);
		panel.add(rdbtnDifficult);
		
		ButtonGroup difficulty = new ButtonGroup();
		difficulty.add(rdbtnEasy);
		difficulty.add(rdbtnAverage);
		difficulty.add(rdbtnDifficult);
		
		btnStart = new JButton("START");
		
		
	
		
		btnStart.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
			if(rdbtnEasy.isSelected()){
				///////////
				
 				lblNewLabel_3.setText(generateQuestion());
 				
 				
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_1.setVisible(true);
				
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnAverage.isSelected()){
				
				lblNewLabel_3.setText(generateQuestionAverage());
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_2.setVisible(true);
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnDifficult.isSelected()){
				
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			}
		});
		btnStart.setBackground(Color.WHITE);
		btnStart.setForeground(Color.RED);
		btnStart.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnStart.setBounds(212, 453, 125, 43);
		panel.add(btnStart);
		
		lblNewLabel_2 = new JLabel("");
		lblNewLabel_2.setVisible(false);
		lblNewLabel_2.setForeground(Color.WHITE);
		lblNewLabel_2.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_2.setBounds(317, 90, 125, 129);
		panel.add(lblNewLabel_2);
		
		lblNewLabel_3 = new JLabel("");
		lblNewLabel_3.setVisible(false);
		lblNewLabel_3.setForeground(Color.WHITE);
		lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_3.setBounds(215, 90, 300, 200);
		panel.add(lblNewLabel_3);
		
		lblNewLabel_4 = new JLabel("");
		lblNewLabel_4.addMouseListener(new MouseAdapter() {
			public void mouseReleased(MouseEvent e) {
				
			}
		});
		lblNewLabel_4.setVisible(false);
		lblNewLabel_4.setForeground(Color.WHITE);
		lblNewLabel_4.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_4.setBounds(121, 90, 103, 129);
		panel.add(lblNewLabel_4);
				
		textField = new JTextField();
		textField.setHorizontalAlignment(SwingConstants.RIGHT);
		textField.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField.setVisible(false);
		textField.setBounds(121, 261, 324, 49);
		panel.add(textField);
		textField.setColumns(10);
		
		textField1 = new JTextField();
		textField1.setHorizontalAlignment(SwingConstants.RIGHT);
		textField1.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField1.setVisible(false);
		textField1.setBounds(121, 261, 324, 49);
		panel.add(textField1);
		textField1.setColumns(10);
		
		returnButton = new JButton("Return");
		returnButton.setVisible(false);
		returnButton.setFont(new Font("Tahoma", Font.BOLD, 20));
		returnButton.setForeground(Color.RED);
		returnButton.setBackground(Color.WHITE);
		returnButton.setBounds(225, 363, 126, 43);
		panel.add(returnButton);
		
		
		returnButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel.setVisible(true);
				rdbtnEasy.setVisible(true);
				rdbtnAverage.setVisible(true);
				rdbtnDifficult.setVisible(true);
				lblNewLabel_1_2_3.setVisible(true);
				lblNewLabel_1_2_1.setVisible(true);
				lblNewLabel_1_2_2.setVisible(true);
				lblNewLabel_1_1.setVisible(true);
				lblNewLabel_1.setVisible(true);
				lblNewLabel_1_2.setVisible(true);
				lblNewLabel_1_2_4.setVisible(true);
				btnStart.setVisible(true);
				returnButton.setVisible(false);
				lblNewLabel_3.setVisible(false);
				lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
			}

		
			
			
		});
		
		btnNewButton_1 = new JButton("SUBMIT");
		btnNewButton_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				
				
				double result = getResult(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
				
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
				
			}
		});
		btnNewButton_1.setVisible(false);
		btnNewButton_1.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_1.setForeground(Color.RED);
		btnNewButton_1.setBackground(Color.WHITE);
		btnNewButton_1.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_1);
		
		//Button 2
		btnNewButton_2 = new JButton("SUBMIT");
		btnNewButton_2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				double result = getResultAverage(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
			
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
			}
		});
		btnNewButton_2.setVisible(false);
		btnNewButton_2.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_2.setForeground(Color.RED);
		btnNewButton_2.setBackground(Color.WHITE);
		btnNewButton_2.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_2);
		
		
		textField2 = new JTextField();
		textField2.setHorizontalAlignment(SwingConstants.RIGHT);
		textField2.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField2.setVisible(false);
		textField2.setBounds(121, 261, 324, 49);
		panel.add(textField2);
		textField2.setColumns(10);
		
		btnNewButton_3 = new JButton("SUBMIT");
		btnNewButton_3.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel_2.setVisible(false);
				
				textField.setVisible(false);
				textField1.setVisible(false);
				btnNewButton_1.setVisible(false);
				btnNewButton_2.setVisible(false);
				
				textField2.setVisible(false);
				btnNewButton_3.setVisible(false);
				
				
				
			}
		});
		btnNewButton_3.setVisible(false);
		btnNewButton_3.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_3.setForeground(Color.RED);
		btnNewButton_3.setBackground(Color.WHITE);
		btnNewButton_3.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_3);
		
		
	}
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-04-30 17:30:30.945
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-04-30 17:30:30.946
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-30 17:30:30.963
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import java.awt.Color;
import java.awt.Toolkit;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

import java.awt.Font;
import javax.swing.JRadioButton;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Arrays;
import java.util.Random;


public class Main extends JFrame {

	private JPanel contentPane;
	private JLabel lblNewLabel_1_2;
	private JLabel lblNewLabel_1;
	private JLabel lblNewLabel_1_1; 
	private JLabel lblNewLabel_1_2_1;
	private JLabel lblNewLabel_1_2_2;
	private JLabel lblNewLabel_1_2_3;
	private JLabel lblNewLabel_1_2_4;
	private JRadioButton rdbtnEasy;
	private JRadioButton rdbtnAverage;
	private JRadioButton rdbtnDifficult;
	private JButton btnStart; 
	private JLabel lblNewLabel;
	private JLabel lblNewLabel_2;
	private JLabel lblNewLabel_3;
	private JLabel lblNewLabel_4;
	private JTextField textField;
	private JButton btnNewButton_1;
	private JTextField textField1;
	private JButton btnNewButton_2;
	private JButton returnButton;

	private JTextField textField2;
	private JButton btnNewButton_3;
	int currentQuestionNumber = 1;
	int playerScore = 0;
	Random random = new Random();
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Main frame = new Main();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
	
	
	
	

	/**
	 * Create the frame.
	 */
	
	
	public int findIndex(char operand) {
		char[] operandOrder = {'-', '+', '/', '*'};
		int index = 0;
		
		for(int i = 0; i < operandOrder.length; i++) {
			if(operand == operandOrder[i]) index = i;
		}
		return index;
	}
	
	public double getResult(String question) {
		char[] questionData = question.toCharArray(); 
		
		char operand = questionData[1];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double result = 0;
		
		if(operand == '+') result = firstNumber + secondNumber;
		if(operand == '-') result = firstNumber - secondNumber;
		if(operand == '*') result = firstNumber * secondNumber;
		if(operand == '/') result = firstNumber / secondNumber;
		double roundedResult = Math.round(result);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	public double getResultAverage(String question) {
		char[] questionData = question.toCharArray(); 
		
		char firstOperand = questionData[1];
		char secondOperand = questionData[3];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double thirdNumber = Double.parseDouble(String.valueOf(questionData[4]));
		double result = 0;
		
		
		char[] operandOrder = {'-', '+', '/', '*'};
		int indexFirst = findIndex(firstOperand);
		int indexSecond = findIndex(secondOperand);
		double totalResult = 0;
		double initialResult = 0;
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+') initialResult = secondNumber + thirdNumber;
			if(secondOperand == '-') initialResult = secondNumber - thirdNumber;
			if(secondOperand == '*') initialResult = secondNumber * thirdNumber;
			if(secondOperand == '/') initialResult = secondNumber / thirdNumber;
			
			
		}
		else if (indexSecond > indexFirst) {
			if(firstOperand == '+') initialResult = firstNumber + secondNumber;
			if(firstOperand == '-') initialResult = firstNumber - secondNumber;
			if(firstOperand == '*') initialResult = firstNumber * secondNumber;
			if(firstOperand == '/') initialResult = firstNumber / secondNumber;
		}
		else {
			if(firstOperand == '+') totalResult = firstNumber + secondNumber + thirdNumber;
			if(firstOperand == '-') totalResult = firstNumber - secondNumber - thirdNumber;
			if(firstOperand == '*') totalResult = firstNumber * secondNumber * thirdNumber;
			if(firstOperand == '/') totalResult = firstNumber / secondNumber / thirdNumber;
		}
		
		
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+')  totalResult = firstNumber + thirdNumber;
			if(secondOperand == '-')  totalResult = firstNumber - thirdNumber;
			if(secondOperand == '*')  totalResult = firstNumber * thirdNumber;
			if(secondOperand == '/')  totalResult = firstNumber / thirdNumber;
			
			
		}
		else (indexSecond > indexFirst) {
			if(firstOperand == '+')  totalResult = initialResult + thirdNumber;
			if(firstOperand == '-')  totalResult = initialResult - thirdNumber;
			if(firstOperand == '*')  totalResult = initialResult * thirdNumber;
			if(firstOperand == '/')  totalResult = initialResult / thirdNumber;
		}
		
		
		
		
		
		double roundedResult = Math.round(totalResult);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	
	public String generateQuestion() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond];
		
		return question;
	}
	
	public String generateQuestionAverage() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexThird = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		int randomIndexOperand2 = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond] + operands[randomIndexOperand2] + numbers[randomIndexThird];
		System.out.println(question);
		return question;
	}
	
	
	public Main() {
		setIconImage(Toolkit.getDefaultToolkit().getImage("C:\\Users\\user\\Downloads\\quiz.png"));
		setTitle("QUIZ GAME");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(400, 100, 600, 600);
		contentPane = new JPanel();
		contentPane.setBackground(Color.WHITE);
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));

		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JPanel panel = new JPanel();
		panel.setBackground(Color.RED);
		panel.setBounds(10, 0, 564, 550);
		contentPane.add(panel);
		panel.setLayout(null);
		
		lblNewLabel_1_2_4 = new JLabel("quiz");
		lblNewLabel_1_2_4.setForeground(Color.WHITE);
		lblNewLabel_1_2_4.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_4.setBounds(140, 130, 561, 120);
		panel.add(lblNewLabel_1_2_4);
		
		lblNewLabel_1_2 = new JLabel("MATH");
		lblNewLabel_1_2.setForeground(Color.WHITE);
		lblNewLabel_1_2.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_2.setBounds(70, 50, 561, 120);
		panel.add(lblNewLabel_1_2);
		
		lblNewLabel_1 = new JLabel("MATH");
		lblNewLabel_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1.setForeground(Color.DARK_GRAY);
		lblNewLabel_1.setBounds(78, 50, 777, 120);
		panel.add(lblNewLabel_1);
		
		lblNewLabel_1_1 = new JLabel("MATH");
		lblNewLabel_1_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_1.setBounds(89, 50, 612, 120);
		panel.add(lblNewLabel_1_1);
		
		lblNewLabel_1_2_2 = new JLabel("quiz");
		lblNewLabel_1_2_2.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_2.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_2.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_2);
		
		lblNewLabel_1_2_1 = new JLabel("quiz");
		lblNewLabel_1_2_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_2_1.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_1.setBounds(159, 130, 561, 120);
		panel.add(lblNewLabel_1_2_1);
		
		lblNewLabel_1_2_3 = new JLabel("quiz");
		lblNewLabel_1_2_3.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_3.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_3.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_3);
		
		lblNewLabel = new JLabel("");
		lblNewLabel.setFont(new Font("Dialog", Font.BOLD, 9));
		lblNewLabel.setBounds(225, 428, 161, 14);
		panel.add(lblNewLabel);
		
		rdbtnEasy = new JRadioButton("EASY");
		rdbtnEasy.setForeground(Color.WHITE);
		rdbtnEasy.setBackground(Color.RED);
		rdbtnEasy.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnEasy.setBounds(215, 232, 269, 78);
		panel.add(rdbtnEasy);
		
		rdbtnAverage = new JRadioButton("AVERAGE");
		rdbtnAverage.setForeground(Color.WHITE);
		rdbtnAverage.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnAverage.setBackground(Color.RED);
		rdbtnAverage.setBounds(188, 290, 269, 73);
		panel.add(rdbtnAverage);
		
		rdbtnDifficult = new JRadioButton("DIFFICULT");
		rdbtnDifficult.setForeground(Color.WHITE);
		rdbtnDifficult.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnDifficult.setBackground(Color.RED);
		rdbtnDifficult.setBounds(176, 342, 269, 68);
		panel.add(rdbtnDifficult);
		
		ButtonGroup difficulty = new ButtonGroup();
		difficulty.add(rdbtnEasy);
		difficulty.add(rdbtnAverage);
		difficulty.add(rdbtnDifficult);
		
		btnStart = new JButton("START");
		
		
	
		
		btnStart.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
			if(rdbtnEasy.isSelected()){
				///////////
				
 				lblNewLabel_3.setText(generateQuestion());
 				
 				
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_1.setVisible(true);
				
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnAverage.isSelected()){
				
				lblNewLabel_3.setText(generateQuestionAverage());
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_2.setVisible(true);
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnDifficult.isSelected()){
				
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			}
		});
		btnStart.setBackground(Color.WHITE);
		btnStart.setForeground(Color.RED);
		btnStart.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnStart.setBounds(212, 453, 125, 43);
		panel.add(btnStart);
		
		lblNewLabel_2 = new JLabel("");
		lblNewLabel_2.setVisible(false);
		lblNewLabel_2.setForeground(Color.WHITE);
		lblNewLabel_2.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_2.setBounds(317, 90, 125, 129);
		panel.add(lblNewLabel_2);
		
		lblNewLabel_3 = new JLabel("");
		lblNewLabel_3.setVisible(false);
		lblNewLabel_3.setForeground(Color.WHITE);
		lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_3.setBounds(215, 90, 300, 200);
		panel.add(lblNewLabel_3);
		
		lblNewLabel_4 = new JLabel("");
		lblNewLabel_4.addMouseListener(new MouseAdapter() {
			public void mouseReleased(MouseEvent e) {
				
			}
		});
		lblNewLabel_4.setVisible(false);
		lblNewLabel_4.setForeground(Color.WHITE);
		lblNewLabel_4.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_4.setBounds(121, 90, 103, 129);
		panel.add(lblNewLabel_4);
				
		textField = new JTextField();
		textField.setHorizontalAlignment(SwingConstants.RIGHT);
		textField.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField.setVisible(false);
		textField.setBounds(121, 261, 324, 49);
		panel.add(textField);
		textField.setColumns(10);
		
		textField1 = new JTextField();
		textField1.setHorizontalAlignment(SwingConstants.RIGHT);
		textField1.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField1.setVisible(false);
		textField1.setBounds(121, 261, 324, 49);
		panel.add(textField1);
		textField1.setColumns(10);
		
		returnButton = new JButton("Return");
		returnButton.setVisible(false);
		returnButton.setFont(new Font("Tahoma", Font.BOLD, 20));
		returnButton.setForeground(Color.RED);
		returnButton.setBackground(Color.WHITE);
		returnButton.setBounds(225, 363, 126, 43);
		panel.add(returnButton);
		
		
		returnButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel.setVisible(true);
				rdbtnEasy.setVisible(true);
				rdbtnAverage.setVisible(true);
				rdbtnDifficult.setVisible(true);
				lblNewLabel_1_2_3.setVisible(true);
				lblNewLabel_1_2_1.setVisible(true);
				lblNewLabel_1_2_2.setVisible(true);
				lblNewLabel_1_1.setVisible(true);
				lblNewLabel_1.setVisible(true);
				lblNewLabel_1_2.setVisible(true);
				lblNewLabel_1_2_4.setVisible(true);
				btnStart.setVisible(true);
				returnButton.setVisible(false);
				lblNewLabel_3.setVisible(false);
				lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
			}

		
			
			
		});
		
		btnNewButton_1 = new JButton("SUBMIT");
		btnNewButton_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				
				
				double result = getResult(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
				
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
				
			}
		});
		btnNewButton_1.setVisible(false);
		btnNewButton_1.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_1.setForeground(Color.RED);
		btnNewButton_1.setBackground(Color.WHITE);
		btnNewButton_1.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_1);
		
		//Button 2
		btnNewButton_2 = new JButton("SUBMIT");
		btnNewButton_2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				double result = getResultAverage(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
			
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
			}
		});
		btnNewButton_2.setVisible(false);
		btnNewButton_2.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_2.setForeground(Color.RED);
		btnNewButton_2.setBackground(Color.WHITE);
		btnNewButton_2.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_2);
		
		
		textField2 = new JTextField();
		textField2.setHorizontalAlignment(SwingConstants.RIGHT);
		textField2.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField2.setVisible(false);
		textField2.setBounds(121, 261, 324, 49);
		panel.add(textField2);
		textField2.setColumns(10);
		
		btnNewButton_3 = new JButton("SUBMIT");
		btnNewButton_3.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel_2.setVisible(false);
				
				textField.setVisible(false);
				textField1.setVisible(false);
				btnNewButton_1.setVisible(false);
				btnNewButton_2.setVisible(false);
				
				textField2.setVisible(false);
				btnNewButton_3.setVisible(false);
				
				
				
			}
		});
		btnNewButton_3.setVisible(false);
		btnNewButton_3.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_3.setForeground(Color.RED);
		btnNewButton_3.setBackground(Color.WHITE);
		btnNewButton_3.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_3);
		
		
	}
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-04-30 17:30:30.964
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-04-30 17:30:30.965
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-30 17:30:38.781
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import java.awt.Color;
import java.awt.Toolkit;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

import java.awt.Font;
import javax.swing.JRadioButton;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Arrays;
import java.util.Random;


public class Main extends JFrame {

	private JPanel contentPane;
	private JLabel lblNewLabel_1_2;
	private JLabel lblNewLabel_1;
	private JLabel lblNewLabel_1_1; 
	private JLabel lblNewLabel_1_2_1;
	private JLabel lblNewLabel_1_2_2;
	private JLabel lblNewLabel_1_2_3;
	private JLabel lblNewLabel_1_2_4;
	private JRadioButton rdbtnEasy;
	private JRadioButton rdbtnAverage;
	private JRadioButton rdbtnDifficult;
	private JButton btnStart; 
	private JLabel lblNewLabel;
	private JLabel lblNewLabel_2;
	private JLabel lblNewLabel_3;
	private JLabel lblNewLabel_4;
	private JTextField textField;
	private JButton btnNewButton_1;
	private JTextField textField1;
	private JButton btnNewButton_2;
	private JButton returnButton;

	private JTextField textField2;
	private JButton btnNewButton_3;
	int currentQuestionNumber = 1;
	int playerScore = 0;
	Random random = new Random();
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Main frame = new Main();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
	
	
	
	

	/**
	 * Create the frame.
	 */
	
	
	public int findIndex(char operand) {
		char[] operandOrder = {'-', '+', '/', '*'};
		int index = 0;
		
		for(int i = 0; i < operandOrder.length; i++) {
			if(operand == operandOrder[i]) index = i;
		}
		return index;
	}
	
	public double getResult(String question) {
		char[] questionData = question.toCharArray(); 
		
		char operand = questionData[1];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double result = 0;
		
		if(operand == '+') result = firstNumber + secondNumber;
		if(operand == '-') result = firstNumber - secondNumber;
		if(operand == '*') result = firstNumber * secondNumber;
		if(operand == '/') result = firstNumber / secondNumber;
		double roundedResult = Math.round(result);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	public double getResultAverage(String question) {
		char[] questionData = question.toCharArray(); 
		
		char firstOperand = questionData[1];
		char secondOperand = questionData[3];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double thirdNumber = Double.parseDouble(String.valueOf(questionData[4]));
		double result = 0;
		
		
		char[] operandOrder = {'-', '+', '/', '*'};
		int indexFirst = findIndex(firstOperand);
		int indexSecond = findIndex(secondOperand);
		double totalResult = 0;
		double initialResult = 0;
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+') initialResult = secondNumber + thirdNumber;
			if(secondOperand == '-') initialResult = secondNumber - thirdNumber;
			if(secondOperand == '*') initialResult = secondNumber * thirdNumber;
			if(secondOperand == '/') initialResult = secondNumber / thirdNumber;
			
			
		}
		else if (indexSecond > indexFirst) {
			if(firstOperand == '+') initialResult = firstNumber + secondNumber;
			if(firstOperand == '-') initialResult = firstNumber - secondNumber;
			if(firstOperand == '*') initialResult = firstNumber * secondNumber;
			if(firstOperand == '/') initialResult = firstNumber / secondNumber;
		}
		else {
			if(firstOperand == '+') totalResult = firstNumber + secondNumber + thirdNumber;
			if(firstOperand == '-') totalResult = firstNumber - secondNumber - thirdNumber;
			if(firstOperand == '*') totalResult = firstNumber * secondNumber * thirdNumber;
			if(firstOperand == '/') totalResult = firstNumber / secondNumber / thirdNumber;
		}
		
		
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+')  totalResult = firstNumber + thirdNumber;
			if(secondOperand == '-')  totalResult = firstNumber - thirdNumber;
			if(secondOperand == '*')  totalResult = firstNumber * thirdNumber;
			if(secondOperand == '/')  totalResult = firstNumber / thirdNumber;
			
			
		}
		else (indexSecond > indexFirst) {
			if(firstOperand == '+')  totalResult = initialResult + thirdNumber;
			if(firstOperand == '-')  totalResult = initialResult - thirdNumber;
			if(firstOperand == '*')  totalResult = initialResult * thirdNumber;
			if(firstOperand == '/')  totalResult = initialResult / thirdNumber;
		}
		
		
		
		
		
		double roundedResult = Math.round(totalResult);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	
	public String generateQuestion() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond];
		
		return question;
	}
	
	public String generateQuestionAverage() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexThird = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		int randomIndexOperand2 = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond] + operands[randomIndexOperand2] + numbers[randomIndexThird];
		System.out.println(question);
		return question;
	}
	
	
	public Main() {
		setIconImage(Toolkit.getDefaultToolkit().getImage("C:\\Users\\user\\Downloads\\quiz.png"));
		setTitle("QUIZ GAME");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(400, 100, 600, 600);
		contentPane = new JPanel();
		contentPane.setBackground(Color.WHITE);
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));

		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JPanel panel = new JPanel();
		panel.setBackground(Color.RED);
		panel.setBounds(10, 0, 564, 550);
		contentPane.add(panel);
		panel.setLayout(null);
		
		lblNewLabel_1_2_4 = new JLabel("quiz");
		lblNewLabel_1_2_4.setForeground(Color.WHITE);
		lblNewLabel_1_2_4.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_4.setBounds(140, 130, 561, 120);
		panel.add(lblNewLabel_1_2_4);
		
		lblNewLabel_1_2 = new JLabel("MATH");
		lblNewLabel_1_2.setForeground(Color.WHITE);
		lblNewLabel_1_2.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_2.setBounds(70, 50, 561, 120);
		panel.add(lblNewLabel_1_2);
		
		lblNewLabel_1 = new JLabel("MATH");
		lblNewLabel_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1.setForeground(Color.DARK_GRAY);
		lblNewLabel_1.setBounds(78, 50, 777, 120);
		panel.add(lblNewLabel_1);
		
		lblNewLabel_1_1 = new JLabel("MATH");
		lblNewLabel_1_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_1.setBounds(89, 50, 612, 120);
		panel.add(lblNewLabel_1_1);
		
		lblNewLabel_1_2_2 = new JLabel("quiz");
		lblNewLabel_1_2_2.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_2.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_2.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_2);
		
		lblNewLabel_1_2_1 = new JLabel("quiz");
		lblNewLabel_1_2_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_2_1.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_1.setBounds(159, 130, 561, 120);
		panel.add(lblNewLabel_1_2_1);
		
		lblNewLabel_1_2_3 = new JLabel("quiz");
		lblNewLabel_1_2_3.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_3.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_3.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_3);
		
		lblNewLabel = new JLabel("");
		lblNewLabel.setFont(new Font("Dialog", Font.BOLD, 9));
		lblNewLabel.setBounds(225, 428, 161, 14);
		panel.add(lblNewLabel);
		
		rdbtnEasy = new JRadioButton("EASY");
		rdbtnEasy.setForeground(Color.WHITE);
		rdbtnEasy.setBackground(Color.RED);
		rdbtnEasy.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnEasy.setBounds(215, 232, 269, 78);
		panel.add(rdbtnEasy);
		
		rdbtnAverage = new JRadioButton("AVERAGE");
		rdbtnAverage.setForeground(Color.WHITE);
		rdbtnAverage.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnAverage.setBackground(Color.RED);
		rdbtnAverage.setBounds(188, 290, 269, 73);
		panel.add(rdbtnAverage);
		
		rdbtnDifficult = new JRadioButton("DIFFICULT");
		rdbtnDifficult.setForeground(Color.WHITE);
		rdbtnDifficult.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnDifficult.setBackground(Color.RED);
		rdbtnDifficult.setBounds(176, 342, 269, 68);
		panel.add(rdbtnDifficult);
		
		ButtonGroup difficulty = new ButtonGroup();
		difficulty.add(rdbtnEasy);
		difficulty.add(rdbtnAverage);
		difficulty.add(rdbtnDifficult);
		
		btnStart = new JButton("START");
		
		
	
		
		btnStart.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
			if(rdbtnEasy.isSelected()){
				///////////
				
 				lblNewLabel_3.setText(generateQuestion());
 				
 				
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_1.setVisible(true);
				
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnAverage.isSelected()){
				
				lblNewLabel_3.setText(generateQuestionAverage());
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_2.setVisible(true);
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnDifficult.isSelected()){
				
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			}
		});
		btnStart.setBackground(Color.WHITE);
		btnStart.setForeground(Color.RED);
		btnStart.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnStart.setBounds(212, 453, 125, 43);
		panel.add(btnStart);
		
		lblNewLabel_2 = new JLabel("");
		lblNewLabel_2.setVisible(false);
		lblNewLabel_2.setForeground(Color.WHITE);
		lblNewLabel_2.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_2.setBounds(317, 90, 125, 129);
		panel.add(lblNewLabel_2);
		
		lblNewLabel_3 = new JLabel("");
		lblNewLabel_3.setVisible(false);
		lblNewLabel_3.setForeground(Color.WHITE);
		lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_3.setBounds(215, 90, 300, 200);
		panel.add(lblNewLabel_3);
		
		lblNewLabel_4 = new JLabel("");
		lblNewLabel_4.addMouseListener(new MouseAdapter() {
			public void mouseReleased(MouseEvent e) {
				
			}
		});
		lblNewLabel_4.setVisible(false);
		lblNewLabel_4.setForeground(Color.WHITE);
		lblNewLabel_4.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_4.setBounds(121, 90, 103, 129);
		panel.add(lblNewLabel_4);
				
		textField = new JTextField();
		textField.setHorizontalAlignment(SwingConstants.RIGHT);
		textField.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField.setVisible(false);
		textField.setBounds(121, 261, 324, 49);
		panel.add(textField);
		textField.setColumns(10);
		
		textField1 = new JTextField();
		textField1.setHorizontalAlignment(SwingConstants.RIGHT);
		textField1.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField1.setVisible(false);
		textField1.setBounds(121, 261, 324, 49);
		panel.add(textField1);
		textField1.setColumns(10);
		
		returnButton = new JButton("Return");
		returnButton.setVisible(false);
		returnButton.setFont(new Font("Tahoma", Font.BOLD, 20));
		returnButton.setForeground(Color.RED);
		returnButton.setBackground(Color.WHITE);
		returnButton.setBounds(225, 363, 126, 43);
		panel.add(returnButton);
		
		
		returnButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel.setVisible(true);
				rdbtnEasy.setVisible(true);
				rdbtnAverage.setVisible(true);
				rdbtnDifficult.setVisible(true);
				lblNewLabel_1_2_3.setVisible(true);
				lblNewLabel_1_2_1.setVisible(true);
				lblNewLabel_1_2_2.setVisible(true);
				lblNewLabel_1_1.setVisible(true);
				lblNewLabel_1.setVisible(true);
				lblNewLabel_1_2.setVisible(true);
				lblNewLabel_1_2_4.setVisible(true);
				btnStart.setVisible(true);
				returnButton.setVisible(false);
				lblNewLabel_3.setVisible(false);
				lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
			}

		
			
			
		});
		
		btnNewButton_1 = new JButton("SUBMIT");
		btnNewButton_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				
				
				double result = getResult(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
				
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
				
			}
		});
		btnNewButton_1.setVisible(false);
		btnNewButton_1.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_1.setForeground(Color.RED);
		btnNewButton_1.setBackground(Color.WHITE);
		btnNewButton_1.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_1);
		
		//Button 2
		btnNewButton_2 = new JButton("SUBMIT");
		btnNewButton_2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				double result = getResultAverage(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
			
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
			}
		});
		btnNewButton_2.setVisible(false);
		btnNewButton_2.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_2.setForeground(Color.RED);
		btnNewButton_2.setBackground(Color.WHITE);
		btnNewButton_2.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_2);
		
		
		textField2 = new JTextField();
		textField2.setHorizontalAlignment(SwingConstants.RIGHT);
		textField2.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField2.setVisible(false);
		textField2.setBounds(121, 261, 324, 49);
		panel.add(textField2);
		textField2.setColumns(10);
		
		btnNewButton_3 = new JButton("SUBMIT");
		btnNewButton_3.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel_2.setVisible(false);
				
				textField.setVisible(false);
				textField1.setVisible(false);
				btnNewButton_1.setVisible(false);
				btnNewButton_2.setVisible(false);
				
				textField2.setVisible(false);
				btnNewButton_3.setVisible(false);
				
				
				
			}
		});
		btnNewButton_3.setVisible(false);
		btnNewButton_3.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_3.setForeground(Color.RED);
		btnNewButton_3.setBackground(Color.WHITE);
		btnNewButton_3.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_3);
		
		
	}
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-04-30 17:30:38.782
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-04-30 17:30:38.782
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-30 17:30:38.795
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import java.awt.Color;
import java.awt.Toolkit;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

import java.awt.Font;
import javax.swing.JRadioButton;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Arrays;
import java.util.Random;


public class Main extends JFrame {

	private JPanel contentPane;
	private JLabel lblNewLabel_1_2;
	private JLabel lblNewLabel_1;
	private JLabel lblNewLabel_1_1; 
	private JLabel lblNewLabel_1_2_1;
	private JLabel lblNewLabel_1_2_2;
	private JLabel lblNewLabel_1_2_3;
	private JLabel lblNewLabel_1_2_4;
	private JRadioButton rdbtnEasy;
	private JRadioButton rdbtnAverage;
	private JRadioButton rdbtnDifficult;
	private JButton btnStart; 
	private JLabel lblNewLabel;
	private JLabel lblNewLabel_2;
	private JLabel lblNewLabel_3;
	private JLabel lblNewLabel_4;
	private JTextField textField;
	private JButton btnNewButton_1;
	private JTextField textField1;
	private JButton btnNewButton_2;
	private JButton returnButton;

	private JTextField textField2;
	private JButton btnNewButton_3;
	int currentQuestionNumber = 1;
	int playerScore = 0;
	Random random = new Random();
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Main frame = new Main();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
	
	
	
	

	/**
	 * Create the frame.
	 */
	
	
	public int findIndex(char operand) {
		char[] operandOrder = {'-', '+', '/', '*'};
		int index = 0;
		
		for(int i = 0; i < operandOrder.length; i++) {
			if(operand == operandOrder[i]) index = i;
		}
		return index;
	}
	
	public double getResult(String question) {
		char[] questionData = question.toCharArray(); 
		
		char operand = questionData[1];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double result = 0;
		
		if(operand == '+') result = firstNumber + secondNumber;
		if(operand == '-') result = firstNumber - secondNumber;
		if(operand == '*') result = firstNumber * secondNumber;
		if(operand == '/') result = firstNumber / secondNumber;
		double roundedResult = Math.round(result);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	public double getResultAverage(String question) {
		char[] questionData = question.toCharArray(); 
		
		char firstOperand = questionData[1];
		char secondOperand = questionData[3];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double thirdNumber = Double.parseDouble(String.valueOf(questionData[4]));
		double result = 0;
		
		
		char[] operandOrder = {'-', '+', '/', '*'};
		int indexFirst = findIndex(firstOperand);
		int indexSecond = findIndex(secondOperand);
		double totalResult = 0;
		double initialResult = 0;
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+') initialResult = secondNumber + thirdNumber;
			if(secondOperand == '-') initialResult = secondNumber - thirdNumber;
			if(secondOperand == '*') initialResult = secondNumber * thirdNumber;
			if(secondOperand == '/') initialResult = secondNumber / thirdNumber;
			
			
		}
		else if (indexSecond > indexFirst) {
			if(firstOperand == '+') initialResult = firstNumber + secondNumber;
			if(firstOperand == '-') initialResult = firstNumber - secondNumber;
			if(firstOperand == '*') initialResult = firstNumber * secondNumber;
			if(firstOperand == '/') initialResult = firstNumber / secondNumber;
		}
		else {
			if(firstOperand == '+') totalResult = firstNumber + secondNumber + thirdNumber;
			if(firstOperand == '-') totalResult = firstNumber - secondNumber - thirdNumber;
			if(firstOperand == '*') totalResult = firstNumber * secondNumber * thirdNumber;
			if(firstOperand == '/') totalResult = firstNumber / secondNumber / thirdNumber;
		}
		
		
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+')  totalResult = firstNumber + thirdNumber;
			if(secondOperand == '-')  totalResult = firstNumber - thirdNumber;
			if(secondOperand == '*')  totalResult = firstNumber * thirdNumber;
			if(secondOperand == '/')  totalResult = firstNumber / thirdNumber;
			
			
		}
		else (indexSecond > indexFirst) {
			if(firstOperand == '+')  totalResult = initialResult + thirdNumber;
			if(firstOperand == '-')  totalResult = initialResult - thirdNumber;
			if(firstOperand == '*')  totalResult = initialResult * thirdNumber;
			if(firstOperand == '/')  totalResult = initialResult / thirdNumber;
		}
		
		
		
		
		
		double roundedResult = Math.round(totalResult);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	
	public String generateQuestion() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond];
		
		return question;
	}
	
	public String generateQuestionAverage() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexThird = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		int randomIndexOperand2 = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond] + operands[randomIndexOperand2] + numbers[randomIndexThird];
		System.out.println(question);
		return question;
	}
	
	
	public Main() {
		setIconImage(Toolkit.getDefaultToolkit().getImage("C:\\Users\\user\\Downloads\\quiz.png"));
		setTitle("QUIZ GAME");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(400, 100, 600, 600);
		contentPane = new JPanel();
		contentPane.setBackground(Color.WHITE);
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));

		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JPanel panel = new JPanel();
		panel.setBackground(Color.RED);
		panel.setBounds(10, 0, 564, 550);
		contentPane.add(panel);
		panel.setLayout(null);
		
		lblNewLabel_1_2_4 = new JLabel("quiz");
		lblNewLabel_1_2_4.setForeground(Color.WHITE);
		lblNewLabel_1_2_4.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_4.setBounds(140, 130, 561, 120);
		panel.add(lblNewLabel_1_2_4);
		
		lblNewLabel_1_2 = new JLabel("MATH");
		lblNewLabel_1_2.setForeground(Color.WHITE);
		lblNewLabel_1_2.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_2.setBounds(70, 50, 561, 120);
		panel.add(lblNewLabel_1_2);
		
		lblNewLabel_1 = new JLabel("MATH");
		lblNewLabel_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1.setForeground(Color.DARK_GRAY);
		lblNewLabel_1.setBounds(78, 50, 777, 120);
		panel.add(lblNewLabel_1);
		
		lblNewLabel_1_1 = new JLabel("MATH");
		lblNewLabel_1_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_1.setBounds(89, 50, 612, 120);
		panel.add(lblNewLabel_1_1);
		
		lblNewLabel_1_2_2 = new JLabel("quiz");
		lblNewLabel_1_2_2.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_2.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_2.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_2);
		
		lblNewLabel_1_2_1 = new JLabel("quiz");
		lblNewLabel_1_2_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_2_1.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_1.setBounds(159, 130, 561, 120);
		panel.add(lblNewLabel_1_2_1);
		
		lblNewLabel_1_2_3 = new JLabel("quiz");
		lblNewLabel_1_2_3.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_3.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_3.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_3);
		
		lblNewLabel = new JLabel("");
		lblNewLabel.setFont(new Font("Dialog", Font.BOLD, 9));
		lblNewLabel.setBounds(225, 428, 161, 14);
		panel.add(lblNewLabel);
		
		rdbtnEasy = new JRadioButton("EASY");
		rdbtnEasy.setForeground(Color.WHITE);
		rdbtnEasy.setBackground(Color.RED);
		rdbtnEasy.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnEasy.setBounds(215, 232, 269, 78);
		panel.add(rdbtnEasy);
		
		rdbtnAverage = new JRadioButton("AVERAGE");
		rdbtnAverage.setForeground(Color.WHITE);
		rdbtnAverage.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnAverage.setBackground(Color.RED);
		rdbtnAverage.setBounds(188, 290, 269, 73);
		panel.add(rdbtnAverage);
		
		rdbtnDifficult = new JRadioButton("DIFFICULT");
		rdbtnDifficult.setForeground(Color.WHITE);
		rdbtnDifficult.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnDifficult.setBackground(Color.RED);
		rdbtnDifficult.setBounds(176, 342, 269, 68);
		panel.add(rdbtnDifficult);
		
		ButtonGroup difficulty = new ButtonGroup();
		difficulty.add(rdbtnEasy);
		difficulty.add(rdbtnAverage);
		difficulty.add(rdbtnDifficult);
		
		btnStart = new JButton("START");
		
		
	
		
		btnStart.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
			if(rdbtnEasy.isSelected()){
				///////////
				
 				lblNewLabel_3.setText(generateQuestion());
 				
 				
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_1.setVisible(true);
				
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnAverage.isSelected()){
				
				lblNewLabel_3.setText(generateQuestionAverage());
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_2.setVisible(true);
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnDifficult.isSelected()){
				
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			}
		});
		btnStart.setBackground(Color.WHITE);
		btnStart.setForeground(Color.RED);
		btnStart.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnStart.setBounds(212, 453, 125, 43);
		panel.add(btnStart);
		
		lblNewLabel_2 = new JLabel("");
		lblNewLabel_2.setVisible(false);
		lblNewLabel_2.setForeground(Color.WHITE);
		lblNewLabel_2.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_2.setBounds(317, 90, 125, 129);
		panel.add(lblNewLabel_2);
		
		lblNewLabel_3 = new JLabel("");
		lblNewLabel_3.setVisible(false);
		lblNewLabel_3.setForeground(Color.WHITE);
		lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_3.setBounds(215, 90, 300, 200);
		panel.add(lblNewLabel_3);
		
		lblNewLabel_4 = new JLabel("");
		lblNewLabel_4.addMouseListener(new MouseAdapter() {
			public void mouseReleased(MouseEvent e) {
				
			}
		});
		lblNewLabel_4.setVisible(false);
		lblNewLabel_4.setForeground(Color.WHITE);
		lblNewLabel_4.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_4.setBounds(121, 90, 103, 129);
		panel.add(lblNewLabel_4);
				
		textField = new JTextField();
		textField.setHorizontalAlignment(SwingConstants.RIGHT);
		textField.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField.setVisible(false);
		textField.setBounds(121, 261, 324, 49);
		panel.add(textField);
		textField.setColumns(10);
		
		textField1 = new JTextField();
		textField1.setHorizontalAlignment(SwingConstants.RIGHT);
		textField1.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField1.setVisible(false);
		textField1.setBounds(121, 261, 324, 49);
		panel.add(textField1);
		textField1.setColumns(10);
		
		returnButton = new JButton("Return");
		returnButton.setVisible(false);
		returnButton.setFont(new Font("Tahoma", Font.BOLD, 20));
		returnButton.setForeground(Color.RED);
		returnButton.setBackground(Color.WHITE);
		returnButton.setBounds(225, 363, 126, 43);
		panel.add(returnButton);
		
		
		returnButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel.setVisible(true);
				rdbtnEasy.setVisible(true);
				rdbtnAverage.setVisible(true);
				rdbtnDifficult.setVisible(true);
				lblNewLabel_1_2_3.setVisible(true);
				lblNewLabel_1_2_1.setVisible(true);
				lblNewLabel_1_2_2.setVisible(true);
				lblNewLabel_1_1.setVisible(true);
				lblNewLabel_1.setVisible(true);
				lblNewLabel_1_2.setVisible(true);
				lblNewLabel_1_2_4.setVisible(true);
				btnStart.setVisible(true);
				returnButton.setVisible(false);
				lblNewLabel_3.setVisible(false);
				lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
			}

		
			
			
		});
		
		btnNewButton_1 = new JButton("SUBMIT");
		btnNewButton_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				
				
				double result = getResult(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
				
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
				
			}
		});
		btnNewButton_1.setVisible(false);
		btnNewButton_1.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_1.setForeground(Color.RED);
		btnNewButton_1.setBackground(Color.WHITE);
		btnNewButton_1.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_1);
		
		//Button 2
		btnNewButton_2 = new JButton("SUBMIT");
		btnNewButton_2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				double result = getResultAverage(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
			
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
			}
		});
		btnNewButton_2.setVisible(false);
		btnNewButton_2.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_2.setForeground(Color.RED);
		btnNewButton_2.setBackground(Color.WHITE);
		btnNewButton_2.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_2);
		
		
		textField2 = new JTextField();
		textField2.setHorizontalAlignment(SwingConstants.RIGHT);
		textField2.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField2.setVisible(false);
		textField2.setBounds(121, 261, 324, 49);
		panel.add(textField2);
		textField2.setColumns(10);
		
		btnNewButton_3 = new JButton("SUBMIT");
		btnNewButton_3.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel_2.setVisible(false);
				
				textField.setVisible(false);
				textField1.setVisible(false);
				btnNewButton_1.setVisible(false);
				btnNewButton_2.setVisible(false);
				
				textField2.setVisible(false);
				btnNewButton_3.setVisible(false);
				
				
				
			}
		});
		btnNewButton_3.setVisible(false);
		btnNewButton_3.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_3.setForeground(Color.RED);
		btnNewButton_3.setBackground(Color.WHITE);
		btnNewButton_3.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_3);
		
		
	}
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-04-30 17:30:38.796
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-04-30 17:30:38.796
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-30 17:31:01.177
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import java.awt.Color;
import java.awt.Toolkit;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

import java.awt.Font;
import javax.swing.JRadioButton;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Arrays;
import java.util.Random;


public class Main extends JFrame {

	private JPanel contentPane;
	private JLabel lblNewLabel_1_2;
	private JLabel lblNewLabel_1;
	private JLabel lblNewLabel_1_1; 
	private JLabel lblNewLabel_1_2_1;
	private JLabel lblNewLabel_1_2_2;
	private JLabel lblNewLabel_1_2_3;
	private JLabel lblNewLabel_1_2_4;
	private JRadioButton rdbtnEasy;
	private JRadioButton rdbtnAverage;
	private JRadioButton rdbtnDifficult;
	private JButton btnStart; 
	private JLabel lblNewLabel;
	private JLabel lblNewLabel_2;
	private JLabel lblNewLabel_3;
	private JLabel lblNewLabel_4;
	private JTextField textField;
	private JButton btnNewButton_1;
	private JTextField textField1;
	private JButton btnNewButton_2;
	private JButton returnButton;

	private JTextField textField2;
	private JButton btnNewButton_3;
	int currentQuestionNumber = 1;
	int playerScore = 0;
	Random random = new Random();
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Main frame = new Main();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
	
	
	
	

	/**
	 * Create the frame.
	 */
	
	
	public int findIndex(char operand) {
		char[] operandOrder = {'-', '+', '/', '*'};
		int index = 0;
		
		for(int i = 0; i < operandOrder.length; i++) {
			if(operand == operandOrder[i]) index = i;
		}
		return index;
	}
	
	public double getResult(String question) {
		char[] questionData = question.toCharArray(); 
		
		char operand = questionData[1];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double result = 0;
		
		if(operand == '+') result = firstNumber + secondNumber;
		if(operand == '-') result = firstNumber - secondNumber;
		if(operand == '*') result = firstNumber * secondNumber;
		if(operand == '/') result = firstNumber / secondNumber;
		double roundedResult = Math.round(result);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	public double getResultAverage(String question) {
		char[] questionData = question.toCharArray(); 
		
		char firstOperand = questionData[1];
		char secondOperand = questionData[3];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double thirdNumber = Double.parseDouble(String.valueOf(questionData[4]));
		double result = 0;
		
		
		char[] operandOrder = {'-', '+', '/', '*'};
		int indexFirst = findIndex(firstOperand);
		int indexSecond = findIndex(secondOperand);
		double totalResult = 0;
		double initialResult = 0;
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+') initialResult = secondNumber + thirdNumber;
			if(secondOperand == '-') initialResult = secondNumber - thirdNumber;
			if(secondOperand == '*') initialResult = secondNumber * thirdNumber;
			if(secondOperand == '/') initialResult = secondNumber / thirdNumber;
			
			
		}
		else if (indexSecond > indexFirst) {
			if(firstOperand == '+') initialResult = firstNumber + secondNumber;
			if(firstOperand == '-') initialResult = firstNumber - secondNumber;
			if(firstOperand == '*') initialResult = firstNumber * secondNumber;
			if(firstOperand == '/') initialResult = firstNumber / secondNumber;
		}
		else {
			if(firstOperand == '+') totalResult = firstNumber + secondNumber + thirdNumber;
			if(firstOperand == '-') totalResult = firstNumber - secondNumber - thirdNumber;
			if(firstOperand == '*') totalResult = firstNumber * secondNumber * thirdNumber;
			if(firstOperand == '/') totalResult = firstNumber / secondNumber / thirdNumber;
		}
		
		
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+')  totalResult = firstNumber + thirdNumber;
			if(secondOperand == '-')  totalResult = firstNumber - thirdNumber;
			if(secondOperand == '*')  totalResult = firstNumber * thirdNumber;
			if(secondOperand == '/')  totalResult = firstNumber / thirdNumber;
			
			
		}
		else (indexSecond > indexFirst) {
			if(firstOperand == '+')  totalResult = initialResult + thirdNumber;
			if(firstOperand == '-')  totalResult = initialResult - thirdNumber;
			if(firstOperand == '*')  totalResult = initialResult * thirdNumber;
			if(firstOperand == '/')  totalResult = initialResult / thirdNumber;
		}
		
		
		
		
		
		double roundedResult = Math.round(totalResult);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	
	public String generateQuestion() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond];
		
		return question;
	}
	
	public String generateQuestionAverage() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexThird = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		int randomIndexOperand2 = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond] + operands[randomIndexOperand2] + numbers[randomIndexThird];
		System.out.println(question);
		return question;
	}
	
	
	public Main() {
		setIconImage(Toolkit.getDefaultToolkit().getImage("C:\\Users\\user\\Downloads\\quiz.png"));
		setTitle("QUIZ GAME");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(400, 100, 600, 600);
		contentPane = new JPanel();
		contentPane.setBackground(Color.WHITE);
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));

		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JPanel panel = new JPanel();
		panel.setBackground(Color.RED);
		panel.setBounds(10, 0, 564, 550);
		contentPane.add(panel);
		panel.setLayout(null);
		
		lblNewLabel_1_2_4 = new JLabel("quiz");
		lblNewLabel_1_2_4.setForeground(Color.WHITE);
		lblNewLabel_1_2_4.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_4.setBounds(140, 130, 561, 120);
		panel.add(lblNewLabel_1_2_4);
		
		lblNewLabel_1_2 = new JLabel("MATH");
		lblNewLabel_1_2.setForeground(Color.WHITE);
		lblNewLabel_1_2.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_2.setBounds(70, 50, 561, 120);
		panel.add(lblNewLabel_1_2);
		
		lblNewLabel_1 = new JLabel("MATH");
		lblNewLabel_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1.setForeground(Color.DARK_GRAY);
		lblNewLabel_1.setBounds(78, 50, 777, 120);
		panel.add(lblNewLabel_1);
		
		lblNewLabel_1_1 = new JLabel("MATH");
		lblNewLabel_1_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_1.setBounds(89, 50, 612, 120);
		panel.add(lblNewLabel_1_1);
		
		lblNewLabel_1_2_2 = new JLabel("quiz");
		lblNewLabel_1_2_2.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_2.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_2.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_2);
		
		lblNewLabel_1_2_1 = new JLabel("quiz");
		lblNewLabel_1_2_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_2_1.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_1.setBounds(159, 130, 561, 120);
		panel.add(lblNewLabel_1_2_1);
		
		lblNewLabel_1_2_3 = new JLabel("quiz");
		lblNewLabel_1_2_3.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_3.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_3.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_3);
		
		lblNewLabel = new JLabel("");
		lblNewLabel.setFont(new Font("Dialog", Font.BOLD, 9));
		lblNewLabel.setBounds(225, 428, 161, 14);
		panel.add(lblNewLabel);
		
		rdbtnEasy = new JRadioButton("EASY");
		rdbtnEasy.setForeground(Color.WHITE);
		rdbtnEasy.setBackground(Color.RED);
		rdbtnEasy.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnEasy.setBounds(215, 232, 269, 78);
		panel.add(rdbtnEasy);
		
		rdbtnAverage = new JRadioButton("AVERAGE");
		rdbtnAverage.setForeground(Color.WHITE);
		rdbtnAverage.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnAverage.setBackground(Color.RED);
		rdbtnAverage.setBounds(188, 290, 269, 73);
		panel.add(rdbtnAverage);
		
		rdbtnDifficult = new JRadioButton("DIFFICULT");
		rdbtnDifficult.setForeground(Color.WHITE);
		rdbtnDifficult.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnDifficult.setBackground(Color.RED);
		rdbtnDifficult.setBounds(176, 342, 269, 68);
		panel.add(rdbtnDifficult);
		
		ButtonGroup difficulty = new ButtonGroup();
		difficulty.add(rdbtnEasy);
		difficulty.add(rdbtnAverage);
		difficulty.add(rdbtnDifficult);
		
		btnStart = new JButton("START");
		
		
	
		
		btnStart.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
			if(rdbtnEasy.isSelected()){
				///////////
				
 				lblNewLabel_3.setText(generateQuestion());
 				
 				
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_1.setVisible(true);
				
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnAverage.isSelected()){
				
				lblNewLabel_3.setText(generateQuestionAverage());
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_2.setVisible(true);
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnDifficult.isSelected()){
				
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			}
		});
		btnStart.setBackground(Color.WHITE);
		btnStart.setForeground(Color.RED);
		btnStart.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnStart.setBounds(212, 453, 125, 43);
		panel.add(btnStart);
		
		lblNewLabel_2 = new JLabel("");
		lblNewLabel_2.setVisible(false);
		lblNewLabel_2.setForeground(Color.WHITE);
		lblNewLabel_2.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_2.setBounds(317, 90, 125, 129);
		panel.add(lblNewLabel_2);
		
		lblNewLabel_3 = new JLabel("");
		lblNewLabel_3.setVisible(false);
		lblNewLabel_3.setForeground(Color.WHITE);
		lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_3.setBounds(215, 90, 300, 200);
		panel.add(lblNewLabel_3);
		
		lblNewLabel_4 = new JLabel("");
		lblNewLabel_4.addMouseListener(new MouseAdapter() {
			public void mouseReleased(MouseEvent e) {
				
			}
		});
		lblNewLabel_4.setVisible(false);
		lblNewLabel_4.setForeground(Color.WHITE);
		lblNewLabel_4.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_4.setBounds(121, 90, 103, 129);
		panel.add(lblNewLabel_4);
				
		textField = new JTextField();
		textField.setHorizontalAlignment(SwingConstants.RIGHT);
		textField.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField.setVisible(false);
		textField.setBounds(121, 261, 324, 49);
		panel.add(textField);
		textField.setColumns(10);
		
		textField1 = new JTextField();
		textField1.setHorizontalAlignment(SwingConstants.RIGHT);
		textField1.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField1.setVisible(false);
		textField1.setBounds(121, 261, 324, 49);
		panel.add(textField1);
		textField1.setColumns(10);
		
		returnButton = new JButton("Return");
		returnButton.setVisible(false);
		returnButton.setFont(new Font("Tahoma", Font.BOLD, 20));
		returnButton.setForeground(Color.RED);
		returnButton.setBackground(Color.WHITE);
		returnButton.setBounds(225, 363, 126, 43);
		panel.add(returnButton);
		
		
		returnButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel.setVisible(true);
				rdbtnEasy.setVisible(true);
				rdbtnAverage.setVisible(true);
				rdbtnDifficult.setVisible(true);
				lblNewLabel_1_2_3.setVisible(true);
				lblNewLabel_1_2_1.setVisible(true);
				lblNewLabel_1_2_2.setVisible(true);
				lblNewLabel_1_1.setVisible(true);
				lblNewLabel_1.setVisible(true);
				lblNewLabel_1_2.setVisible(true);
				lblNewLabel_1_2_4.setVisible(true);
				btnStart.setVisible(true);
				returnButton.setVisible(false);
				lblNewLabel_3.setVisible(false);
				lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
			}

		
			
			
		});
		
		btnNewButton_1 = new JButton("SUBMIT");
		btnNewButton_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				
				
				double result = getResult(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
				
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
				
			}
		});
		btnNewButton_1.setVisible(false);
		btnNewButton_1.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_1.setForeground(Color.RED);
		btnNewButton_1.setBackground(Color.WHITE);
		btnNewButton_1.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_1);
		
		//Button 2
		btnNewButton_2 = new JButton("SUBMIT");
		btnNewButton_2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				double result = getResultAverage(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
			
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
			}
		});
		btnNewButton_2.setVisible(false);
		btnNewButton_2.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_2.setForeground(Color.RED);
		btnNewButton_2.setBackground(Color.WHITE);
		btnNewButton_2.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_2);
		
		
		textField2 = new JTextField();
		textField2.setHorizontalAlignment(SwingConstants.RIGHT);
		textField2.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField2.setVisible(false);
		textField2.setBounds(121, 261, 324, 49);
		panel.add(textField2);
		textField2.setColumns(10);
		
		btnNewButton_3 = new JButton("SUBMIT");
		btnNewButton_3.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel_2.setVisible(false);
				
				textField.setVisible(false);
				textField1.setVisible(false);
				btnNewButton_1.setVisible(false);
				btnNewButton_2.setVisible(false);
				
				textField2.setVisible(false);
				btnNewButton_3.setVisible(false);
				
				
				
			}
		});
		btnNewButton_3.setVisible(false);
		btnNewButton_3.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_3.setForeground(Color.RED);
		btnNewButton_3.setBackground(Color.WHITE);
		btnNewButton_3.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_3);
		
		
	}
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-04-30 17:31:01.178
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-04-30 17:31:01.178
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-30 17:31:03.887
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import java.awt.Color;
import java.awt.Toolkit;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

import java.awt.Font;
import javax.swing.JRadioButton;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Arrays;
import java.util.Random;


public class Main extends JFrame {

	private JPanel contentPane;
	private JLabel lblNewLabel_1_2;
	private JLabel lblNewLabel_1;
	private JLabel lblNewLabel_1_1; 
	private JLabel lblNewLabel_1_2_1;
	private JLabel lblNewLabel_1_2_2;
	private JLabel lblNewLabel_1_2_3;
	private JLabel lblNewLabel_1_2_4;
	private JRadioButton rdbtnEasy;
	private JRadioButton rdbtnAverage;
	private JRadioButton rdbtnDifficult;
	private JButton btnStart; 
	private JLabel lblNewLabel;
	private JLabel lblNewLabel_2;
	private JLabel lblNewLabel_3;
	private JLabel lblNewLabel_4;
	private JTextField textField;
	private JButton btnNewButton_1;
	private JTextField textField1;
	private JButton btnNewButton_2;
	private JButton returnButton;

	private JTextField textField2;
	private JButton btnNewButton_3;
	int currentQuestionNumber = 1;
	int playerScore = 0;
	Random random = new Random();
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Main frame = new Main();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
	
	
	
	

	/**
	 * Create the frame.
	 */
	
	
	public int findIndex(char operand) {
		char[] operandOrder = {'-', '+', '/', '*'};
		int index = 0;
		
		for(int i = 0; i < operandOrder.length; i++) {
			if(operand == operandOrder[i]) index = i;
		}
		return index;
	}
	
	public double getResult(String question) {
		char[] questionData = question.toCharArray(); 
		
		char operand = questionData[1];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double result = 0;
		
		if(operand == '+') result = firstNumber + secondNumber;
		if(operand == '-') result = firstNumber - secondNumber;
		if(operand == '*') result = firstNumber * secondNumber;
		if(operand == '/') result = firstNumber / secondNumber;
		double roundedResult = Math.round(result);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	public double getResultAverage(String question) {
		char[] questionData = question.toCharArray(); 
		
		char firstOperand = questionData[1];
		char secondOperand = questionData[3];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double thirdNumber = Double.parseDouble(String.valueOf(questionData[4]));
		double result = 0;
		
		
		char[] operandOrder = {'-', '+', '/', '*'};
		int indexFirst = findIndex(firstOperand);
		int indexSecond = findIndex(secondOperand);
		double totalResult = 0;
		double initialResult = 0;
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+') initialResult = secondNumber + thirdNumber;
			if(secondOperand == '-') initialResult = secondNumber - thirdNumber;
			if(secondOperand == '*') initialResult = secondNumber * thirdNumber;
			if(secondOperand == '/') initialResult = secondNumber / thirdNumber;
			
			
		}
		else if (indexSecond > indexFirst) {
			if(firstOperand == '+') initialResult = firstNumber + secondNumber;
			if(firstOperand == '-') initialResult = firstNumber - secondNumber;
			if(firstOperand == '*') initialResult = firstNumber * secondNumber;
			if(firstOperand == '/') initialResult = firstNumber / secondNumber;
		}
		else {
			if(firstOperand == '+') totalResult = firstNumber + secondNumber + thirdNumber;
			if(firstOperand == '-') totalResult = firstNumber - secondNumber - thirdNumber;
			if(firstOperand == '*') totalResult = firstNumber * secondNumber * thirdNumber;
			if(firstOperand == '/') totalResult = firstNumber / secondNumber / thirdNumber;
		}
		
		
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+')  totalResult = firstNumber + thirdNumber;
			if(secondOperand == '-')  totalResult = firstNumber - thirdNumber;
			if(secondOperand == '*')  totalResult = firstNumber * thirdNumber;
			if(secondOperand == '/')  totalResult = firstNumber / thirdNumber;
			
			
		}
		else (indexSecond > indexFirst) {
			if(firstOperand == '+')  totalResult = initialResult + thirdNumber;
			if(firstOperand == '-')  totalResult = initialResult - thirdNumber;
			if(firstOperand == '*')  totalResult = initialResult * thirdNumber;
			if(firstOperand == '/')  totalResult = initialResult / thirdNumber;
		}
		
		
		
		
		
		double roundedResult = Math.round(totalResult);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	
	public String generateQuestion() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond];
		
		return question;
	}
	
	public String generateQuestionAverage() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexThird = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		int randomIndexOperand2 = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond] + operands[randomIndexOperand2] + numbers[randomIndexThird];
		System.out.println(question);
		return question;
	}
	
	
	public Main() {
		setIconImage(Toolkit.getDefaultToolkit().getImage("C:\\Users\\user\\Downloads\\quiz.png"));
		setTitle("QUIZ GAME");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(400, 100, 600, 600);
		contentPane = new JPanel();
		contentPane.setBackground(Color.WHITE);
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));

		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JPanel panel = new JPanel();
		panel.setBackground(Color.RED);
		panel.setBounds(10, 0, 564, 550);
		contentPane.add(panel);
		panel.setLayout(null);
		
		lblNewLabel_1_2_4 = new JLabel("quiz");
		lblNewLabel_1_2_4.setForeground(Color.WHITE);
		lblNewLabel_1_2_4.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_4.setBounds(140, 130, 561, 120);
		panel.add(lblNewLabel_1_2_4);
		
		lblNewLabel_1_2 = new JLabel("MATH");
		lblNewLabel_1_2.setForeground(Color.WHITE);
		lblNewLabel_1_2.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_2.setBounds(70, 50, 561, 120);
		panel.add(lblNewLabel_1_2);
		
		lblNewLabel_1 = new JLabel("MATH");
		lblNewLabel_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1.setForeground(Color.DARK_GRAY);
		lblNewLabel_1.setBounds(78, 50, 777, 120);
		panel.add(lblNewLabel_1);
		
		lblNewLabel_1_1 = new JLabel("MATH");
		lblNewLabel_1_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_1.setBounds(89, 50, 612, 120);
		panel.add(lblNewLabel_1_1);
		
		lblNewLabel_1_2_2 = new JLabel("quiz");
		lblNewLabel_1_2_2.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_2.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_2.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_2);
		
		lblNewLabel_1_2_1 = new JLabel("quiz");
		lblNewLabel_1_2_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_2_1.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_1.setBounds(159, 130, 561, 120);
		panel.add(lblNewLabel_1_2_1);
		
		lblNewLabel_1_2_3 = new JLabel("quiz");
		lblNewLabel_1_2_3.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_3.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_3.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_3);
		
		lblNewLabel = new JLabel("");
		lblNewLabel.setFont(new Font("Dialog", Font.BOLD, 9));
		lblNewLabel.setBounds(225, 428, 161, 14);
		panel.add(lblNewLabel);
		
		rdbtnEasy = new JRadioButton("EASY");
		rdbtnEasy.setForeground(Color.WHITE);
		rdbtnEasy.setBackground(Color.RED);
		rdbtnEasy.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnEasy.setBounds(215, 232, 269, 78);
		panel.add(rdbtnEasy);
		
		rdbtnAverage = new JRadioButton("AVERAGE");
		rdbtnAverage.setForeground(Color.WHITE);
		rdbtnAverage.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnAverage.setBackground(Color.RED);
		rdbtnAverage.setBounds(188, 290, 269, 73);
		panel.add(rdbtnAverage);
		
		rdbtnDifficult = new JRadioButton("DIFFICULT");
		rdbtnDifficult.setForeground(Color.WHITE);
		rdbtnDifficult.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnDifficult.setBackground(Color.RED);
		rdbtnDifficult.setBounds(176, 342, 269, 68);
		panel.add(rdbtnDifficult);
		
		ButtonGroup difficulty = new ButtonGroup();
		difficulty.add(rdbtnEasy);
		difficulty.add(rdbtnAverage);
		difficulty.add(rdbtnDifficult);
		
		btnStart = new JButton("START");
		
		
	
		
		btnStart.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
			if(rdbtnEasy.isSelected()){
				///////////
				
 				lblNewLabel_3.setText(generateQuestion());
 				
 				
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_1.setVisible(true);
				
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnAverage.isSelected()){
				
				lblNewLabel_3.setText(generateQuestionAverage());
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_2.setVisible(true);
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnDifficult.isSelected()){
				
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			}
		});
		btnStart.setBackground(Color.WHITE);
		btnStart.setForeground(Color.RED);
		btnStart.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnStart.setBounds(212, 453, 125, 43);
		panel.add(btnStart);
		
		lblNewLabel_2 = new JLabel("");
		lblNewLabel_2.setVisible(false);
		lblNewLabel_2.setForeground(Color.WHITE);
		lblNewLabel_2.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_2.setBounds(317, 90, 125, 129);
		panel.add(lblNewLabel_2);
		
		lblNewLabel_3 = new JLabel("");
		lblNewLabel_3.setVisible(false);
		lblNewLabel_3.setForeground(Color.WHITE);
		lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_3.setBounds(215, 90, 300, 200);
		panel.add(lblNewLabel_3);
		
		lblNewLabel_4 = new JLabel("");
		lblNewLabel_4.addMouseListener(new MouseAdapter() {
			public void mouseReleased(MouseEvent e) {
				
			}
		});
		lblNewLabel_4.setVisible(false);
		lblNewLabel_4.setForeground(Color.WHITE);
		lblNewLabel_4.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_4.setBounds(121, 90, 103, 129);
		panel.add(lblNewLabel_4);
				
		textField = new JTextField();
		textField.setHorizontalAlignment(SwingConstants.RIGHT);
		textField.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField.setVisible(false);
		textField.setBounds(121, 261, 324, 49);
		panel.add(textField);
		textField.setColumns(10);
		
		textField1 = new JTextField();
		textField1.setHorizontalAlignment(SwingConstants.RIGHT);
		textField1.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField1.setVisible(false);
		textField1.setBounds(121, 261, 324, 49);
		panel.add(textField1);
		textField1.setColumns(10);
		
		returnButton = new JButton("Return");
		returnButton.setVisible(false);
		returnButton.setFont(new Font("Tahoma", Font.BOLD, 20));
		returnButton.setForeground(Color.RED);
		returnButton.setBackground(Color.WHITE);
		returnButton.setBounds(225, 363, 126, 43);
		panel.add(returnButton);
		
		
		returnButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel.setVisible(true);
				rdbtnEasy.setVisible(true);
				rdbtnAverage.setVisible(true);
				rdbtnDifficult.setVisible(true);
				lblNewLabel_1_2_3.setVisible(true);
				lblNewLabel_1_2_1.setVisible(true);
				lblNewLabel_1_2_2.setVisible(true);
				lblNewLabel_1_1.setVisible(true);
				lblNewLabel_1.setVisible(true);
				lblNewLabel_1_2.setVisible(true);
				lblNewLabel_1_2_4.setVisible(true);
				btnStart.setVisible(true);
				returnButton.setVisible(false);
				lblNewLabel_3.setVisible(false);
				lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
			}

		
			
			
		});
		
		btnNewButton_1 = new JButton("SUBMIT");
		btnNewButton_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				
				
				double result = getResult(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
				
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
				
			}
		});
		btnNewButton_1.setVisible(false);
		btnNewButton_1.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_1.setForeground(Color.RED);
		btnNewButton_1.setBackground(Color.WHITE);
		btnNewButton_1.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_1);
		
		//Button 2
		btnNewButton_2 = new JButton("SUBMIT");
		btnNewButton_2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				double result = getResultAverage(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
			
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
			}
		});
		btnNewButton_2.setVisible(false);
		btnNewButton_2.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_2.setForeground(Color.RED);
		btnNewButton_2.setBackground(Color.WHITE);
		btnNewButton_2.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_2);
		
		
		textField2 = new JTextField();
		textField2.setHorizontalAlignment(SwingConstants.RIGHT);
		textField2.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField2.setVisible(false);
		textField2.setBounds(121, 261, 324, 49);
		panel.add(textField2);
		textField2.setColumns(10);
		
		btnNewButton_3 = new JButton("SUBMIT");
		btnNewButton_3.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel_2.setVisible(false);
				
				textField.setVisible(false);
				textField1.setVisible(false);
				btnNewButton_1.setVisible(false);
				btnNewButton_2.setVisible(false);
				
				textField2.setVisible(false);
				btnNewButton_3.setVisible(false);
				
				
				
			}
		});
		btnNewButton_3.setVisible(false);
		btnNewButton_3.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_3.setForeground(Color.RED);
		btnNewButton_3.setBackground(Color.WHITE);
		btnNewButton_3.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_3);
		
		
	}
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-04-30 17:31:03.887
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-04-30 17:31:03.888
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-30 17:31:05.226
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import java.awt.Color;
import java.awt.Toolkit;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

import java.awt.Font;
import javax.swing.JRadioButton;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Arrays;
import java.util.Random;


public class Main extends JFrame {

	private JPanel contentPane;
	private JLabel lblNewLabel_1_2;
	private JLabel lblNewLabel_1;
	private JLabel lblNewLabel_1_1; 
	private JLabel lblNewLabel_1_2_1;
	private JLabel lblNewLabel_1_2_2;
	private JLabel lblNewLabel_1_2_3;
	private JLabel lblNewLabel_1_2_4;
	private JRadioButton rdbtnEasy;
	private JRadioButton rdbtnAverage;
	private JRadioButton rdbtnDifficult;
	private JButton btnStart; 
	private JLabel lblNewLabel;
	private JLabel lblNewLabel_2;
	private JLabel lblNewLabel_3;
	private JLabel lblNewLabel_4;
	private JTextField textField;
	private JButton btnNewButton_1;
	private JTextField textField1;
	private JButton btnNewButton_2;
	private JButton returnButton;

	private JTextField textField2;
	private JButton btnNewButton_3;
	int currentQuestionNumber = 1;
	int playerScore = 0;
	Random random = new Random();
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Main frame = new Main();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
	
	
	
	

	/**
	 * Create the frame.
	 */
	
	
	public int findIndex(char operand) {
		char[] operandOrder = {'-', '+', '/', '*'};
		int index = 0;
		
		for(int i = 0; i < operandOrder.length; i++) {
			if(operand == operandOrder[i]) index = i;
		}
		return index;
	}
	
	public double getResult(String question) {
		char[] questionData = question.toCharArray(); 
		
		char operand = questionData[1];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double result = 0;
		
		if(operand == '+') result = firstNumber + secondNumber;
		if(operand == '-') result = firstNumber - secondNumber;
		if(operand == '*') result = firstNumber * secondNumber;
		if(operand == '/') result = firstNumber / secondNumber;
		double roundedResult = Math.round(result);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	public double getResultAverage(String question) {
		char[] questionData = question.toCharArray(); 
		
		char firstOperand = questionData[1];
		char secondOperand = questionData[3];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double thirdNumber = Double.parseDouble(String.valueOf(questionData[4]));
		double result = 0;
		
		
		char[] operandOrder = {'-', '+', '/', '*'};
		int indexFirst = findIndex(firstOperand);
		int indexSecond = findIndex(secondOperand);
		double totalResult = 0;
		double initialResult = 0;
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+') initialResult = secondNumber + thirdNumber;
			if(secondOperand == '-') initialResult = secondNumber - thirdNumber;
			if(secondOperand == '*') initialResult = secondNumber * thirdNumber;
			if(secondOperand == '/') initialResult = secondNumber / thirdNumber;
			
			
		}
		else if (indexSecond < indexFirst) {
			if(firstOperand == '+') initialResult = firstNumber + secondNumber;
			if(firstOperand == '-') initialResult = firstNumber - secondNumber;
			if(firstOperand == '*') initialResult = firstNumber * secondNumber;
			if(firstOperand == '/') initialResult = firstNumber / secondNumber;
		}
		else {
			if(firstOperand == '+') totalResult = firstNumber + secondNumber + thirdNumber;
			if(firstOperand == '-') totalResult = firstNumber - secondNumber - thirdNumber;
			if(firstOperand == '*') totalResult = firstNumber * secondNumber * thirdNumber;
			if(firstOperand == '/') totalResult = firstNumber / secondNumber / thirdNumber;
		}
		
		
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+')  totalResult = firstNumber + thirdNumber;
			if(secondOperand == '-')  totalResult = firstNumber - thirdNumber;
			if(secondOperand == '*')  totalResult = firstNumber * thirdNumber;
			if(secondOperand == '/')  totalResult = firstNumber / thirdNumber;
			
			
		}
		else (indexSecond > indexFirst) {
			if(firstOperand == '+')  totalResult = initialResult + thirdNumber;
			if(firstOperand == '-')  totalResult = initialResult - thirdNumber;
			if(firstOperand == '*')  totalResult = initialResult * thirdNumber;
			if(firstOperand == '/')  totalResult = initialResult / thirdNumber;
		}
		
		
		
		
		
		double roundedResult = Math.round(totalResult);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	
	public String generateQuestion() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond];
		
		return question;
	}
	
	public String generateQuestionAverage() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexThird = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		int randomIndexOperand2 = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond] + operands[randomIndexOperand2] + numbers[randomIndexThird];
		System.out.println(question);
		return question;
	}
	
	
	public Main() {
		setIconImage(Toolkit.getDefaultToolkit().getImage("C:\\Users\\user\\Downloads\\quiz.png"));
		setTitle("QUIZ GAME");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(400, 100, 600, 600);
		contentPane = new JPanel();
		contentPane.setBackground(Color.WHITE);
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));

		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JPanel panel = new JPanel();
		panel.setBackground(Color.RED);
		panel.setBounds(10, 0, 564, 550);
		contentPane.add(panel);
		panel.setLayout(null);
		
		lblNewLabel_1_2_4 = new JLabel("quiz");
		lblNewLabel_1_2_4.setForeground(Color.WHITE);
		lblNewLabel_1_2_4.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_4.setBounds(140, 130, 561, 120);
		panel.add(lblNewLabel_1_2_4);
		
		lblNewLabel_1_2 = new JLabel("MATH");
		lblNewLabel_1_2.setForeground(Color.WHITE);
		lblNewLabel_1_2.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_2.setBounds(70, 50, 561, 120);
		panel.add(lblNewLabel_1_2);
		
		lblNewLabel_1 = new JLabel("MATH");
		lblNewLabel_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1.setForeground(Color.DARK_GRAY);
		lblNewLabel_1.setBounds(78, 50, 777, 120);
		panel.add(lblNewLabel_1);
		
		lblNewLabel_1_1 = new JLabel("MATH");
		lblNewLabel_1_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_1.setBounds(89, 50, 612, 120);
		panel.add(lblNewLabel_1_1);
		
		lblNewLabel_1_2_2 = new JLabel("quiz");
		lblNewLabel_1_2_2.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_2.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_2.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_2);
		
		lblNewLabel_1_2_1 = new JLabel("quiz");
		lblNewLabel_1_2_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_2_1.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_1.setBounds(159, 130, 561, 120);
		panel.add(lblNewLabel_1_2_1);
		
		lblNewLabel_1_2_3 = new JLabel("quiz");
		lblNewLabel_1_2_3.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_3.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_3.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_3);
		
		lblNewLabel = new JLabel("");
		lblNewLabel.setFont(new Font("Dialog", Font.BOLD, 9));
		lblNewLabel.setBounds(225, 428, 161, 14);
		panel.add(lblNewLabel);
		
		rdbtnEasy = new JRadioButton("EASY");
		rdbtnEasy.setForeground(Color.WHITE);
		rdbtnEasy.setBackground(Color.RED);
		rdbtnEasy.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnEasy.setBounds(215, 232, 269, 78);
		panel.add(rdbtnEasy);
		
		rdbtnAverage = new JRadioButton("AVERAGE");
		rdbtnAverage.setForeground(Color.WHITE);
		rdbtnAverage.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnAverage.setBackground(Color.RED);
		rdbtnAverage.setBounds(188, 290, 269, 73);
		panel.add(rdbtnAverage);
		
		rdbtnDifficult = new JRadioButton("DIFFICULT");
		rdbtnDifficult.setForeground(Color.WHITE);
		rdbtnDifficult.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnDifficult.setBackground(Color.RED);
		rdbtnDifficult.setBounds(176, 342, 269, 68);
		panel.add(rdbtnDifficult);
		
		ButtonGroup difficulty = new ButtonGroup();
		difficulty.add(rdbtnEasy);
		difficulty.add(rdbtnAverage);
		difficulty.add(rdbtnDifficult);
		
		btnStart = new JButton("START");
		
		
	
		
		btnStart.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
			if(rdbtnEasy.isSelected()){
				///////////
				
 				lblNewLabel_3.setText(generateQuestion());
 				
 				
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_1.setVisible(true);
				
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnAverage.isSelected()){
				
				lblNewLabel_3.setText(generateQuestionAverage());
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_2.setVisible(true);
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnDifficult.isSelected()){
				
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			}
		});
		btnStart.setBackground(Color.WHITE);
		btnStart.setForeground(Color.RED);
		btnStart.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnStart.setBounds(212, 453, 125, 43);
		panel.add(btnStart);
		
		lblNewLabel_2 = new JLabel("");
		lblNewLabel_2.setVisible(false);
		lblNewLabel_2.setForeground(Color.WHITE);
		lblNewLabel_2.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_2.setBounds(317, 90, 125, 129);
		panel.add(lblNewLabel_2);
		
		lblNewLabel_3 = new JLabel("");
		lblNewLabel_3.setVisible(false);
		lblNewLabel_3.setForeground(Color.WHITE);
		lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_3.setBounds(215, 90, 300, 200);
		panel.add(lblNewLabel_3);
		
		lblNewLabel_4 = new JLabel("");
		lblNewLabel_4.addMouseListener(new MouseAdapter() {
			public void mouseReleased(MouseEvent e) {
				
			}
		});
		lblNewLabel_4.setVisible(false);
		lblNewLabel_4.setForeground(Color.WHITE);
		lblNewLabel_4.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_4.setBounds(121, 90, 103, 129);
		panel.add(lblNewLabel_4);
				
		textField = new JTextField();
		textField.setHorizontalAlignment(SwingConstants.RIGHT);
		textField.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField.setVisible(false);
		textField.setBounds(121, 261, 324, 49);
		panel.add(textField);
		textField.setColumns(10);
		
		textField1 = new JTextField();
		textField1.setHorizontalAlignment(SwingConstants.RIGHT);
		textField1.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField1.setVisible(false);
		textField1.setBounds(121, 261, 324, 49);
		panel.add(textField1);
		textField1.setColumns(10);
		
		returnButton = new JButton("Return");
		returnButton.setVisible(false);
		returnButton.setFont(new Font("Tahoma", Font.BOLD, 20));
		returnButton.setForeground(Color.RED);
		returnButton.setBackground(Color.WHITE);
		returnButton.setBounds(225, 363, 126, 43);
		panel.add(returnButton);
		
		
		returnButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel.setVisible(true);
				rdbtnEasy.setVisible(true);
				rdbtnAverage.setVisible(true);
				rdbtnDifficult.setVisible(true);
				lblNewLabel_1_2_3.setVisible(true);
				lblNewLabel_1_2_1.setVisible(true);
				lblNewLabel_1_2_2.setVisible(true);
				lblNewLabel_1_1.setVisible(true);
				lblNewLabel_1.setVisible(true);
				lblNewLabel_1_2.setVisible(true);
				lblNewLabel_1_2_4.setVisible(true);
				btnStart.setVisible(true);
				returnButton.setVisible(false);
				lblNewLabel_3.setVisible(false);
				lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
			}

		
			
			
		});
		
		btnNewButton_1 = new JButton("SUBMIT");
		btnNewButton_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				
				
				double result = getResult(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
				
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
				
			}
		});
		btnNewButton_1.setVisible(false);
		btnNewButton_1.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_1.setForeground(Color.RED);
		btnNewButton_1.setBackground(Color.WHITE);
		btnNewButton_1.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_1);
		
		//Button 2
		btnNewButton_2 = new JButton("SUBMIT");
		btnNewButton_2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				double result = getResultAverage(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
			
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
			}
		});
		btnNewButton_2.setVisible(false);
		btnNewButton_2.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_2.setForeground(Color.RED);
		btnNewButton_2.setBackground(Color.WHITE);
		btnNewButton_2.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_2);
		
		
		textField2 = new JTextField();
		textField2.setHorizontalAlignment(SwingConstants.RIGHT);
		textField2.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField2.setVisible(false);
		textField2.setBounds(121, 261, 324, 49);
		panel.add(textField2);
		textField2.setColumns(10);
		
		btnNewButton_3 = new JButton("SUBMIT");
		btnNewButton_3.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel_2.setVisible(false);
				
				textField.setVisible(false);
				textField1.setVisible(false);
				btnNewButton_1.setVisible(false);
				btnNewButton_2.setVisible(false);
				
				textField2.setVisible(false);
				btnNewButton_3.setVisible(false);
				
				
				
			}
		});
		btnNewButton_3.setVisible(false);
		btnNewButton_3.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_3.setForeground(Color.RED);
		btnNewButton_3.setBackground(Color.WHITE);
		btnNewButton_3.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_3);
		
		
	}
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-04-30 17:31:05.227
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-04-30 17:31:05.228
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-30 17:31:10.855
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import java.awt.Color;
import java.awt.Toolkit;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

import java.awt.Font;
import javax.swing.JRadioButton;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Arrays;
import java.util.Random;


public class Main extends JFrame {

	private JPanel contentPane;
	private JLabel lblNewLabel_1_2;
	private JLabel lblNewLabel_1;
	private JLabel lblNewLabel_1_1; 
	private JLabel lblNewLabel_1_2_1;
	private JLabel lblNewLabel_1_2_2;
	private JLabel lblNewLabel_1_2_3;
	private JLabel lblNewLabel_1_2_4;
	private JRadioButton rdbtnEasy;
	private JRadioButton rdbtnAverage;
	private JRadioButton rdbtnDifficult;
	private JButton btnStart; 
	private JLabel lblNewLabel;
	private JLabel lblNewLabel_2;
	private JLabel lblNewLabel_3;
	private JLabel lblNewLabel_4;
	private JTextField textField;
	private JButton btnNewButton_1;
	private JTextField textField1;
	private JButton btnNewButton_2;
	private JButton returnButton;

	private JTextField textField2;
	private JButton btnNewButton_3;
	int currentQuestionNumber = 1;
	int playerScore = 0;
	Random random = new Random();
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Main frame = new Main();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
	
	
	
	

	/**
	 * Create the frame.
	 */
	
	
	public int findIndex(char operand) {
		char[] operandOrder = {'-', '+', '/', '*'};
		int index = 0;
		
		for(int i = 0; i < operandOrder.length; i++) {
			if(operand == operandOrder[i]) index = i;
		}
		return index;
	}
	
	public double getResult(String question) {
		char[] questionData = question.toCharArray(); 
		
		char operand = questionData[1];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double result = 0;
		
		if(operand == '+') result = firstNumber + secondNumber;
		if(operand == '-') result = firstNumber - secondNumber;
		if(operand == '*') result = firstNumber * secondNumber;
		if(operand == '/') result = firstNumber / secondNumber;
		double roundedResult = Math.round(result);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	public double getResultAverage(String question) {
		char[] questionData = question.toCharArray(); 
		
		char firstOperand = questionData[1];
		char secondOperand = questionData[3];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double thirdNumber = Double.parseDouble(String.valueOf(questionData[4]));
		double result = 0;
		
		
		char[] operandOrder = {'-', '+', '/', '*'};
		int indexFirst = findIndex(firstOperand);
		int indexSecond = findIndex(secondOperand);
		double totalResult = 0;
		double initialResult = 0;
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+') initialResult = secondNumber + thirdNumber;
			if(secondOperand == '-') initialResult = secondNumber - thirdNumber;
			if(secondOperand == '*') initialResult = secondNumber * thirdNumber;
			if(secondOperand == '/') initialResult = secondNumber / thirdNumber;
			
			
		}
		else if (indexSecond < indexFirst) {
			if(firstOperand == '+') initialResult = firstNumber + secondNumber;
			if(firstOperand == '-') initialResult = firstNumber - secondNumber;
			if(firstOperand == '*') initialResult = firstNumber * secondNumber;
			if(firstOperand == '/') initialResult = firstNumber / secondNumber;
		}
		else {
			if(firstOperand == '+') totalResult = firstNumber + secondNumber + thirdNumber;
			if(firstOperand == '-') totalResult = firstNumber - secondNumber - thirdNumber;
			if(firstOperand == '*') totalResult = firstNumber * secondNumber * thirdNumber;
			if(firstOperand == '/') totalResult = firstNumber / secondNumber / thirdNumber;
		}
		
		
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+')  totalResult = firstNumber + thirdNumber;
			if(secondOperand == '-')  totalResult = firstNumber - thirdNumber;
			if(secondOperand == '*')  totalResult = firstNumber * thirdNumber;
			if(secondOperand == '/')  totalResult = firstNumber / thirdNumber;
			
			
		}
		else (indexSecond < indexFirst) {
			if(firstOperand == '+')  totalResult = initialResult + thirdNumber;
			if(firstOperand == '-')  totalResult = initialResult - thirdNumber;
			if(firstOperand == '*')  totalResult = initialResult * thirdNumber;
			if(firstOperand == '/')  totalResult = initialResult / thirdNumber;
		}
		
		
		
		
		
		double roundedResult = Math.round(totalResult);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	
	public String generateQuestion() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond];
		
		return question;
	}
	
	public String generateQuestionAverage() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexThird = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		int randomIndexOperand2 = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond] + operands[randomIndexOperand2] + numbers[randomIndexThird];
		System.out.println(question);
		return question;
	}
	
	
	public Main() {
		setIconImage(Toolkit.getDefaultToolkit().getImage("C:\\Users\\user\\Downloads\\quiz.png"));
		setTitle("QUIZ GAME");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(400, 100, 600, 600);
		contentPane = new JPanel();
		contentPane.setBackground(Color.WHITE);
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));

		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JPanel panel = new JPanel();
		panel.setBackground(Color.RED);
		panel.setBounds(10, 0, 564, 550);
		contentPane.add(panel);
		panel.setLayout(null);
		
		lblNewLabel_1_2_4 = new JLabel("quiz");
		lblNewLabel_1_2_4.setForeground(Color.WHITE);
		lblNewLabel_1_2_4.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_4.setBounds(140, 130, 561, 120);
		panel.add(lblNewLabel_1_2_4);
		
		lblNewLabel_1_2 = new JLabel("MATH");
		lblNewLabel_1_2.setForeground(Color.WHITE);
		lblNewLabel_1_2.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_2.setBounds(70, 50, 561, 120);
		panel.add(lblNewLabel_1_2);
		
		lblNewLabel_1 = new JLabel("MATH");
		lblNewLabel_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1.setForeground(Color.DARK_GRAY);
		lblNewLabel_1.setBounds(78, 50, 777, 120);
		panel.add(lblNewLabel_1);
		
		lblNewLabel_1_1 = new JLabel("MATH");
		lblNewLabel_1_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_1.setBounds(89, 50, 612, 120);
		panel.add(lblNewLabel_1_1);
		
		lblNewLabel_1_2_2 = new JLabel("quiz");
		lblNewLabel_1_2_2.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_2.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_2.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_2);
		
		lblNewLabel_1_2_1 = new JLabel("quiz");
		lblNewLabel_1_2_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_2_1.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_1.setBounds(159, 130, 561, 120);
		panel.add(lblNewLabel_1_2_1);
		
		lblNewLabel_1_2_3 = new JLabel("quiz");
		lblNewLabel_1_2_3.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_3.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_3.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_3);
		
		lblNewLabel = new JLabel("");
		lblNewLabel.setFont(new Font("Dialog", Font.BOLD, 9));
		lblNewLabel.setBounds(225, 428, 161, 14);
		panel.add(lblNewLabel);
		
		rdbtnEasy = new JRadioButton("EASY");
		rdbtnEasy.setForeground(Color.WHITE);
		rdbtnEasy.setBackground(Color.RED);
		rdbtnEasy.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnEasy.setBounds(215, 232, 269, 78);
		panel.add(rdbtnEasy);
		
		rdbtnAverage = new JRadioButton("AVERAGE");
		rdbtnAverage.setForeground(Color.WHITE);
		rdbtnAverage.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnAverage.setBackground(Color.RED);
		rdbtnAverage.setBounds(188, 290, 269, 73);
		panel.add(rdbtnAverage);
		
		rdbtnDifficult = new JRadioButton("DIFFICULT");
		rdbtnDifficult.setForeground(Color.WHITE);
		rdbtnDifficult.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnDifficult.setBackground(Color.RED);
		rdbtnDifficult.setBounds(176, 342, 269, 68);
		panel.add(rdbtnDifficult);
		
		ButtonGroup difficulty = new ButtonGroup();
		difficulty.add(rdbtnEasy);
		difficulty.add(rdbtnAverage);
		difficulty.add(rdbtnDifficult);
		
		btnStart = new JButton("START");
		
		
	
		
		btnStart.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
			if(rdbtnEasy.isSelected()){
				///////////
				
 				lblNewLabel_3.setText(generateQuestion());
 				
 				
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_1.setVisible(true);
				
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnAverage.isSelected()){
				
				lblNewLabel_3.setText(generateQuestionAverage());
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_2.setVisible(true);
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnDifficult.isSelected()){
				
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			}
		});
		btnStart.setBackground(Color.WHITE);
		btnStart.setForeground(Color.RED);
		btnStart.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnStart.setBounds(212, 453, 125, 43);
		panel.add(btnStart);
		
		lblNewLabel_2 = new JLabel("");
		lblNewLabel_2.setVisible(false);
		lblNewLabel_2.setForeground(Color.WHITE);
		lblNewLabel_2.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_2.setBounds(317, 90, 125, 129);
		panel.add(lblNewLabel_2);
		
		lblNewLabel_3 = new JLabel("");
		lblNewLabel_3.setVisible(false);
		lblNewLabel_3.setForeground(Color.WHITE);
		lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_3.setBounds(215, 90, 300, 200);
		panel.add(lblNewLabel_3);
		
		lblNewLabel_4 = new JLabel("");
		lblNewLabel_4.addMouseListener(new MouseAdapter() {
			public void mouseReleased(MouseEvent e) {
				
			}
		});
		lblNewLabel_4.setVisible(false);
		lblNewLabel_4.setForeground(Color.WHITE);
		lblNewLabel_4.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_4.setBounds(121, 90, 103, 129);
		panel.add(lblNewLabel_4);
				
		textField = new JTextField();
		textField.setHorizontalAlignment(SwingConstants.RIGHT);
		textField.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField.setVisible(false);
		textField.setBounds(121, 261, 324, 49);
		panel.add(textField);
		textField.setColumns(10);
		
		textField1 = new JTextField();
		textField1.setHorizontalAlignment(SwingConstants.RIGHT);
		textField1.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField1.setVisible(false);
		textField1.setBounds(121, 261, 324, 49);
		panel.add(textField1);
		textField1.setColumns(10);
		
		returnButton = new JButton("Return");
		returnButton.setVisible(false);
		returnButton.setFont(new Font("Tahoma", Font.BOLD, 20));
		returnButton.setForeground(Color.RED);
		returnButton.setBackground(Color.WHITE);
		returnButton.setBounds(225, 363, 126, 43);
		panel.add(returnButton);
		
		
		returnButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel.setVisible(true);
				rdbtnEasy.setVisible(true);
				rdbtnAverage.setVisible(true);
				rdbtnDifficult.setVisible(true);
				lblNewLabel_1_2_3.setVisible(true);
				lblNewLabel_1_2_1.setVisible(true);
				lblNewLabel_1_2_2.setVisible(true);
				lblNewLabel_1_1.setVisible(true);
				lblNewLabel_1.setVisible(true);
				lblNewLabel_1_2.setVisible(true);
				lblNewLabel_1_2_4.setVisible(true);
				btnStart.setVisible(true);
				returnButton.setVisible(false);
				lblNewLabel_3.setVisible(false);
				lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
			}

		
			
			
		});
		
		btnNewButton_1 = new JButton("SUBMIT");
		btnNewButton_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				
				
				double result = getResult(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
				
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
				
			}
		});
		btnNewButton_1.setVisible(false);
		btnNewButton_1.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_1.setForeground(Color.RED);
		btnNewButton_1.setBackground(Color.WHITE);
		btnNewButton_1.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_1);
		
		//Button 2
		btnNewButton_2 = new JButton("SUBMIT");
		btnNewButton_2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				double result = getResultAverage(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
			
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
			}
		});
		btnNewButton_2.setVisible(false);
		btnNewButton_2.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_2.setForeground(Color.RED);
		btnNewButton_2.setBackground(Color.WHITE);
		btnNewButton_2.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_2);
		
		
		textField2 = new JTextField();
		textField2.setHorizontalAlignment(SwingConstants.RIGHT);
		textField2.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField2.setVisible(false);
		textField2.setBounds(121, 261, 324, 49);
		panel.add(textField2);
		textField2.setColumns(10);
		
		btnNewButton_3 = new JButton("SUBMIT");
		btnNewButton_3.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel_2.setVisible(false);
				
				textField.setVisible(false);
				textField1.setVisible(false);
				btnNewButton_1.setVisible(false);
				btnNewButton_2.setVisible(false);
				
				textField2.setVisible(false);
				btnNewButton_3.setVisible(false);
				
				
				
			}
		});
		btnNewButton_3.setVisible(false);
		btnNewButton_3.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_3.setForeground(Color.RED);
		btnNewButton_3.setBackground(Color.WHITE);
		btnNewButton_3.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_3);
		
		
	}
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-04-30 17:31:10.856
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-04-30 17:31:10.857
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-30 17:31:22.064
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import java.awt.Color;
import java.awt.Toolkit;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

import java.awt.Font;
import javax.swing.JRadioButton;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Arrays;
import java.util.Random;


public class Main extends JFrame {

	private JPanel contentPane;
	private JLabel lblNewLabel_1_2;
	private JLabel lblNewLabel_1;
	private JLabel lblNewLabel_1_1; 
	private JLabel lblNewLabel_1_2_1;
	private JLabel lblNewLabel_1_2_2;
	private JLabel lblNewLabel_1_2_3;
	private JLabel lblNewLabel_1_2_4;
	private JRadioButton rdbtnEasy;
	private JRadioButton rdbtnAverage;
	private JRadioButton rdbtnDifficult;
	private JButton btnStart; 
	private JLabel lblNewLabel;
	private JLabel lblNewLabel_2;
	private JLabel lblNewLabel_3;
	private JLabel lblNewLabel_4;
	private JTextField textField;
	private JButton btnNewButton_1;
	private JTextField textField1;
	private JButton btnNewButton_2;
	private JButton returnButton;

	private JTextField textField2;
	private JButton btnNewButton_3;
	int currentQuestionNumber = 1;
	int playerScore = 0;
	Random random = new Random();
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Main frame = new Main();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
	
	
	
	

	/**
	 * Create the frame.
	 */
	
	
	public int findIndex(char operand) {
		char[] operandOrder = {'-', '+', '/', '*'};
		int index = 0;
		
		for(int i = 0; i < operandOrder.length; i++) {
			if(operand == operandOrder[i]) index = i;
		}
		return index;
	}
	
	public double getResult(String question) {
		char[] questionData = question.toCharArray(); 
		
		char operand = questionData[1];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double result = 0;
		
		if(operand == '+') result = firstNumber + secondNumber;
		if(operand == '-') result = firstNumber - secondNumber;
		if(operand == '*') result = firstNumber * secondNumber;
		if(operand == '/') result = firstNumber / secondNumber;
		double roundedResult = Math.round(result);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	public double getResultAverage(String question) {
		char[] questionData = question.toCharArray(); 
		
		char firstOperand = questionData[1];
		char secondOperand = questionData[3];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double thirdNumber = Double.parseDouble(String.valueOf(questionData[4]));
		double result = 0;
		
		
		char[] operandOrder = {'-', '+', '/', '*'};
		int indexFirst = findIndex(firstOperand);
		int indexSecond = findIndex(secondOperand);
		double totalResult = 0;
		double initialResult = 0;
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+') initialResult = secondNumber + thirdNumber;
			if(secondOperand == '-') initialResult = secondNumber - thirdNumber;
			if(secondOperand == '*') initialResult = secondNumber * thirdNumber;
			if(secondOperand == '/') initialResult = secondNumber / thirdNumber;
			
			
		}
		else if (indexSecond < indexFirst) {
			if(firstOperand == '+') initialResult = firstNumber + secondNumber;
			if(firstOperand == '-') initialResult = firstNumber - secondNumber;
			if(firstOperand == '*') initialResult = firstNumber * secondNumber;
			if(firstOperand == '/') initialResult = firstNumber / secondNumber;
		}
		else {
			if(firstOperand == '+') totalResult = firstNumber + secondNumber + thirdNumber;
			if(firstOperand == '-') totalResult = firstNumber - secondNumber - thirdNumber;
			if(firstOperand == '*') totalResult = firstNumber * secondNumber * thirdNumber;
			if(firstOperand == '/') totalResult = firstNumber / secondNumber / thirdNumber;
		}
		
		
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+')  totalResult = firstNumber + thirdNumber;
			if(secondOperand == '-')  totalResult = firstNumber - thirdNumber;
			if(secondOperand == '*')  totalResult = firstNumber * thirdNumber;
			if(secondOperand == '/')  totalResult = firstNumber / thirdNumber;
			
			
		}
		else (indexSecond < indexFirst) {
			if(firstOperand == '+')  totalResult = initialResult + thirdNumber;
			if(firstOperand == '-')  totalResult = initialResult - thirdNumber;
			if(firstOperand == '*')  totalResult = initialResult * thirdNumber;
			if(firstOperand == '/')  totalResult = initialResult / thirdNumber;
		}
		
		
		
		
		
		double roundedResult = Math.round(totalResult);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	
	public String generateQuestion() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond];
		
		return question;
	}
	
	public String generateQuestionAverage() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexThird = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		int randomIndexOperand2 = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond] + operands[randomIndexOperand2] + numbers[randomIndexThird];
		System.out.println(question);
		return question;
	}
	
	
	public Main() {
		setIconImage(Toolkit.getDefaultToolkit().getImage("C:\\Users\\user\\Downloads\\quiz.png"));
		setTitle("QUIZ GAME");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(400, 100, 600, 600);
		contentPane = new JPanel();
		contentPane.setBackground(Color.WHITE);
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));

		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JPanel panel = new JPanel();
		panel.setBackground(Color.RED);
		panel.setBounds(10, 0, 564, 550);
		contentPane.add(panel);
		panel.setLayout(null);
		
		lblNewLabel_1_2_4 = new JLabel("quiz");
		lblNewLabel_1_2_4.setForeground(Color.WHITE);
		lblNewLabel_1_2_4.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_4.setBounds(140, 130, 561, 120);
		panel.add(lblNewLabel_1_2_4);
		
		lblNewLabel_1_2 = new JLabel("MATH");
		lblNewLabel_1_2.setForeground(Color.WHITE);
		lblNewLabel_1_2.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_2.setBounds(70, 50, 561, 120);
		panel.add(lblNewLabel_1_2);
		
		lblNewLabel_1 = new JLabel("MATH");
		lblNewLabel_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1.setForeground(Color.DARK_GRAY);
		lblNewLabel_1.setBounds(78, 50, 777, 120);
		panel.add(lblNewLabel_1);
		
		lblNewLabel_1_1 = new JLabel("MATH");
		lblNewLabel_1_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_1.setBounds(89, 50, 612, 120);
		panel.add(lblNewLabel_1_1);
		
		lblNewLabel_1_2_2 = new JLabel("quiz");
		lblNewLabel_1_2_2.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_2.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_2.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_2);
		
		lblNewLabel_1_2_1 = new JLabel("quiz");
		lblNewLabel_1_2_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_2_1.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_1.setBounds(159, 130, 561, 120);
		panel.add(lblNewLabel_1_2_1);
		
		lblNewLabel_1_2_3 = new JLabel("quiz");
		lblNewLabel_1_2_3.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_3.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_3.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_3);
		
		lblNewLabel = new JLabel("");
		lblNewLabel.setFont(new Font("Dialog", Font.BOLD, 9));
		lblNewLabel.setBounds(225, 428, 161, 14);
		panel.add(lblNewLabel);
		
		rdbtnEasy = new JRadioButton("EASY");
		rdbtnEasy.setForeground(Color.WHITE);
		rdbtnEasy.setBackground(Color.RED);
		rdbtnEasy.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnEasy.setBounds(215, 232, 269, 78);
		panel.add(rdbtnEasy);
		
		rdbtnAverage = new JRadioButton("AVERAGE");
		rdbtnAverage.setForeground(Color.WHITE);
		rdbtnAverage.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnAverage.setBackground(Color.RED);
		rdbtnAverage.setBounds(188, 290, 269, 73);
		panel.add(rdbtnAverage);
		
		rdbtnDifficult = new JRadioButton("DIFFICULT");
		rdbtnDifficult.setForeground(Color.WHITE);
		rdbtnDifficult.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnDifficult.setBackground(Color.RED);
		rdbtnDifficult.setBounds(176, 342, 269, 68);
		panel.add(rdbtnDifficult);
		
		ButtonGroup difficulty = new ButtonGroup();
		difficulty.add(rdbtnEasy);
		difficulty.add(rdbtnAverage);
		difficulty.add(rdbtnDifficult);
		
		btnStart = new JButton("START");
		
		
	
		
		btnStart.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
			if(rdbtnEasy.isSelected()){
				///////////
				
 				lblNewLabel_3.setText(generateQuestion());
 				
 				
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_1.setVisible(true);
				
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnAverage.isSelected()){
				
				lblNewLabel_3.setText(generateQuestionAverage());
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_2.setVisible(true);
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnDifficult.isSelected()){
				
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			}
		});
		btnStart.setBackground(Color.WHITE);
		btnStart.setForeground(Color.RED);
		btnStart.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnStart.setBounds(212, 453, 125, 43);
		panel.add(btnStart);
		
		lblNewLabel_2 = new JLabel("");
		lblNewLabel_2.setVisible(false);
		lblNewLabel_2.setForeground(Color.WHITE);
		lblNewLabel_2.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_2.setBounds(317, 90, 125, 129);
		panel.add(lblNewLabel_2);
		
		lblNewLabel_3 = new JLabel("");
		lblNewLabel_3.setVisible(false);
		lblNewLabel_3.setForeground(Color.WHITE);
		lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_3.setBounds(215, 90, 300, 200);
		panel.add(lblNewLabel_3);
		
		lblNewLabel_4 = new JLabel("");
		lblNewLabel_4.addMouseListener(new MouseAdapter() {
			public void mouseReleased(MouseEvent e) {
				
			}
		});
		lblNewLabel_4.setVisible(false);
		lblNewLabel_4.setForeground(Color.WHITE);
		lblNewLabel_4.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_4.setBounds(121, 90, 103, 129);
		panel.add(lblNewLabel_4);
				
		textField = new JTextField();
		textField.setHorizontalAlignment(SwingConstants.RIGHT);
		textField.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField.setVisible(false);
		textField.setBounds(121, 261, 324, 49);
		panel.add(textField);
		textField.setColumns(10);
		
		textField1 = new JTextField();
		textField1.setHorizontalAlignment(SwingConstants.RIGHT);
		textField1.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField1.setVisible(false);
		textField1.setBounds(121, 261, 324, 49);
		panel.add(textField1);
		textField1.setColumns(10);
		
		returnButton = new JButton("Return");
		returnButton.setVisible(false);
		returnButton.setFont(new Font("Tahoma", Font.BOLD, 20));
		returnButton.setForeground(Color.RED);
		returnButton.setBackground(Color.WHITE);
		returnButton.setBounds(225, 363, 126, 43);
		panel.add(returnButton);
		
		
		returnButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel.setVisible(true);
				rdbtnEasy.setVisible(true);
				rdbtnAverage.setVisible(true);
				rdbtnDifficult.setVisible(true);
				lblNewLabel_1_2_3.setVisible(true);
				lblNewLabel_1_2_1.setVisible(true);
				lblNewLabel_1_2_2.setVisible(true);
				lblNewLabel_1_1.setVisible(true);
				lblNewLabel_1.setVisible(true);
				lblNewLabel_1_2.setVisible(true);
				lblNewLabel_1_2_4.setVisible(true);
				btnStart.setVisible(true);
				returnButton.setVisible(false);
				lblNewLabel_3.setVisible(false);
				lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
			}

		
			
			
		});
		
		btnNewButton_1 = new JButton("SUBMIT");
		btnNewButton_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				
				
				double result = getResult(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
				
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
				
			}
		});
		btnNewButton_1.setVisible(false);
		btnNewButton_1.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_1.setForeground(Color.RED);
		btnNewButton_1.setBackground(Color.WHITE);
		btnNewButton_1.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_1);
		
		//Button 2
		btnNewButton_2 = new JButton("SUBMIT");
		btnNewButton_2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				double result = getResultAverage(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
			
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
			}
		});
		btnNewButton_2.setVisible(false);
		btnNewButton_2.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_2.setForeground(Color.RED);
		btnNewButton_2.setBackground(Color.WHITE);
		btnNewButton_2.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_2);
		
		
		textField2 = new JTextField();
		textField2.setHorizontalAlignment(SwingConstants.RIGHT);
		textField2.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField2.setVisible(false);
		textField2.setBounds(121, 261, 324, 49);
		panel.add(textField2);
		textField2.setColumns(10);
		
		btnNewButton_3 = new JButton("SUBMIT");
		btnNewButton_3.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel_2.setVisible(false);
				
				textField.setVisible(false);
				textField1.setVisible(false);
				btnNewButton_1.setVisible(false);
				btnNewButton_2.setVisible(false);
				
				textField2.setVisible(false);
				btnNewButton_3.setVisible(false);
				
				
				
			}
		});
		btnNewButton_3.setVisible(false);
		btnNewButton_3.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_3.setForeground(Color.RED);
		btnNewButton_3.setBackground(Color.WHITE);
		btnNewButton_3.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_3);
		
		
	}
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-04-30 17:31:22.065
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-04-30 17:31:22.065
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-30 17:31:22.593
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import java.awt.Color;
import java.awt.Toolkit;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

import java.awt.Font;
import javax.swing.JRadioButton;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Arrays;
import java.util.Random;


public class Main extends JFrame {

	private JPanel contentPane;
	private JLabel lblNewLabel_1_2;
	private JLabel lblNewLabel_1;
	private JLabel lblNewLabel_1_1; 
	private JLabel lblNewLabel_1_2_1;
	private JLabel lblNewLabel_1_2_2;
	private JLabel lblNewLabel_1_2_3;
	private JLabel lblNewLabel_1_2_4;
	private JRadioButton rdbtnEasy;
	private JRadioButton rdbtnAverage;
	private JRadioButton rdbtnDifficult;
	private JButton btnStart; 
	private JLabel lblNewLabel;
	private JLabel lblNewLabel_2;
	private JLabel lblNewLabel_3;
	private JLabel lblNewLabel_4;
	private JTextField textField;
	private JButton btnNewButton_1;
	private JTextField textField1;
	private JButton btnNewButton_2;
	private JButton returnButton;

	private JTextField textField2;
	private JButton btnNewButton_3;
	int currentQuestionNumber = 1;
	int playerScore = 0;
	Random random = new Random();
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Main frame = new Main();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
	
	
	
	

	/**
	 * Create the frame.
	 */
	
	
	public int findIndex(char operand) {
		char[] operandOrder = {'-', '+', '/', '*'};
		int index = 0;
		
		for(int i = 0; i < operandOrder.length; i++) {
			if(operand == operandOrder[i]) index = i;
		}
		return index;
	}
	
	public double getResult(String question) {
		char[] questionData = question.toCharArray(); 
		
		char operand = questionData[1];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double result = 0;
		
		if(operand == '+') result = firstNumber + secondNumber;
		if(operand == '-') result = firstNumber - secondNumber;
		if(operand == '*') result = firstNumber * secondNumber;
		if(operand == '/') result = firstNumber / secondNumber;
		double roundedResult = Math.round(result);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	public double getResultAverage(String question) {
		char[] questionData = question.toCharArray(); 
		
		char firstOperand = questionData[1];
		char secondOperand = questionData[3];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double thirdNumber = Double.parseDouble(String.valueOf(questionData[4]));
		double result = 0;
		
		
		char[] operandOrder = {'-', '+', '/', '*'};
		int indexFirst = findIndex(firstOperand);
		int indexSecond = findIndex(secondOperand);
		double totalResult = 0;
		double initialResult = 0;
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+') initialResult = secondNumber + thirdNumber;
			if(secondOperand == '-') initialResult = secondNumber - thirdNumber;
			if(secondOperand == '*') initialResult = secondNumber * thirdNumber;
			if(secondOperand == '/') initialResult = secondNumber / thirdNumber;
			
			
		}
		else if (indexSecond < indexFirst) {
			if(firstOperand == '+') initialResult = firstNumber + secondNumber;
			if(firstOperand == '-') initialResult = firstNumber - secondNumber;
			if(firstOperand == '*') initialResult = firstNumber * secondNumber;
			if(firstOperand == '/') initialResult = firstNumber / secondNumber;
		}
		else {
			if(firstOperand == '+') totalResult = firstNumber + secondNumber + thirdNumber;
			if(firstOperand == '-') totalResult = firstNumber - secondNumber - thirdNumber;
			if(firstOperand == '*') totalResult = firstNumber * secondNumber * thirdNumber;
			if(firstOperand == '/') totalResult = firstNumber / secondNumber / thirdNumber;
		}
		
		
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+')  totalResult = firstNumber + thirdNumber;
			if(secondOperand == '-')  totalResult = firstNumber - thirdNumber;
			if(secondOperand == '*')  totalResult = firstNumber * thirdNumber;
			if(secondOperand == '/')  totalResult = firstNumber / thirdNumber;
			
			
		}
		else (indexSecond < indexFirst) {
			if(firstOperand == '+')  totalResult = initialResult + thirdNumber;
			if(firstOperand == '-')  totalResult = initialResult - thirdNumber;
			if(firstOperand == '*')  totalResult = initialResult * thirdNumber;
			if(firstOperand == '/')  totalResult = initialResult / thirdNumber;
		}
		
		
		
		
		
		double roundedResult = Math.round(totalResult);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	
	public String generateQuestion() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond];
		
		return question;
	}
	
	public String generateQuestionAverage() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexThird = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		int randomIndexOperand2 = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond] + operands[randomIndexOperand2] + numbers[randomIndexThird];
		System.out.println(question);
		return question;
	}
	
	
	public Main() {
		setIconImage(Toolkit.getDefaultToolkit().getImage("C:\\Users\\user\\Downloads\\quiz.png"));
		setTitle("QUIZ GAME");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(400, 100, 600, 600);
		contentPane = new JPanel();
		contentPane.setBackground(Color.WHITE);
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));

		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JPanel panel = new JPanel();
		panel.setBackground(Color.RED);
		panel.setBounds(10, 0, 564, 550);
		contentPane.add(panel);
		panel.setLayout(null);
		
		lblNewLabel_1_2_4 = new JLabel("quiz");
		lblNewLabel_1_2_4.setForeground(Color.WHITE);
		lblNewLabel_1_2_4.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_4.setBounds(140, 130, 561, 120);
		panel.add(lblNewLabel_1_2_4);
		
		lblNewLabel_1_2 = new JLabel("MATH");
		lblNewLabel_1_2.setForeground(Color.WHITE);
		lblNewLabel_1_2.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_2.setBounds(70, 50, 561, 120);
		panel.add(lblNewLabel_1_2);
		
		lblNewLabel_1 = new JLabel("MATH");
		lblNewLabel_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1.setForeground(Color.DARK_GRAY);
		lblNewLabel_1.setBounds(78, 50, 777, 120);
		panel.add(lblNewLabel_1);
		
		lblNewLabel_1_1 = new JLabel("MATH");
		lblNewLabel_1_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_1.setBounds(89, 50, 612, 120);
		panel.add(lblNewLabel_1_1);
		
		lblNewLabel_1_2_2 = new JLabel("quiz");
		lblNewLabel_1_2_2.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_2.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_2.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_2);
		
		lblNewLabel_1_2_1 = new JLabel("quiz");
		lblNewLabel_1_2_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_2_1.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_1.setBounds(159, 130, 561, 120);
		panel.add(lblNewLabel_1_2_1);
		
		lblNewLabel_1_2_3 = new JLabel("quiz");
		lblNewLabel_1_2_3.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_3.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_3.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_3);
		
		lblNewLabel = new JLabel("");
		lblNewLabel.setFont(new Font("Dialog", Font.BOLD, 9));
		lblNewLabel.setBounds(225, 428, 161, 14);
		panel.add(lblNewLabel);
		
		rdbtnEasy = new JRadioButton("EASY");
		rdbtnEasy.setForeground(Color.WHITE);
		rdbtnEasy.setBackground(Color.RED);
		rdbtnEasy.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnEasy.setBounds(215, 232, 269, 78);
		panel.add(rdbtnEasy);
		
		rdbtnAverage = new JRadioButton("AVERAGE");
		rdbtnAverage.setForeground(Color.WHITE);
		rdbtnAverage.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnAverage.setBackground(Color.RED);
		rdbtnAverage.setBounds(188, 290, 269, 73);
		panel.add(rdbtnAverage);
		
		rdbtnDifficult = new JRadioButton("DIFFICULT");
		rdbtnDifficult.setForeground(Color.WHITE);
		rdbtnDifficult.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnDifficult.setBackground(Color.RED);
		rdbtnDifficult.setBounds(176, 342, 269, 68);
		panel.add(rdbtnDifficult);
		
		ButtonGroup difficulty = new ButtonGroup();
		difficulty.add(rdbtnEasy);
		difficulty.add(rdbtnAverage);
		difficulty.add(rdbtnDifficult);
		
		btnStart = new JButton("START");
		
		
	
		
		btnStart.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
			if(rdbtnEasy.isSelected()){
				///////////
				
 				lblNewLabel_3.setText(generateQuestion());
 				
 				
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_1.setVisible(true);
				
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnAverage.isSelected()){
				
				lblNewLabel_3.setText(generateQuestionAverage());
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_2.setVisible(true);
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnDifficult.isSelected()){
				
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			}
		});
		btnStart.setBackground(Color.WHITE);
		btnStart.setForeground(Color.RED);
		btnStart.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnStart.setBounds(212, 453, 125, 43);
		panel.add(btnStart);
		
		lblNewLabel_2 = new JLabel("");
		lblNewLabel_2.setVisible(false);
		lblNewLabel_2.setForeground(Color.WHITE);
		lblNewLabel_2.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_2.setBounds(317, 90, 125, 129);
		panel.add(lblNewLabel_2);
		
		lblNewLabel_3 = new JLabel("");
		lblNewLabel_3.setVisible(false);
		lblNewLabel_3.setForeground(Color.WHITE);
		lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_3.setBounds(215, 90, 300, 200);
		panel.add(lblNewLabel_3);
		
		lblNewLabel_4 = new JLabel("");
		lblNewLabel_4.addMouseListener(new MouseAdapter() {
			public void mouseReleased(MouseEvent e) {
				
			}
		});
		lblNewLabel_4.setVisible(false);
		lblNewLabel_4.setForeground(Color.WHITE);
		lblNewLabel_4.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_4.setBounds(121, 90, 103, 129);
		panel.add(lblNewLabel_4);
				
		textField = new JTextField();
		textField.setHorizontalAlignment(SwingConstants.RIGHT);
		textField.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField.setVisible(false);
		textField.setBounds(121, 261, 324, 49);
		panel.add(textField);
		textField.setColumns(10);
		
		textField1 = new JTextField();
		textField1.setHorizontalAlignment(SwingConstants.RIGHT);
		textField1.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField1.setVisible(false);
		textField1.setBounds(121, 261, 324, 49);
		panel.add(textField1);
		textField1.setColumns(10);
		
		returnButton = new JButton("Return");
		returnButton.setVisible(false);
		returnButton.setFont(new Font("Tahoma", Font.BOLD, 20));
		returnButton.setForeground(Color.RED);
		returnButton.setBackground(Color.WHITE);
		returnButton.setBounds(225, 363, 126, 43);
		panel.add(returnButton);
		
		
		returnButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel.setVisible(true);
				rdbtnEasy.setVisible(true);
				rdbtnAverage.setVisible(true);
				rdbtnDifficult.setVisible(true);
				lblNewLabel_1_2_3.setVisible(true);
				lblNewLabel_1_2_1.setVisible(true);
				lblNewLabel_1_2_2.setVisible(true);
				lblNewLabel_1_1.setVisible(true);
				lblNewLabel_1.setVisible(true);
				lblNewLabel_1_2.setVisible(true);
				lblNewLabel_1_2_4.setVisible(true);
				btnStart.setVisible(true);
				returnButton.setVisible(false);
				lblNewLabel_3.setVisible(false);
				lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
			}

		
			
			
		});
		
		btnNewButton_1 = new JButton("SUBMIT");
		btnNewButton_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				
				
				double result = getResult(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
				
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
				
			}
		});
		btnNewButton_1.setVisible(false);
		btnNewButton_1.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_1.setForeground(Color.RED);
		btnNewButton_1.setBackground(Color.WHITE);
		btnNewButton_1.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_1);
		
		//Button 2
		btnNewButton_2 = new JButton("SUBMIT");
		btnNewButton_2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				double result = getResultAverage(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
			
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
			}
		});
		btnNewButton_2.setVisible(false);
		btnNewButton_2.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_2.setForeground(Color.RED);
		btnNewButton_2.setBackground(Color.WHITE);
		btnNewButton_2.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_2);
		
		
		textField2 = new JTextField();
		textField2.setHorizontalAlignment(SwingConstants.RIGHT);
		textField2.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField2.setVisible(false);
		textField2.setBounds(121, 261, 324, 49);
		panel.add(textField2);
		textField2.setColumns(10);
		
		btnNewButton_3 = new JButton("SUBMIT");
		btnNewButton_3.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel_2.setVisible(false);
				
				textField.setVisible(false);
				textField1.setVisible(false);
				btnNewButton_1.setVisible(false);
				btnNewButton_2.setVisible(false);
				
				textField2.setVisible(false);
				btnNewButton_3.setVisible(false);
				
				
				
			}
		});
		btnNewButton_3.setVisible(false);
		btnNewButton_3.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_3.setForeground(Color.RED);
		btnNewButton_3.setBackground(Color.WHITE);
		btnNewButton_3.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_3);
		
		
	}
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-04-30 17:31:22.594
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-04-30 17:31:22.594
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-30 17:31:33.424
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import java.awt.Color;
import java.awt.Toolkit;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

import java.awt.Font;
import javax.swing.JRadioButton;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Arrays;
import java.util.Random;


public class Main extends JFrame {

	private JPanel contentPane;
	private JLabel lblNewLabel_1_2;
	private JLabel lblNewLabel_1;
	private JLabel lblNewLabel_1_1; 
	private JLabel lblNewLabel_1_2_1;
	private JLabel lblNewLabel_1_2_2;
	private JLabel lblNewLabel_1_2_3;
	private JLabel lblNewLabel_1_2_4;
	private JRadioButton rdbtnEasy;
	private JRadioButton rdbtnAverage;
	private JRadioButton rdbtnDifficult;
	private JButton btnStart; 
	private JLabel lblNewLabel;
	private JLabel lblNewLabel_2;
	private JLabel lblNewLabel_3;
	private JLabel lblNewLabel_4;
	private JTextField textField;
	private JButton btnNewButton_1;
	private JTextField textField1;
	private JButton btnNewButton_2;
	private JButton returnButton;

	private JTextField textField2;
	private JButton btnNewButton_3;
	int currentQuestionNumber = 1;
	int playerScore = 0;
	Random random = new Random();
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Main frame = new Main();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
	
	
	
	

	/**
	 * Create the frame.
	 */
	
	
	public int findIndex(char operand) {
		char[] operandOrder = {'-', '+', '/', '*'};
		int index = 0;
		
		for(int i = 0; i < operandOrder.length; i++) {
			if(operand == operandOrder[i]) index = i;
		}
		return index;
	}
	
	public double getResult(String question) {
		char[] questionData = question.toCharArray(); 
		
		char operand = questionData[1];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double result = 0;
		
		if(operand == '+') result = firstNumber + secondNumber;
		if(operand == '-') result = firstNumber - secondNumber;
		if(operand == '*') result = firstNumber * secondNumber;
		if(operand == '/') result = firstNumber / secondNumber;
		double roundedResult = Math.round(result);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	public double getResultAverage(String question) {
		char[] questionData = question.toCharArray(); 
		
		char firstOperand = questionData[1];
		char secondOperand = questionData[3];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double thirdNumber = Double.parseDouble(String.valueOf(questionData[4]));
		double result = 0;
		
		
		char[] operandOrder = {'-', '+', '/', '*'};
		int indexFirst = findIndex(firstOperand);
		int indexSecond = findIndex(secondOperand);
		double totalResult = 0;
		double initialResult = 0;
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+') initialResult = secondNumber + thirdNumber;
			if(secondOperand == '-') initialResult = secondNumber - thirdNumber;
			if(secondOperand == '*') initialResult = secondNumber * thirdNumber;
			if(secondOperand == '/') initialResult = secondNumber / thirdNumber;
			
			
		}
		else if (indexSecond < indexFirst) {
			if(firstOperand == '+') initialResult = firstNumber + secondNumber;
			if(firstOperand == '-') initialResult = firstNumber - secondNumber;
			if(firstOperand == '*') initialResult = firstNumber * secondNumber;
			if(firstOperand == '/') initialResult = firstNumber / secondNumber;
		}
		else {
			if(firstOperand == '+') totalResult = firstNumber + secondNumber + thirdNumber;
			if(firstOperand == '-') totalResult = firstNumber - secondNumber - thirdNumber;
			if(firstOperand == '*') totalResult = firstNumber * secondNumber * thirdNumber;
			if(firstOperand == '/') totalResult = firstNumber / secondNumber / thirdNumber;
		}
		
		
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+')  totalResult = firstNumber + thirdNumber;
			if(secondOperand == '-')  totalResult = firstNumber - thirdNumber;
			if(secondOperand == '*')  totalResult = firstNumber * thirdNumber;
			if(secondOperand == '/')  totalResult = firstNumber / thirdNumber;
			
			
		}
		else (indexSecond < indexFirst) {
			if(firstOperand == '+')  totalResult = initialResult + thirdNumber;
			if(firstOperand == '-')  totalResult = initialResult - thirdNumber;
			if(firstOperand == '*')  totalResult = initialResult * thirdNumber;
			if(firstOperand == '/')  totalResult = initialResult / thirdNumber;
		}
		
		
		
		
		
		double roundedResult = Math.round(totalResult);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	
	public String generateQuestion() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond];
		
		return question;
	}
	
	public String generateQuestionAverage() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexThird = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		int randomIndexOperand2 = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond] + operands[randomIndexOperand2] + numbers[randomIndexThird];
		System.out.println(question);
		return question;
	}
	
	
	public Main() {
		setIconImage(Toolkit.getDefaultToolkit().getImage("C:\\Users\\user\\Downloads\\quiz.png"));
		setTitle("QUIZ GAME");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(400, 100, 600, 600);
		contentPane = new JPanel();
		contentPane.setBackground(Color.WHITE);
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));

		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JPanel panel = new JPanel();
		panel.setBackground(Color.RED);
		panel.setBounds(10, 0, 564, 550);
		contentPane.add(panel);
		panel.setLayout(null);
		
		lblNewLabel_1_2_4 = new JLabel("quiz");
		lblNewLabel_1_2_4.setForeground(Color.WHITE);
		lblNewLabel_1_2_4.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_4.setBounds(140, 130, 561, 120);
		panel.add(lblNewLabel_1_2_4);
		
		lblNewLabel_1_2 = new JLabel("MATH");
		lblNewLabel_1_2.setForeground(Color.WHITE);
		lblNewLabel_1_2.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_2.setBounds(70, 50, 561, 120);
		panel.add(lblNewLabel_1_2);
		
		lblNewLabel_1 = new JLabel("MATH");
		lblNewLabel_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1.setForeground(Color.DARK_GRAY);
		lblNewLabel_1.setBounds(78, 50, 777, 120);
		panel.add(lblNewLabel_1);
		
		lblNewLabel_1_1 = new JLabel("MATH");
		lblNewLabel_1_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_1.setBounds(89, 50, 612, 120);
		panel.add(lblNewLabel_1_1);
		
		lblNewLabel_1_2_2 = new JLabel("quiz");
		lblNewLabel_1_2_2.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_2.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_2.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_2);
		
		lblNewLabel_1_2_1 = new JLabel("quiz");
		lblNewLabel_1_2_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_2_1.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_1.setBounds(159, 130, 561, 120);
		panel.add(lblNewLabel_1_2_1);
		
		lblNewLabel_1_2_3 = new JLabel("quiz");
		lblNewLabel_1_2_3.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_3.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_3.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_3);
		
		lblNewLabel = new JLabel("");
		lblNewLabel.setFont(new Font("Dialog", Font.BOLD, 9));
		lblNewLabel.setBounds(225, 428, 161, 14);
		panel.add(lblNewLabel);
		
		rdbtnEasy = new JRadioButton("EASY");
		rdbtnEasy.setForeground(Color.WHITE);
		rdbtnEasy.setBackground(Color.RED);
		rdbtnEasy.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnEasy.setBounds(215, 232, 269, 78);
		panel.add(rdbtnEasy);
		
		rdbtnAverage = new JRadioButton("AVERAGE");
		rdbtnAverage.setForeground(Color.WHITE);
		rdbtnAverage.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnAverage.setBackground(Color.RED);
		rdbtnAverage.setBounds(188, 290, 269, 73);
		panel.add(rdbtnAverage);
		
		rdbtnDifficult = new JRadioButton("DIFFICULT");
		rdbtnDifficult.setForeground(Color.WHITE);
		rdbtnDifficult.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnDifficult.setBackground(Color.RED);
		rdbtnDifficult.setBounds(176, 342, 269, 68);
		panel.add(rdbtnDifficult);
		
		ButtonGroup difficulty = new ButtonGroup();
		difficulty.add(rdbtnEasy);
		difficulty.add(rdbtnAverage);
		difficulty.add(rdbtnDifficult);
		
		btnStart = new JButton("START");
		
		
	
		
		btnStart.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
			if(rdbtnEasy.isSelected()){
				///////////
				
 				lblNewLabel_3.setText(generateQuestion());
 				
 				
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_1.setVisible(true);
				
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnAverage.isSelected()){
				
				lblNewLabel_3.setText(generateQuestionAverage());
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_2.setVisible(true);
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnDifficult.isSelected()){
				
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			}
		});
		btnStart.setBackground(Color.WHITE);
		btnStart.setForeground(Color.RED);
		btnStart.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnStart.setBounds(212, 453, 125, 43);
		panel.add(btnStart);
		
		lblNewLabel_2 = new JLabel("");
		lblNewLabel_2.setVisible(false);
		lblNewLabel_2.setForeground(Color.WHITE);
		lblNewLabel_2.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_2.setBounds(317, 90, 125, 129);
		panel.add(lblNewLabel_2);
		
		lblNewLabel_3 = new JLabel("");
		lblNewLabel_3.setVisible(false);
		lblNewLabel_3.setForeground(Color.WHITE);
		lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_3.setBounds(215, 90, 300, 200);
		panel.add(lblNewLabel_3);
		
		lblNewLabel_4 = new JLabel("");
		lblNewLabel_4.addMouseListener(new MouseAdapter() {
			public void mouseReleased(MouseEvent e) {
				
			}
		});
		lblNewLabel_4.setVisible(false);
		lblNewLabel_4.setForeground(Color.WHITE);
		lblNewLabel_4.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_4.setBounds(121, 90, 103, 129);
		panel.add(lblNewLabel_4);
				
		textField = new JTextField();
		textField.setHorizontalAlignment(SwingConstants.RIGHT);
		textField.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField.setVisible(false);
		textField.setBounds(121, 261, 324, 49);
		panel.add(textField);
		textField.setColumns(10);
		
		textField1 = new JTextField();
		textField1.setHorizontalAlignment(SwingConstants.RIGHT);
		textField1.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField1.setVisible(false);
		textField1.setBounds(121, 261, 324, 49);
		panel.add(textField1);
		textField1.setColumns(10);
		
		returnButton = new JButton("Return");
		returnButton.setVisible(false);
		returnButton.setFont(new Font("Tahoma", Font.BOLD, 20));
		returnButton.setForeground(Color.RED);
		returnButton.setBackground(Color.WHITE);
		returnButton.setBounds(225, 363, 126, 43);
		panel.add(returnButton);
		
		
		returnButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel.setVisible(true);
				rdbtnEasy.setVisible(true);
				rdbtnAverage.setVisible(true);
				rdbtnDifficult.setVisible(true);
				lblNewLabel_1_2_3.setVisible(true);
				lblNewLabel_1_2_1.setVisible(true);
				lblNewLabel_1_2_2.setVisible(true);
				lblNewLabel_1_1.setVisible(true);
				lblNewLabel_1.setVisible(true);
				lblNewLabel_1_2.setVisible(true);
				lblNewLabel_1_2_4.setVisible(true);
				btnStart.setVisible(true);
				returnButton.setVisible(false);
				lblNewLabel_3.setVisible(false);
				lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
			}

		
			
			
		});
		
		btnNewButton_1 = new JButton("SUBMIT");
		btnNewButton_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				
				
				double result = getResult(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
				
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
				
			}
		});
		btnNewButton_1.setVisible(false);
		btnNewButton_1.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_1.setForeground(Color.RED);
		btnNewButton_1.setBackground(Color.WHITE);
		btnNewButton_1.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_1);
		
		//Button 2
		btnNewButton_2 = new JButton("SUBMIT");
		btnNewButton_2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				double result = getResultAverage(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
			
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
			}
		});
		btnNewButton_2.setVisible(false);
		btnNewButton_2.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_2.setForeground(Color.RED);
		btnNewButton_2.setBackground(Color.WHITE);
		btnNewButton_2.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_2);
		
		
		textField2 = new JTextField();
		textField2.setHorizontalAlignment(SwingConstants.RIGHT);
		textField2.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField2.setVisible(false);
		textField2.setBounds(121, 261, 324, 49);
		panel.add(textField2);
		textField2.setColumns(10);
		
		btnNewButton_3 = new JButton("SUBMIT");
		btnNewButton_3.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel_2.setVisible(false);
				
				textField.setVisible(false);
				textField1.setVisible(false);
				btnNewButton_1.setVisible(false);
				btnNewButton_2.setVisible(false);
				
				textField2.setVisible(false);
				btnNewButton_3.setVisible(false);
				
				
				
			}
		});
		btnNewButton_3.setVisible(false);
		btnNewButton_3.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_3.setForeground(Color.RED);
		btnNewButton_3.setBackground(Color.WHITE);
		btnNewButton_3.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_3);
		
		
	}
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-04-30 17:31:33.425
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-04-30 17:31:33.425
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-30 17:31:33.438
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import java.awt.Color;
import java.awt.Toolkit;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

import java.awt.Font;
import javax.swing.JRadioButton;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Arrays;
import java.util.Random;


public class Main extends JFrame {

	private JPanel contentPane;
	private JLabel lblNewLabel_1_2;
	private JLabel lblNewLabel_1;
	private JLabel lblNewLabel_1_1; 
	private JLabel lblNewLabel_1_2_1;
	private JLabel lblNewLabel_1_2_2;
	private JLabel lblNewLabel_1_2_3;
	private JLabel lblNewLabel_1_2_4;
	private JRadioButton rdbtnEasy;
	private JRadioButton rdbtnAverage;
	private JRadioButton rdbtnDifficult;
	private JButton btnStart; 
	private JLabel lblNewLabel;
	private JLabel lblNewLabel_2;
	private JLabel lblNewLabel_3;
	private JLabel lblNewLabel_4;
	private JTextField textField;
	private JButton btnNewButton_1;
	private JTextField textField1;
	private JButton btnNewButton_2;
	private JButton returnButton;

	private JTextField textField2;
	private JButton btnNewButton_3;
	int currentQuestionNumber = 1;
	int playerScore = 0;
	Random random = new Random();
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Main frame = new Main();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
	
	
	
	

	/**
	 * Create the frame.
	 */
	
	
	public int findIndex(char operand) {
		char[] operandOrder = {'-', '+', '/', '*'};
		int index = 0;
		
		for(int i = 0; i < operandOrder.length; i++) {
			if(operand == operandOrder[i]) index = i;
		}
		return index;
	}
	
	public double getResult(String question) {
		char[] questionData = question.toCharArray(); 
		
		char operand = questionData[1];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double result = 0;
		
		if(operand == '+') result = firstNumber + secondNumber;
		if(operand == '-') result = firstNumber - secondNumber;
		if(operand == '*') result = firstNumber * secondNumber;
		if(operand == '/') result = firstNumber / secondNumber;
		double roundedResult = Math.round(result);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	public double getResultAverage(String question) {
		char[] questionData = question.toCharArray(); 
		
		char firstOperand = questionData[1];
		char secondOperand = questionData[3];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double thirdNumber = Double.parseDouble(String.valueOf(questionData[4]));
		double result = 0;
		
		
		char[] operandOrder = {'-', '+', '/', '*'};
		int indexFirst = findIndex(firstOperand);
		int indexSecond = findIndex(secondOperand);
		double totalResult = 0;
		double initialResult = 0;
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+') initialResult = secondNumber + thirdNumber;
			if(secondOperand == '-') initialResult = secondNumber - thirdNumber;
			if(secondOperand == '*') initialResult = secondNumber * thirdNumber;
			if(secondOperand == '/') initialResult = secondNumber / thirdNumber;
			
			
		}
		else if (indexSecond < indexFirst) {
			if(firstOperand == '+') initialResult = firstNumber + secondNumber;
			if(firstOperand == '-') initialResult = firstNumber - secondNumber;
			if(firstOperand == '*') initialResult = firstNumber * secondNumber;
			if(firstOperand == '/') initialResult = firstNumber / secondNumber;
		}
		else {
			if(firstOperand == '+') totalResult = firstNumber + secondNumber + thirdNumber;
			if(firstOperand == '-') totalResult = firstNumber - secondNumber - thirdNumber;
			if(firstOperand == '*') totalResult = firstNumber * secondNumber * thirdNumber;
			if(firstOperand == '/') totalResult = firstNumber / secondNumber / thirdNumber;
		}
		
		
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+')  totalResult = firstNumber + thirdNumber;
			if(secondOperand == '-')  totalResult = firstNumber - thirdNumber;
			if(secondOperand == '*')  totalResult = firstNumber * thirdNumber;
			if(secondOperand == '/')  totalResult = firstNumber / thirdNumber;
			
			
		}
		else (indexSecond < indexFirst) {
			if(firstOperand == '+')  totalResult = initialResult + thirdNumber;
			if(firstOperand == '-')  totalResult = initialResult - thirdNumber;
			if(firstOperand == '*')  totalResult = initialResult * thirdNumber;
			if(firstOperand == '/')  totalResult = initialResult / thirdNumber;
		}
		
		
		
		
		
		double roundedResult = Math.round(totalResult);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	
	public String generateQuestion() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond];
		
		return question;
	}
	
	public String generateQuestionAverage() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexThird = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		int randomIndexOperand2 = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond] + operands[randomIndexOperand2] + numbers[randomIndexThird];
		System.out.println(question);
		return question;
	}
	
	
	public Main() {
		setIconImage(Toolkit.getDefaultToolkit().getImage("C:\\Users\\user\\Downloads\\quiz.png"));
		setTitle("QUIZ GAME");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(400, 100, 600, 600);
		contentPane = new JPanel();
		contentPane.setBackground(Color.WHITE);
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));

		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JPanel panel = new JPanel();
		panel.setBackground(Color.RED);
		panel.setBounds(10, 0, 564, 550);
		contentPane.add(panel);
		panel.setLayout(null);
		
		lblNewLabel_1_2_4 = new JLabel("quiz");
		lblNewLabel_1_2_4.setForeground(Color.WHITE);
		lblNewLabel_1_2_4.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_4.setBounds(140, 130, 561, 120);
		panel.add(lblNewLabel_1_2_4);
		
		lblNewLabel_1_2 = new JLabel("MATH");
		lblNewLabel_1_2.setForeground(Color.WHITE);
		lblNewLabel_1_2.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_2.setBounds(70, 50, 561, 120);
		panel.add(lblNewLabel_1_2);
		
		lblNewLabel_1 = new JLabel("MATH");
		lblNewLabel_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1.setForeground(Color.DARK_GRAY);
		lblNewLabel_1.setBounds(78, 50, 777, 120);
		panel.add(lblNewLabel_1);
		
		lblNewLabel_1_1 = new JLabel("MATH");
		lblNewLabel_1_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_1.setBounds(89, 50, 612, 120);
		panel.add(lblNewLabel_1_1);
		
		lblNewLabel_1_2_2 = new JLabel("quiz");
		lblNewLabel_1_2_2.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_2.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_2.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_2);
		
		lblNewLabel_1_2_1 = new JLabel("quiz");
		lblNewLabel_1_2_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_2_1.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_1.setBounds(159, 130, 561, 120);
		panel.add(lblNewLabel_1_2_1);
		
		lblNewLabel_1_2_3 = new JLabel("quiz");
		lblNewLabel_1_2_3.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_3.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_3.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_3);
		
		lblNewLabel = new JLabel("");
		lblNewLabel.setFont(new Font("Dialog", Font.BOLD, 9));
		lblNewLabel.setBounds(225, 428, 161, 14);
		panel.add(lblNewLabel);
		
		rdbtnEasy = new JRadioButton("EASY");
		rdbtnEasy.setForeground(Color.WHITE);
		rdbtnEasy.setBackground(Color.RED);
		rdbtnEasy.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnEasy.setBounds(215, 232, 269, 78);
		panel.add(rdbtnEasy);
		
		rdbtnAverage = new JRadioButton("AVERAGE");
		rdbtnAverage.setForeground(Color.WHITE);
		rdbtnAverage.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnAverage.setBackground(Color.RED);
		rdbtnAverage.setBounds(188, 290, 269, 73);
		panel.add(rdbtnAverage);
		
		rdbtnDifficult = new JRadioButton("DIFFICULT");
		rdbtnDifficult.setForeground(Color.WHITE);
		rdbtnDifficult.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnDifficult.setBackground(Color.RED);
		rdbtnDifficult.setBounds(176, 342, 269, 68);
		panel.add(rdbtnDifficult);
		
		ButtonGroup difficulty = new ButtonGroup();
		difficulty.add(rdbtnEasy);
		difficulty.add(rdbtnAverage);
		difficulty.add(rdbtnDifficult);
		
		btnStart = new JButton("START");
		
		
	
		
		btnStart.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
			if(rdbtnEasy.isSelected()){
				///////////
				
 				lblNewLabel_3.setText(generateQuestion());
 				
 				
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_1.setVisible(true);
				
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnAverage.isSelected()){
				
				lblNewLabel_3.setText(generateQuestionAverage());
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_2.setVisible(true);
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnDifficult.isSelected()){
				
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			}
		});
		btnStart.setBackground(Color.WHITE);
		btnStart.setForeground(Color.RED);
		btnStart.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnStart.setBounds(212, 453, 125, 43);
		panel.add(btnStart);
		
		lblNewLabel_2 = new JLabel("");
		lblNewLabel_2.setVisible(false);
		lblNewLabel_2.setForeground(Color.WHITE);
		lblNewLabel_2.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_2.setBounds(317, 90, 125, 129);
		panel.add(lblNewLabel_2);
		
		lblNewLabel_3 = new JLabel("");
		lblNewLabel_3.setVisible(false);
		lblNewLabel_3.setForeground(Color.WHITE);
		lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_3.setBounds(215, 90, 300, 200);
		panel.add(lblNewLabel_3);
		
		lblNewLabel_4 = new JLabel("");
		lblNewLabel_4.addMouseListener(new MouseAdapter() {
			public void mouseReleased(MouseEvent e) {
				
			}
		});
		lblNewLabel_4.setVisible(false);
		lblNewLabel_4.setForeground(Color.WHITE);
		lblNewLabel_4.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_4.setBounds(121, 90, 103, 129);
		panel.add(lblNewLabel_4);
				
		textField = new JTextField();
		textField.setHorizontalAlignment(SwingConstants.RIGHT);
		textField.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField.setVisible(false);
		textField.setBounds(121, 261, 324, 49);
		panel.add(textField);
		textField.setColumns(10);
		
		textField1 = new JTextField();
		textField1.setHorizontalAlignment(SwingConstants.RIGHT);
		textField1.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField1.setVisible(false);
		textField1.setBounds(121, 261, 324, 49);
		panel.add(textField1);
		textField1.setColumns(10);
		
		returnButton = new JButton("Return");
		returnButton.setVisible(false);
		returnButton.setFont(new Font("Tahoma", Font.BOLD, 20));
		returnButton.setForeground(Color.RED);
		returnButton.setBackground(Color.WHITE);
		returnButton.setBounds(225, 363, 126, 43);
		panel.add(returnButton);
		
		
		returnButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel.setVisible(true);
				rdbtnEasy.setVisible(true);
				rdbtnAverage.setVisible(true);
				rdbtnDifficult.setVisible(true);
				lblNewLabel_1_2_3.setVisible(true);
				lblNewLabel_1_2_1.setVisible(true);
				lblNewLabel_1_2_2.setVisible(true);
				lblNewLabel_1_1.setVisible(true);
				lblNewLabel_1.setVisible(true);
				lblNewLabel_1_2.setVisible(true);
				lblNewLabel_1_2_4.setVisible(true);
				btnStart.setVisible(true);
				returnButton.setVisible(false);
				lblNewLabel_3.setVisible(false);
				lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
			}

		
			
			
		});
		
		btnNewButton_1 = new JButton("SUBMIT");
		btnNewButton_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				
				
				double result = getResult(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
				
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
				
			}
		});
		btnNewButton_1.setVisible(false);
		btnNewButton_1.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_1.setForeground(Color.RED);
		btnNewButton_1.setBackground(Color.WHITE);
		btnNewButton_1.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_1);
		
		//Button 2
		btnNewButton_2 = new JButton("SUBMIT");
		btnNewButton_2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				double result = getResultAverage(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
			
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
			}
		});
		btnNewButton_2.setVisible(false);
		btnNewButton_2.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_2.setForeground(Color.RED);
		btnNewButton_2.setBackground(Color.WHITE);
		btnNewButton_2.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_2);
		
		
		textField2 = new JTextField();
		textField2.setHorizontalAlignment(SwingConstants.RIGHT);
		textField2.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField2.setVisible(false);
		textField2.setBounds(121, 261, 324, 49);
		panel.add(textField2);
		textField2.setColumns(10);
		
		btnNewButton_3 = new JButton("SUBMIT");
		btnNewButton_3.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel_2.setVisible(false);
				
				textField.setVisible(false);
				textField1.setVisible(false);
				btnNewButton_1.setVisible(false);
				btnNewButton_2.setVisible(false);
				
				textField2.setVisible(false);
				btnNewButton_3.setVisible(false);
				
				
				
			}
		});
		btnNewButton_3.setVisible(false);
		btnNewButton_3.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_3.setForeground(Color.RED);
		btnNewButton_3.setBackground(Color.WHITE);
		btnNewButton_3.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_3);
		
		
	}
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-04-30 17:31:33.439
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-04-30 17:31:33.439
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-30 17:31:59.916
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import java.awt.Color;
import java.awt.Toolkit;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

import java.awt.Font;
import javax.swing.JRadioButton;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Arrays;
import java.util.Random;


public class Main extends JFrame {

	private JPanel contentPane;
	private JLabel lblNewLabel_1_2;
	private JLabel lblNewLabel_1;
	private JLabel lblNewLabel_1_1; 
	private JLabel lblNewLabel_1_2_1;
	private JLabel lblNewLabel_1_2_2;
	private JLabel lblNewLabel_1_2_3;
	private JLabel lblNewLabel_1_2_4;
	private JRadioButton rdbtnEasy;
	private JRadioButton rdbtnAverage;
	private JRadioButton rdbtnDifficult;
	private JButton btnStart; 
	private JLabel lblNewLabel;
	private JLabel lblNewLabel_2;
	private JLabel lblNewLabel_3;
	private JLabel lblNewLabel_4;
	private JTextField textField;
	private JButton btnNewButton_1;
	private JTextField textField1;
	private JButton btnNewButton_2;
	private JButton returnButton;

	private JTextField textField2;
	private JButton btnNewButton_3;
	int currentQuestionNumber = 1;
	int playerScore = 0;
	Random random = new Random();
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Main frame = new Main();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
	
	
	
	

	/**
	 * Create the frame.
	 */
	
	
	public int findIndex(char operand) {
		char[] operandOrder = {'-', '+', '/', '*'};
		int index = 0;
		
		for(int i = 0; i < operandOrder.length; i++) {
			if(operand == operandOrder[i]) index = i;
		}
		return index;
	}
	
	public double getResult(String question) {
		char[] questionData = question.toCharArray(); 
		
		char operand = questionData[1];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double result = 0;
		
		if(operand == '+') result = firstNumber + secondNumber;
		if(operand == '-') result = firstNumber - secondNumber;
		if(operand == '*') result = firstNumber * secondNumber;
		if(operand == '/') result = firstNumber / secondNumber;
		double roundedResult = Math.round(result);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	public double getResultAverage(String question) {
		char[] questionData = question.toCharArray(); 
		
		char firstOperand = questionData[1];
		char secondOperand = questionData[3];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double thirdNumber = Double.parseDouble(String.valueOf(questionData[4]));
		double result = 0;
		
		
		char[] operandOrder = {'-', '+', '/', '*'};
		int indexFirst = findIndex(firstOperand);
		int indexSecond = findIndex(secondOperand);
		double totalResult = 0;
		double initialResult = 0;
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+') initialResult = secondNumber + thirdNumber;
			if(secondOperand == '-') initialResult = secondNumber - thirdNumber;
			if(secondOperand == '*') initialResult = secondNumber * thirdNumber;
			if(secondOperand == '/') initialResult = secondNumber / thirdNumber;
			
			
		}
		else if (indexSecond < indexFirst) {
			if(firstOperand == '+') initialResult = firstNumber + secondNumber;
			if(firstOperand == '-') initialResult = firstNumber - secondNumber;
			if(firstOperand == '*') initialResult = firstNumber * secondNumber;
			if(firstOperand == '/') initialResult = firstNumber / secondNumber;
		}
		else {
			if(firstOperand == '+') totalResult = firstNumber + secondNumber + thirdNumber;
			if(firstOperand == '-') totalResult = firstNumber - secondNumber - thirdNumber;
			if(firstOperand == '*') totalResult = firstNumber * secondNumber * thirdNumber;
			if(firstOperand == '/') totalResult = firstNumber / secondNumber / thirdNumber;
		}
		
		
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+')  totalResult = firstNumber + thirdNumber;
			if(secondOperand == '-')  totalResult = firstNumber - thirdNumber;
			if(secondOperand == '*')  totalResult = firstNumber * thirdNumber;
			if(secondOperand == '/')  totalResult = firstNumber / thirdNumber;
			
			
		}
		else (indexSecond < indexFirst) {
			if(firstOperand == '+')  totalResult = initialResult + thirdNumber;
			if(firstOperand == '-')  totalResult = initialResult - thirdNumber;
			if(firstOperand == '*')  totalResult = initialResult * thirdNumber;
			if(firstOperand == '/')  totalResult = initialResult / thirdNumber;
		}
		
		
		
		
		
		double roundedResult = Math.round(totalResult);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	
	public String generateQuestion() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond];
		
		return question;
	}
	
	public String generateQuestionAverage() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexThird = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		int randomIndexOperand2 = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond] + operands[randomIndexOperand2] + numbers[randomIndexThird];
		System.out.println(question);
		return question;
	}
	
	
	public Main() {
		setIconImage(Toolkit.getDefaultToolkit().getImage("C:\\Users\\user\\Downloads\\quiz.png"));
		setTitle("QUIZ GAME");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(400, 100, 600, 600);
		contentPane = new JPanel();
		contentPane.setBackground(Color.WHITE);
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));

		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JPanel panel = new JPanel();
		panel.setBackground(Color.RED);
		panel.setBounds(10, 0, 564, 550);
		contentPane.add(panel);
		panel.setLayout(null);
		
		lblNewLabel_1_2_4 = new JLabel("quiz");
		lblNewLabel_1_2_4.setForeground(Color.WHITE);
		lblNewLabel_1_2_4.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_4.setBounds(140, 130, 561, 120);
		panel.add(lblNewLabel_1_2_4);
		
		lblNewLabel_1_2 = new JLabel("MATH");
		lblNewLabel_1_2.setForeground(Color.WHITE);
		lblNewLabel_1_2.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_2.setBounds(70, 50, 561, 120);
		panel.add(lblNewLabel_1_2);
		
		lblNewLabel_1 = new JLabel("MATH");
		lblNewLabel_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1.setForeground(Color.DARK_GRAY);
		lblNewLabel_1.setBounds(78, 50, 777, 120);
		panel.add(lblNewLabel_1);
		
		lblNewLabel_1_1 = new JLabel("MATH");
		lblNewLabel_1_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_1.setBounds(89, 50, 612, 120);
		panel.add(lblNewLabel_1_1);
		
		lblNewLabel_1_2_2 = new JLabel("quiz");
		lblNewLabel_1_2_2.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_2.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_2.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_2);
		
		lblNewLabel_1_2_1 = new JLabel("quiz");
		lblNewLabel_1_2_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_2_1.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_1.setBounds(159, 130, 561, 120);
		panel.add(lblNewLabel_1_2_1);
		
		lblNewLabel_1_2_3 = new JLabel("quiz");
		lblNewLabel_1_2_3.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_3.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_3.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_3);
		
		lblNewLabel = new JLabel("");
		lblNewLabel.setFont(new Font("Dialog", Font.BOLD, 9));
		lblNewLabel.setBounds(225, 428, 161, 14);
		panel.add(lblNewLabel);
		
		rdbtnEasy = new JRadioButton("EASY");
		rdbtnEasy.setForeground(Color.WHITE);
		rdbtnEasy.setBackground(Color.RED);
		rdbtnEasy.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnEasy.setBounds(215, 232, 269, 78);
		panel.add(rdbtnEasy);
		
		rdbtnAverage = new JRadioButton("AVERAGE");
		rdbtnAverage.setForeground(Color.WHITE);
		rdbtnAverage.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnAverage.setBackground(Color.RED);
		rdbtnAverage.setBounds(188, 290, 269, 73);
		panel.add(rdbtnAverage);
		
		rdbtnDifficult = new JRadioButton("DIFFICULT");
		rdbtnDifficult.setForeground(Color.WHITE);
		rdbtnDifficult.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnDifficult.setBackground(Color.RED);
		rdbtnDifficult.setBounds(176, 342, 269, 68);
		panel.add(rdbtnDifficult);
		
		ButtonGroup difficulty = new ButtonGroup();
		difficulty.add(rdbtnEasy);
		difficulty.add(rdbtnAverage);
		difficulty.add(rdbtnDifficult);
		
		btnStart = new JButton("START");
		
		
	
		
		btnStart.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
			if(rdbtnEasy.isSelected()){
				///////////
				
 				lblNewLabel_3.setText(generateQuestion());
 				
 				
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_1.setVisible(true);
				
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnAverage.isSelected()){
				
				lblNewLabel_3.setText(generateQuestionAverage());
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_2.setVisible(true);
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnDifficult.isSelected()){
				
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			}
		});
		btnStart.setBackground(Color.WHITE);
		btnStart.setForeground(Color.RED);
		btnStart.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnStart.setBounds(212, 453, 125, 43);
		panel.add(btnStart);
		
		lblNewLabel_2 = new JLabel("");
		lblNewLabel_2.setVisible(false);
		lblNewLabel_2.setForeground(Color.WHITE);
		lblNewLabel_2.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_2.setBounds(317, 90, 125, 129);
		panel.add(lblNewLabel_2);
		
		lblNewLabel_3 = new JLabel("");
		lblNewLabel_3.setVisible(false);
		lblNewLabel_3.setForeground(Color.WHITE);
		lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_3.setBounds(215, 90, 300, 200);
		panel.add(lblNewLabel_3);
		
		lblNewLabel_4 = new JLabel("");
		lblNewLabel_4.addMouseListener(new MouseAdapter() {
			public void mouseReleased(MouseEvent e) {
				
			}
		});
		lblNewLabel_4.setVisible(false);
		lblNewLabel_4.setForeground(Color.WHITE);
		lblNewLabel_4.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_4.setBounds(121, 90, 103, 129);
		panel.add(lblNewLabel_4);
				
		textField = new JTextField();
		textField.setHorizontalAlignment(SwingConstants.RIGHT);
		textField.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField.setVisible(false);
		textField.setBounds(121, 261, 324, 49);
		panel.add(textField);
		textField.setColumns(10);
		
		textField1 = new JTextField();
		textField1.setHorizontalAlignment(SwingConstants.RIGHT);
		textField1.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField1.setVisible(false);
		textField1.setBounds(121, 261, 324, 49);
		panel.add(textField1);
		textField1.setColumns(10);
		
		returnButton = new JButton("Return");
		returnButton.setVisible(false);
		returnButton.setFont(new Font("Tahoma", Font.BOLD, 20));
		returnButton.setForeground(Color.RED);
		returnButton.setBackground(Color.WHITE);
		returnButton.setBounds(225, 363, 126, 43);
		panel.add(returnButton);
		
		
		returnButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel.setVisible(true);
				rdbtnEasy.setVisible(true);
				rdbtnAverage.setVisible(true);
				rdbtnDifficult.setVisible(true);
				lblNewLabel_1_2_3.setVisible(true);
				lblNewLabel_1_2_1.setVisible(true);
				lblNewLabel_1_2_2.setVisible(true);
				lblNewLabel_1_1.setVisible(true);
				lblNewLabel_1.setVisible(true);
				lblNewLabel_1_2.setVisible(true);
				lblNewLabel_1_2_4.setVisible(true);
				btnStart.setVisible(true);
				returnButton.setVisible(false);
				lblNewLabel_3.setVisible(false);
				lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
			}

		
			
			
		});
		
		btnNewButton_1 = new JButton("SUBMIT");
		btnNewButton_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				
				
				double result = getResult(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
				
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
				
			}
		});
		btnNewButton_1.setVisible(false);
		btnNewButton_1.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_1.setForeground(Color.RED);
		btnNewButton_1.setBackground(Color.WHITE);
		btnNewButton_1.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_1);
		
		//Button 2
		btnNewButton_2 = new JButton("SUBMIT");
		btnNewButton_2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				double result = getResultAverage(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
			
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
			}
		});
		btnNewButton_2.setVisible(false);
		btnNewButton_2.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_2.setForeground(Color.RED);
		btnNewButton_2.setBackground(Color.WHITE);
		btnNewButton_2.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_2);
		
		
		textField2 = new JTextField();
		textField2.setHorizontalAlignment(SwingConstants.RIGHT);
		textField2.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField2.setVisible(false);
		textField2.setBounds(121, 261, 324, 49);
		panel.add(textField2);
		textField2.setColumns(10);
		
		btnNewButton_3 = new JButton("SUBMIT");
		btnNewButton_3.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel_2.setVisible(false);
				
				textField.setVisible(false);
				textField1.setVisible(false);
				btnNewButton_1.setVisible(false);
				btnNewButton_2.setVisible(false);
				
				textField2.setVisible(false);
				btnNewButton_3.setVisible(false);
				
				
				
			}
		});
		btnNewButton_3.setVisible(false);
		btnNewButton_3.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_3.setForeground(Color.RED);
		btnNewButton_3.setBackground(Color.WHITE);
		btnNewButton_3.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_3);
		
		
	}
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:111)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-04-30 17:31:59.917
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:111)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-04-30 17:31:59.917
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:111)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-30 17:31:59.926
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import java.awt.Color;
import java.awt.Toolkit;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

import java.awt.Font;
import javax.swing.JRadioButton;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Arrays;
import java.util.Random;


public class Main extends JFrame {

	private JPanel contentPane;
	private JLabel lblNewLabel_1_2;
	private JLabel lblNewLabel_1;
	private JLabel lblNewLabel_1_1; 
	private JLabel lblNewLabel_1_2_1;
	private JLabel lblNewLabel_1_2_2;
	private JLabel lblNewLabel_1_2_3;
	private JLabel lblNewLabel_1_2_4;
	private JRadioButton rdbtnEasy;
	private JRadioButton rdbtnAverage;
	private JRadioButton rdbtnDifficult;
	private JButton btnStart; 
	private JLabel lblNewLabel;
	private JLabel lblNewLabel_2;
	private JLabel lblNewLabel_3;
	private JLabel lblNewLabel_4;
	private JTextField textField;
	private JButton btnNewButton_1;
	private JTextField textField1;
	private JButton btnNewButton_2;
	private JButton returnButton;

	private JTextField textField2;
	private JButton btnNewButton_3;
	int currentQuestionNumber = 1;
	int playerScore = 0;
	Random random = new Random();
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Main frame = new Main();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
	
	
	
	

	/**
	 * Create the frame.
	 */
	
	
	public int findIndex(char operand) {
		char[] operandOrder = {'-', '+', '/', '*'};
		int index = 0;
		
		for(int i = 0; i < operandOrder.length; i++) {
			if(operand == operandOrder[i]) index = i;
		}
		return index;
	}
	
	public double getResult(String question) {
		char[] questionData = question.toCharArray(); 
		
		char operand = questionData[1];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double result = 0;
		
		if(operand == '+') result = firstNumber + secondNumber;
		if(operand == '-') result = firstNumber - secondNumber;
		if(operand == '*') result = firstNumber * secondNumber;
		if(operand == '/') result = firstNumber / secondNumber;
		double roundedResult = Math.round(result);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	public double getResultAverage(String question) {
		char[] questionData = question.toCharArray(); 
		
		char firstOperand = questionData[1];
		char secondOperand = questionData[3];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double thirdNumber = Double.parseDouble(String.valueOf(questionData[4]));
		double result = 0;
		
		
		char[] operandOrder = {'-', '+', '/', '*'};
		int indexFirst = findIndex(firstOperand);
		int indexSecond = findIndex(secondOperand);
		double totalResult = 0;
		double initialResult = 0;
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+') initialResult = secondNumber + thirdNumber;
			if(secondOperand == '-') initialResult = secondNumber - thirdNumber;
			if(secondOperand == '*') initialResult = secondNumber * thirdNumber;
			if(secondOperand == '/') initialResult = secondNumber / thirdNumber;
			
			
		}
		else if (indexSecond < indexFirst) {
			if(firstOperand == '+') initialResult = firstNumber + secondNumber;
			if(firstOperand == '-') initialResult = firstNumber - secondNumber;
			if(firstOperand == '*') initialResult = firstNumber * secondNumber;
			if(firstOperand == '/') initialResult = firstNumber / secondNumber;
		}
		else {
			if(firstOperand == '+') totalResult = firstNumber + secondNumber + thirdNumber;
			if(firstOperand == '-') totalResult = firstNumber - secondNumber - thirdNumber;
			if(firstOperand == '*') totalResult = firstNumber * secondNumber * thirdNumber;
			if(firstOperand == '/') totalResult = firstNumber / secondNumber / thirdNumber;
		}
		
		
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+')  totalResult = firstNumber + thirdNumber;
			if(secondOperand == '-')  totalResult = firstNumber - thirdNumber;
			if(secondOperand == '*')  totalResult = firstNumber * thirdNumber;
			if(secondOperand == '/')  totalResult = firstNumber / thirdNumber;
			
			
		}
		else (indexSecond < indexFirst) {
			if(firstOperand == '+')  totalResult = initialResult + thirdNumber;
			if(firstOperand == '-')  totalResult = initialResult - thirdNumber;
			if(firstOperand == '*')  totalResult = initialResult * thirdNumber;
			if(firstOperand == '/')  totalResult = initialResult / thirdNumber;
		}
		
		
		
		
		
		double roundedResult = Math.round(totalResult);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	
	public String generateQuestion() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond];
		
		return question;
	}
	
	public String generateQuestionAverage() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexThird = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		int randomIndexOperand2 = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond] + operands[randomIndexOperand2] + numbers[randomIndexThird];
		System.out.println(question);
		return question;
	}
	
	
	public Main() {
		setIconImage(Toolkit.getDefaultToolkit().getImage("C:\\Users\\user\\Downloads\\quiz.png"));
		setTitle("QUIZ GAME");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(400, 100, 600, 600);
		contentPane = new JPanel();
		contentPane.setBackground(Color.WHITE);
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));

		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JPanel panel = new JPanel();
		panel.setBackground(Color.RED);
		panel.setBounds(10, 0, 564, 550);
		contentPane.add(panel);
		panel.setLayout(null);
		
		lblNewLabel_1_2_4 = new JLabel("quiz");
		lblNewLabel_1_2_4.setForeground(Color.WHITE);
		lblNewLabel_1_2_4.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_4.setBounds(140, 130, 561, 120);
		panel.add(lblNewLabel_1_2_4);
		
		lblNewLabel_1_2 = new JLabel("MATH");
		lblNewLabel_1_2.setForeground(Color.WHITE);
		lblNewLabel_1_2.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_2.setBounds(70, 50, 561, 120);
		panel.add(lblNewLabel_1_2);
		
		lblNewLabel_1 = new JLabel("MATH");
		lblNewLabel_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1.setForeground(Color.DARK_GRAY);
		lblNewLabel_1.setBounds(78, 50, 777, 120);
		panel.add(lblNewLabel_1);
		
		lblNewLabel_1_1 = new JLabel("MATH");
		lblNewLabel_1_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_1.setBounds(89, 50, 612, 120);
		panel.add(lblNewLabel_1_1);
		
		lblNewLabel_1_2_2 = new JLabel("quiz");
		lblNewLabel_1_2_2.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_2.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_2.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_2);
		
		lblNewLabel_1_2_1 = new JLabel("quiz");
		lblNewLabel_1_2_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_2_1.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_1.setBounds(159, 130, 561, 120);
		panel.add(lblNewLabel_1_2_1);
		
		lblNewLabel_1_2_3 = new JLabel("quiz");
		lblNewLabel_1_2_3.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_3.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_3.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_3);
		
		lblNewLabel = new JLabel("");
		lblNewLabel.setFont(new Font("Dialog", Font.BOLD, 9));
		lblNewLabel.setBounds(225, 428, 161, 14);
		panel.add(lblNewLabel);
		
		rdbtnEasy = new JRadioButton("EASY");
		rdbtnEasy.setForeground(Color.WHITE);
		rdbtnEasy.setBackground(Color.RED);
		rdbtnEasy.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnEasy.setBounds(215, 232, 269, 78);
		panel.add(rdbtnEasy);
		
		rdbtnAverage = new JRadioButton("AVERAGE");
		rdbtnAverage.setForeground(Color.WHITE);
		rdbtnAverage.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnAverage.setBackground(Color.RED);
		rdbtnAverage.setBounds(188, 290, 269, 73);
		panel.add(rdbtnAverage);
		
		rdbtnDifficult = new JRadioButton("DIFFICULT");
		rdbtnDifficult.setForeground(Color.WHITE);
		rdbtnDifficult.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnDifficult.setBackground(Color.RED);
		rdbtnDifficult.setBounds(176, 342, 269, 68);
		panel.add(rdbtnDifficult);
		
		ButtonGroup difficulty = new ButtonGroup();
		difficulty.add(rdbtnEasy);
		difficulty.add(rdbtnAverage);
		difficulty.add(rdbtnDifficult);
		
		btnStart = new JButton("START");
		
		
	
		
		btnStart.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
			if(rdbtnEasy.isSelected()){
				///////////
				
 				lblNewLabel_3.setText(generateQuestion());
 				
 				
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_1.setVisible(true);
				
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnAverage.isSelected()){
				
				lblNewLabel_3.setText(generateQuestionAverage());
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_2.setVisible(true);
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnDifficult.isSelected()){
				
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			}
		});
		btnStart.setBackground(Color.WHITE);
		btnStart.setForeground(Color.RED);
		btnStart.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnStart.setBounds(212, 453, 125, 43);
		panel.add(btnStart);
		
		lblNewLabel_2 = new JLabel("");
		lblNewLabel_2.setVisible(false);
		lblNewLabel_2.setForeground(Color.WHITE);
		lblNewLabel_2.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_2.setBounds(317, 90, 125, 129);
		panel.add(lblNewLabel_2);
		
		lblNewLabel_3 = new JLabel("");
		lblNewLabel_3.setVisible(false);
		lblNewLabel_3.setForeground(Color.WHITE);
		lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_3.setBounds(215, 90, 300, 200);
		panel.add(lblNewLabel_3);
		
		lblNewLabel_4 = new JLabel("");
		lblNewLabel_4.addMouseListener(new MouseAdapter() {
			public void mouseReleased(MouseEvent e) {
				
			}
		});
		lblNewLabel_4.setVisible(false);
		lblNewLabel_4.setForeground(Color.WHITE);
		lblNewLabel_4.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_4.setBounds(121, 90, 103, 129);
		panel.add(lblNewLabel_4);
				
		textField = new JTextField();
		textField.setHorizontalAlignment(SwingConstants.RIGHT);
		textField.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField.setVisible(false);
		textField.setBounds(121, 261, 324, 49);
		panel.add(textField);
		textField.setColumns(10);
		
		textField1 = new JTextField();
		textField1.setHorizontalAlignment(SwingConstants.RIGHT);
		textField1.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField1.setVisible(false);
		textField1.setBounds(121, 261, 324, 49);
		panel.add(textField1);
		textField1.setColumns(10);
		
		returnButton = new JButton("Return");
		returnButton.setVisible(false);
		returnButton.setFont(new Font("Tahoma", Font.BOLD, 20));
		returnButton.setForeground(Color.RED);
		returnButton.setBackground(Color.WHITE);
		returnButton.setBounds(225, 363, 126, 43);
		panel.add(returnButton);
		
		
		returnButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel.setVisible(true);
				rdbtnEasy.setVisible(true);
				rdbtnAverage.setVisible(true);
				rdbtnDifficult.setVisible(true);
				lblNewLabel_1_2_3.setVisible(true);
				lblNewLabel_1_2_1.setVisible(true);
				lblNewLabel_1_2_2.setVisible(true);
				lblNewLabel_1_1.setVisible(true);
				lblNewLabel_1.setVisible(true);
				lblNewLabel_1_2.setVisible(true);
				lblNewLabel_1_2_4.setVisible(true);
				btnStart.setVisible(true);
				returnButton.setVisible(false);
				lblNewLabel_3.setVisible(false);
				lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
			}

		
			
			
		});
		
		btnNewButton_1 = new JButton("SUBMIT");
		btnNewButton_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				
				
				double result = getResult(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
				
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
				
			}
		});
		btnNewButton_1.setVisible(false);
		btnNewButton_1.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_1.setForeground(Color.RED);
		btnNewButton_1.setBackground(Color.WHITE);
		btnNewButton_1.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_1);
		
		//Button 2
		btnNewButton_2 = new JButton("SUBMIT");
		btnNewButton_2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				double result = getResultAverage(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
			
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
			}
		});
		btnNewButton_2.setVisible(false);
		btnNewButton_2.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_2.setForeground(Color.RED);
		btnNewButton_2.setBackground(Color.WHITE);
		btnNewButton_2.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_2);
		
		
		textField2 = new JTextField();
		textField2.setHorizontalAlignment(SwingConstants.RIGHT);
		textField2.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField2.setVisible(false);
		textField2.setBounds(121, 261, 324, 49);
		panel.add(textField2);
		textField2.setColumns(10);
		
		btnNewButton_3 = new JButton("SUBMIT");
		btnNewButton_3.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel_2.setVisible(false);
				
				textField.setVisible(false);
				textField1.setVisible(false);
				btnNewButton_1.setVisible(false);
				btnNewButton_2.setVisible(false);
				
				textField2.setVisible(false);
				btnNewButton_3.setVisible(false);
				
				
				
			}
		});
		btnNewButton_3.setVisible(false);
		btnNewButton_3.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_3.setForeground(Color.RED);
		btnNewButton_3.setBackground(Color.WHITE);
		btnNewButton_3.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_3);
		
		
	}
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.internal.core.manipulation.dom.ASTResolving.createQuickFixAST(ASTResolving.java:1052)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:131)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:111)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jface.text 4 0 2023-04-30 17:31:59.927
!MESSAGE Unexpected runtime error while computing a text hover
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.internal.core.manipulation.dom.ASTResolving.createQuickFixAST(ASTResolving.java:1052)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:131)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:111)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-30 17:32:41.293
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import java.awt.Color;
import java.awt.Toolkit;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

import java.awt.Font;
import javax.swing.JRadioButton;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Arrays;
import java.util.Random;


public class Main extends JFrame {

	private JPanel contentPane;
	private JLabel lblNewLabel_1_2;
	private JLabel lblNewLabel_1;
	private JLabel lblNewLabel_1_1; 
	private JLabel lblNewLabel_1_2_1;
	private JLabel lblNewLabel_1_2_2;
	private JLabel lblNewLabel_1_2_3;
	private JLabel lblNewLabel_1_2_4;
	private JRadioButton rdbtnEasy;
	private JRadioButton rdbtnAverage;
	private JRadioButton rdbtnDifficult;
	private JButton btnStart; 
	private JLabel lblNewLabel;
	private JLabel lblNewLabel_2;
	private JLabel lblNewLabel_3;
	private JLabel lblNewLabel_4;
	private JTextField textField;
	private JButton btnNewButton_1;
	private JTextField textField1;
	private JButton btnNewButton_2;
	private JButton returnButton;

	private JTextField textField2;
	private JButton btnNewButton_3;
	int currentQuestionNumber = 1;
	int playerScore = 0;
	Random random = new Random();
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Main frame = new Main();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
	
	
	
	

	/**
	 * Create the frame.
	 */
	
	
	public int findIndex(char operand) {
		char[] operandOrder = {'-', '+', '/', '*'};
		int index = 0;
		
		for(int i = 0; i < operandOrder.length; i++) {
			if(operand == operandOrder[i]) index = i;
		}
		return index;
	}
	
	public double getResult(String question) {
		char[] questionData = question.toCharArray(); 
		
		char operand = questionData[1];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double result = 0;
		
		if(operand == '+') result = firstNumber + secondNumber;
		if(operand == '-') result = firstNumber - secondNumber;
		if(operand == '*') result = firstNumber * secondNumber;
		if(operand == '/') result = firstNumber / secondNumber;
		double roundedResult = Math.round(result);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	public double getResultAverage(String question) {
		char[] questionData = question.toCharArray(); 
		
		char firstOperand = questionData[1];
		char secondOperand = questionData[3];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double thirdNumber = Double.parseDouble(String.valueOf(questionData[4]));
		double result = 0;
		
		
		char[] operandOrder = {'-', '+', '/', '*'};
		int indexFirst = findIndex(firstOperand);
		int indexSecond = findIndex(secondOperand);
		double totalResult = 0;
		double initialResult = 0;
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+') initialResult = secondNumber + thirdNumber;
			if(secondOperand == '-') initialResult = secondNumber - thirdNumber;
			if(secondOperand == '*') initialResult = secondNumber * thirdNumber;
			if(secondOperand == '/') initialResult = secondNumber / thirdNumber;
			
			
		}
		else if (indexSecond < indexFirst) {
			if(firstOperand == '+') initialResult = firstNumber + secondNumber;
			if(firstOperand == '-') initialResult = firstNumber - secondNumber;
			if(firstOperand == '*') initialResult = firstNumber * secondNumber;
			if(firstOperand == '/') initialResult = firstNumber / secondNumber;
		}
		else {
			if(firstOperand == '+') totalResult = firstNumber + secondNumber + thirdNumber;
			if(firstOperand == '-') totalResult = firstNumber - secondNumber - thirdNumber;
			if(firstOperand == '*') totalResult = firstNumber * secondNumber * thirdNumber;
			if(firstOperand == '/') totalResult = firstNumber / secondNumber / thirdNumber;
		}
		
		
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+')  totalResult = firstNumber + thirdNumber;
			if(secondOperand == '-')  totalResult = firstNumber - thirdNumber;
			if(secondOperand == '*')  totalResult = firstNumber * thirdNumber;
			if(secondOperand == '/')  totalResult = firstNumber / thirdNumber;
			
			
		}
		else (indexSecond < indexFirst) {
			if(firstOperand == '+')  totalResult = initialResult + thirdNumber;
			if(firstOperand == '-')  totalResult = initialResult - thirdNumber;
			if(firstOperand == '*')  totalResult = initialResult * thirdNumber;
			if(firstOperand == '/')  totalResult = initialResult / thirdNumber;
		}
		
		
		
		
		
		double roundedResult = Math.round(totalResult);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	
	public String generateQuestion() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond];
		
		return question;
	}
	
	public String generateQuestionAverage() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexThird = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		int randomIndexOperand2 = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond] + operands[randomIndexOperand2] + numbers[randomIndexThird];
		System.out.println(question);
		return question;
	}
	
	
	public Main() {
		setIconImage(Toolkit.getDefaultToolkit().getImage("C:\\Users\\user\\Downloads\\quiz.png"));
		setTitle("QUIZ GAME");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(400, 100, 600, 600);
		contentPane = new JPanel();
		contentPane.setBackground(Color.WHITE);
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));

		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JPanel panel = new JPanel();
		panel.setBackground(Color.RED);
		panel.setBounds(10, 0, 564, 550);
		contentPane.add(panel);
		panel.setLayout(null);
		
		lblNewLabel_1_2_4 = new JLabel("quiz");
		lblNewLabel_1_2_4.setForeground(Color.WHITE);
		lblNewLabel_1_2_4.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_4.setBounds(140, 130, 561, 120);
		panel.add(lblNewLabel_1_2_4);
		
		lblNewLabel_1_2 = new JLabel("MATH");
		lblNewLabel_1_2.setForeground(Color.WHITE);
		lblNewLabel_1_2.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_2.setBounds(70, 50, 561, 120);
		panel.add(lblNewLabel_1_2);
		
		lblNewLabel_1 = new JLabel("MATH");
		lblNewLabel_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1.setForeground(Color.DARK_GRAY);
		lblNewLabel_1.setBounds(78, 50, 777, 120);
		panel.add(lblNewLabel_1);
		
		lblNewLabel_1_1 = new JLabel("MATH");
		lblNewLabel_1_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_1.setBounds(89, 50, 612, 120);
		panel.add(lblNewLabel_1_1);
		
		lblNewLabel_1_2_2 = new JLabel("quiz");
		lblNewLabel_1_2_2.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_2.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_2.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_2);
		
		lblNewLabel_1_2_1 = new JLabel("quiz");
		lblNewLabel_1_2_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_2_1.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_1.setBounds(159, 130, 561, 120);
		panel.add(lblNewLabel_1_2_1);
		
		lblNewLabel_1_2_3 = new JLabel("quiz");
		lblNewLabel_1_2_3.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_3.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_3.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_3);
		
		lblNewLabel = new JLabel("");
		lblNewLabel.setFont(new Font("Dialog", Font.BOLD, 9));
		lblNewLabel.setBounds(225, 428, 161, 14);
		panel.add(lblNewLabel);
		
		rdbtnEasy = new JRadioButton("EASY");
		rdbtnEasy.setForeground(Color.WHITE);
		rdbtnEasy.setBackground(Color.RED);
		rdbtnEasy.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnEasy.setBounds(215, 232, 269, 78);
		panel.add(rdbtnEasy);
		
		rdbtnAverage = new JRadioButton("AVERAGE");
		rdbtnAverage.setForeground(Color.WHITE);
		rdbtnAverage.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnAverage.setBackground(Color.RED);
		rdbtnAverage.setBounds(188, 290, 269, 73);
		panel.add(rdbtnAverage);
		
		rdbtnDifficult = new JRadioButton("DIFFICULT");
		rdbtnDifficult.setForeground(Color.WHITE);
		rdbtnDifficult.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnDifficult.setBackground(Color.RED);
		rdbtnDifficult.setBounds(176, 342, 269, 68);
		panel.add(rdbtnDifficult);
		
		ButtonGroup difficulty = new ButtonGroup();
		difficulty.add(rdbtnEasy);
		difficulty.add(rdbtnAverage);
		difficulty.add(rdbtnDifficult);
		
		btnStart = new JButton("START");
		
		
	
		
		btnStart.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
			if(rdbtnEasy.isSelected()){
				///////////
				
 				lblNewLabel_3.setText(generateQuestion());
 				
 				
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_1.setVisible(true);
				
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnAverage.isSelected()){
				
				lblNewLabel_3.setText(generateQuestionAverage());
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_2.setVisible(true);
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnDifficult.isSelected()){
				
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			}
		});
		btnStart.setBackground(Color.WHITE);
		btnStart.setForeground(Color.RED);
		btnStart.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnStart.setBounds(212, 453, 125, 43);
		panel.add(btnStart);
		
		lblNewLabel_2 = new JLabel("");
		lblNewLabel_2.setVisible(false);
		lblNewLabel_2.setForeground(Color.WHITE);
		lblNewLabel_2.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_2.setBounds(317, 90, 125, 129);
		panel.add(lblNewLabel_2);
		
		lblNewLabel_3 = new JLabel("");
		lblNewLabel_3.setVisible(false);
		lblNewLabel_3.setForeground(Color.WHITE);
		lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_3.setBounds(215, 90, 300, 200);
		panel.add(lblNewLabel_3);
		
		lblNewLabel_4 = new JLabel("");
		lblNewLabel_4.addMouseListener(new MouseAdapter() {
			public void mouseReleased(MouseEvent e) {
				
			}
		});
		lblNewLabel_4.setVisible(false);
		lblNewLabel_4.setForeground(Color.WHITE);
		lblNewLabel_4.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_4.setBounds(121, 90, 103, 129);
		panel.add(lblNewLabel_4);
				
		textField = new JTextField();
		textField.setHorizontalAlignment(SwingConstants.RIGHT);
		textField.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField.setVisible(false);
		textField.setBounds(121, 261, 324, 49);
		panel.add(textField);
		textField.setColumns(10);
		
		textField1 = new JTextField();
		textField1.setHorizontalAlignment(SwingConstants.RIGHT);
		textField1.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField1.setVisible(false);
		textField1.setBounds(121, 261, 324, 49);
		panel.add(textField1);
		textField1.setColumns(10);
		
		returnButton = new JButton("Return");
		returnButton.setVisible(false);
		returnButton.setFont(new Font("Tahoma", Font.BOLD, 20));
		returnButton.setForeground(Color.RED);
		returnButton.setBackground(Color.WHITE);
		returnButton.setBounds(225, 363, 126, 43);
		panel.add(returnButton);
		
		
		returnButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel.setVisible(true);
				rdbtnEasy.setVisible(true);
				rdbtnAverage.setVisible(true);
				rdbtnDifficult.setVisible(true);
				lblNewLabel_1_2_3.setVisible(true);
				lblNewLabel_1_2_1.setVisible(true);
				lblNewLabel_1_2_2.setVisible(true);
				lblNewLabel_1_1.setVisible(true);
				lblNewLabel_1.setVisible(true);
				lblNewLabel_1_2.setVisible(true);
				lblNewLabel_1_2_4.setVisible(true);
				btnStart.setVisible(true);
				returnButton.setVisible(false);
				lblNewLabel_3.setVisible(false);
				lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
			}

		
			
			
		});
		
		btnNewButton_1 = new JButton("SUBMIT");
		btnNewButton_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				
				
				double result = getResult(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
				
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
				
			}
		});
		btnNewButton_1.setVisible(false);
		btnNewButton_1.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_1.setForeground(Color.RED);
		btnNewButton_1.setBackground(Color.WHITE);
		btnNewButton_1.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_1);
		
		//Button 2
		btnNewButton_2 = new JButton("SUBMIT");
		btnNewButton_2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				double result = getResultAverage(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
			
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
			}
		});
		btnNewButton_2.setVisible(false);
		btnNewButton_2.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_2.setForeground(Color.RED);
		btnNewButton_2.setBackground(Color.WHITE);
		btnNewButton_2.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_2);
		
		
		textField2 = new JTextField();
		textField2.setHorizontalAlignment(SwingConstants.RIGHT);
		textField2.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField2.setVisible(false);
		textField2.setBounds(121, 261, 324, 49);
		panel.add(textField2);
		textField2.setColumns(10);
		
		btnNewButton_3 = new JButton("SUBMIT");
		btnNewButton_3.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel_2.setVisible(false);
				
				textField.setVisible(false);
				textField1.setVisible(false);
				btnNewButton_1.setVisible(false);
				btnNewButton_2.setVisible(false);
				
				textField2.setVisible(false);
				btnNewButton_3.setVisible(false);
				
				
				
			}
		});
		btnNewButton_3.setVisible(false);
		btnNewButton_3.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_3.setForeground(Color.RED);
		btnNewButton_3.setBackground(Color.WHITE);
		btnNewButton_3.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_3);
		
		
	}
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-04-30 17:32:41.294
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-04-30 17:32:41.294
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-30 17:32:42.538
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import java.awt.Color;
import java.awt.Toolkit;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

import java.awt.Font;
import javax.swing.JRadioButton;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Arrays;
import java.util.Random;


public class Main extends JFrame {

	private JPanel contentPane;
	private JLabel lblNewLabel_1_2;
	private JLabel lblNewLabel_1;
	private JLabel lblNewLabel_1_1; 
	private JLabel lblNewLabel_1_2_1;
	private JLabel lblNewLabel_1_2_2;
	private JLabel lblNewLabel_1_2_3;
	private JLabel lblNewLabel_1_2_4;
	private JRadioButton rdbtnEasy;
	private JRadioButton rdbtnAverage;
	private JRadioButton rdbtnDifficult;
	private JButton btnStart; 
	private JLabel lblNewLabel;
	private JLabel lblNewLabel_2;
	private JLabel lblNewLabel_3;
	private JLabel lblNewLabel_4;
	private JTextField textField;
	private JButton btnNewButton_1;
	private JTextField textField1;
	private JButton btnNewButton_2;
	private JButton returnButton;

	private JTextField textField2;
	private JButton btnNewButton_3;
	int currentQuestionNumber = 1;
	int playerScore = 0;
	Random random = new Random();
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Main frame = new Main();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
	
	
	
	

	/**
	 * Create the frame.
	 */
	
	
	public int findIndex(char operand) {
		char[] operandOrder = {'-', '+', '/', '*'};
		int index = 0;
		
		for(int i = 0; i < operandOrder.length; i++) {
			if(operand == operandOrder[i]) index = i;
		}
		return index;
	}
	
	public double getResult(String question) {
		char[] questionData = question.toCharArray(); 
		
		char operand = questionData[1];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double result = 0;
		
		if(operand == '+') result = firstNumber + secondNumber;
		if(operand == '-') result = firstNumber - secondNumber;
		if(operand == '*') result = firstNumber * secondNumber;
		if(operand == '/') result = firstNumber / secondNumber;
		double roundedResult = Math.round(result);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	public double getResultAverage(String question) {
		char[] questionData = question.toCharArray(); 
		
		char firstOperand = questionData[1];
		char secondOperand = questionData[3];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double thirdNumber = Double.parseDouble(String.valueOf(questionData[4]));
		double result = 0;
		
		
		char[] operandOrder = {'-', '+', '/', '*'};
		int indexFirst = findIndex(firstOperand);
		int indexSecond = findIndex(secondOperand);
		double totalResult = 0;
		double initialResult = 0;
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+') initialResult = secondNumber + thirdNumber;
			if(secondOperand == '-') initialResult = secondNumber - thirdNumber;
			if(secondOperand == '*') initialResult = secondNumber * thirdNumber;
			if(secondOperand == '/') initialResult = secondNumber / thirdNumber;
			
			
		}
		else if (indexSecond < indexFirst) {
			if(firstOperand == '+') initialResult = firstNumber + secondNumber;
			if(firstOperand == '-') initialResult = firstNumber - secondNumber;
			if(firstOperand == '*') initialResult = firstNumber * secondNumber;
			if(firstOperand == '/') initialResult = firstNumber / secondNumber;
		}
		else {
			if(firstOperand == '+') totalResult = firstNumber + secondNumber + thirdNumber;
			if(firstOperand == '-') totalResult = firstNumber - secondNumber - thirdNumber;
			if(firstOperand == '*') totalResult = firstNumber * secondNumber * thirdNumber;
			if(firstOperand == '/') totalResult = firstNumber / secondNumber / thirdNumber;
		}
		
		
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+')  totalResult = firstNumber + thirdNumber;
			if(secondOperand == '-')  totalResult = firstNumber - thirdNumber;
			if(secondOperand == '*')  totalResult = firstNumber * thirdNumber;
			if(secondOperand == '/')  totalResult = firstNumber / thirdNumber;
			
			
		}
		else (indexSecond < indexFirst) {
			if(firstOperand == '+')  totalResult = initialResult + thirdNumber;
			if(firstOperand == '-')  totalResult = initialResult - thirdNumber;
			if(firstOperand == '*')  totalResult = initialResult * thirdNumber;
			if(firstOperand == '/')  totalResult = initialResult / thirdNumber;
		}
		
		
		
		
		
		double roundedResult = Math.round(totalResult);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	
	public String generateQuestion() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond];
		
		return question;
	}
	
	public String generateQuestionAverage() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexThird = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		int randomIndexOperand2 = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond] + operands[randomIndexOperand2] + numbers[randomIndexThird];
		System.out.println(question);
		return question;
	}
	
	
	public Main() {
		setIconImage(Toolkit.getDefaultToolkit().getImage("C:\\Users\\user\\Downloads\\quiz.png"));
		setTitle("QUIZ GAME");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(400, 100, 600, 600);
		contentPane = new JPanel();
		contentPane.setBackground(Color.WHITE);
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));

		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JPanel panel = new JPanel();
		panel.setBackground(Color.RED);
		panel.setBounds(10, 0, 564, 550);
		contentPane.add(panel);
		panel.setLayout(null);
		
		lblNewLabel_1_2_4 = new JLabel("quiz");
		lblNewLabel_1_2_4.setForeground(Color.WHITE);
		lblNewLabel_1_2_4.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_4.setBounds(140, 130, 561, 120);
		panel.add(lblNewLabel_1_2_4);
		
		lblNewLabel_1_2 = new JLabel("MATH");
		lblNewLabel_1_2.setForeground(Color.WHITE);
		lblNewLabel_1_2.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_2.setBounds(70, 50, 561, 120);
		panel.add(lblNewLabel_1_2);
		
		lblNewLabel_1 = new JLabel("MATH");
		lblNewLabel_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1.setForeground(Color.DARK_GRAY);
		lblNewLabel_1.setBounds(78, 50, 777, 120);
		panel.add(lblNewLabel_1);
		
		lblNewLabel_1_1 = new JLabel("MATH");
		lblNewLabel_1_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_1.setBounds(89, 50, 612, 120);
		panel.add(lblNewLabel_1_1);
		
		lblNewLabel_1_2_2 = new JLabel("quiz");
		lblNewLabel_1_2_2.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_2.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_2.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_2);
		
		lblNewLabel_1_2_1 = new JLabel("quiz");
		lblNewLabel_1_2_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_2_1.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_1.setBounds(159, 130, 561, 120);
		panel.add(lblNewLabel_1_2_1);
		
		lblNewLabel_1_2_3 = new JLabel("quiz");
		lblNewLabel_1_2_3.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_3.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_3.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_3);
		
		lblNewLabel = new JLabel("");
		lblNewLabel.setFont(new Font("Dialog", Font.BOLD, 9));
		lblNewLabel.setBounds(225, 428, 161, 14);
		panel.add(lblNewLabel);
		
		rdbtnEasy = new JRadioButton("EASY");
		rdbtnEasy.setForeground(Color.WHITE);
		rdbtnEasy.setBackground(Color.RED);
		rdbtnEasy.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnEasy.setBounds(215, 232, 269, 78);
		panel.add(rdbtnEasy);
		
		rdbtnAverage = new JRadioButton("AVERAGE");
		rdbtnAverage.setForeground(Color.WHITE);
		rdbtnAverage.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnAverage.setBackground(Color.RED);
		rdbtnAverage.setBounds(188, 290, 269, 73);
		panel.add(rdbtnAverage);
		
		rdbtnDifficult = new JRadioButton("DIFFICULT");
		rdbtnDifficult.setForeground(Color.WHITE);
		rdbtnDifficult.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnDifficult.setBackground(Color.RED);
		rdbtnDifficult.setBounds(176, 342, 269, 68);
		panel.add(rdbtnDifficult);
		
		ButtonGroup difficulty = new ButtonGroup();
		difficulty.add(rdbtnEasy);
		difficulty.add(rdbtnAverage);
		difficulty.add(rdbtnDifficult);
		
		btnStart = new JButton("START");
		
		
	
		
		btnStart.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
			if(rdbtnEasy.isSelected()){
				///////////
				
 				lblNewLabel_3.setText(generateQuestion());
 				
 				
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_1.setVisible(true);
				
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnAverage.isSelected()){
				
				lblNewLabel_3.setText(generateQuestionAverage());
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_2.setVisible(true);
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnDifficult.isSelected()){
				
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			}
		});
		btnStart.setBackground(Color.WHITE);
		btnStart.setForeground(Color.RED);
		btnStart.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnStart.setBounds(212, 453, 125, 43);
		panel.add(btnStart);
		
		lblNewLabel_2 = new JLabel("");
		lblNewLabel_2.setVisible(false);
		lblNewLabel_2.setForeground(Color.WHITE);
		lblNewLabel_2.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_2.setBounds(317, 90, 125, 129);
		panel.add(lblNewLabel_2);
		
		lblNewLabel_3 = new JLabel("");
		lblNewLabel_3.setVisible(false);
		lblNewLabel_3.setForeground(Color.WHITE);
		lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_3.setBounds(215, 90, 300, 200);
		panel.add(lblNewLabel_3);
		
		lblNewLabel_4 = new JLabel("");
		lblNewLabel_4.addMouseListener(new MouseAdapter() {
			public void mouseReleased(MouseEvent e) {
				
			}
		});
		lblNewLabel_4.setVisible(false);
		lblNewLabel_4.setForeground(Color.WHITE);
		lblNewLabel_4.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_4.setBounds(121, 90, 103, 129);
		panel.add(lblNewLabel_4);
				
		textField = new JTextField();
		textField.setHorizontalAlignment(SwingConstants.RIGHT);
		textField.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField.setVisible(false);
		textField.setBounds(121, 261, 324, 49);
		panel.add(textField);
		textField.setColumns(10);
		
		textField1 = new JTextField();
		textField1.setHorizontalAlignment(SwingConstants.RIGHT);
		textField1.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField1.setVisible(false);
		textField1.setBounds(121, 261, 324, 49);
		panel.add(textField1);
		textField1.setColumns(10);
		
		returnButton = new JButton("Return");
		returnButton.setVisible(false);
		returnButton.setFont(new Font("Tahoma", Font.BOLD, 20));
		returnButton.setForeground(Color.RED);
		returnButton.setBackground(Color.WHITE);
		returnButton.setBounds(225, 363, 126, 43);
		panel.add(returnButton);
		
		
		returnButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel.setVisible(true);
				rdbtnEasy.setVisible(true);
				rdbtnAverage.setVisible(true);
				rdbtnDifficult.setVisible(true);
				lblNewLabel_1_2_3.setVisible(true);
				lblNewLabel_1_2_1.setVisible(true);
				lblNewLabel_1_2_2.setVisible(true);
				lblNewLabel_1_1.setVisible(true);
				lblNewLabel_1.setVisible(true);
				lblNewLabel_1_2.setVisible(true);
				lblNewLabel_1_2_4.setVisible(true);
				btnStart.setVisible(true);
				returnButton.setVisible(false);
				lblNewLabel_3.setVisible(false);
				lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
			}

		
			
			
		});
		
		btnNewButton_1 = new JButton("SUBMIT");
		btnNewButton_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				
				
				double result = getResult(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
				
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
				
			}
		});
		btnNewButton_1.setVisible(false);
		btnNewButton_1.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_1.setForeground(Color.RED);
		btnNewButton_1.setBackground(Color.WHITE);
		btnNewButton_1.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_1);
		
		//Button 2
		btnNewButton_2 = new JButton("SUBMIT");
		btnNewButton_2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				double result = getResultAverage(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
			
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
			}
		});
		btnNewButton_2.setVisible(false);
		btnNewButton_2.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_2.setForeground(Color.RED);
		btnNewButton_2.setBackground(Color.WHITE);
		btnNewButton_2.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_2);
		
		
		textField2 = new JTextField();
		textField2.setHorizontalAlignment(SwingConstants.RIGHT);
		textField2.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField2.setVisible(false);
		textField2.setBounds(121, 261, 324, 49);
		panel.add(textField2);
		textField2.setColumns(10);
		
		btnNewButton_3 = new JButton("SUBMIT");
		btnNewButton_3.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel_2.setVisible(false);
				
				textField.setVisible(false);
				textField1.setVisible(false);
				btnNewButton_1.setVisible(false);
				btnNewButton_2.setVisible(false);
				
				textField2.setVisible(false);
				btnNewButton_3.setVisible(false);
				
				
				
			}
		});
		btnNewButton_3.setVisible(false);
		btnNewButton_3.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_3.setForeground(Color.RED);
		btnNewButton_3.setBackground(Color.WHITE);
		btnNewButton_3.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_3);
		
		
	}
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-04-30 17:32:42.539
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-04-30 17:32:42.540
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-30 17:32:46.186
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import java.awt.Color;
import java.awt.Toolkit;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

import java.awt.Font;
import javax.swing.JRadioButton;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Arrays;
import java.util.Random;


public class Main extends JFrame {

	private JPanel contentPane;
	private JLabel lblNewLabel_1_2;
	private JLabel lblNewLabel_1;
	private JLabel lblNewLabel_1_1; 
	private JLabel lblNewLabel_1_2_1;
	private JLabel lblNewLabel_1_2_2;
	private JLabel lblNewLabel_1_2_3;
	private JLabel lblNewLabel_1_2_4;
	private JRadioButton rdbtnEasy;
	private JRadioButton rdbtnAverage;
	private JRadioButton rdbtnDifficult;
	private JButton btnStart; 
	private JLabel lblNewLabel;
	private JLabel lblNewLabel_2;
	private JLabel lblNewLabel_3;
	private JLabel lblNewLabel_4;
	private JTextField textField;
	private JButton btnNewButton_1;
	private JTextField textField1;
	private JButton btnNewButton_2;
	private JButton returnButton;

	private JTextField textField2;
	private JButton btnNewButton_3;
	int currentQuestionNumber = 1;
	int playerScore = 0;
	Random random = new Random();
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Main frame = new Main();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
	
	
	
	

	/**
	 * Create the frame.
	 */
	
	
	public int findIndex(char operand) {
		char[] operandOrder = {'-', '+', '/', '*'};
		int index = 0;
		
		for(int i = 0; i < operandOrder.length; i++) {
			if(operand == operandOrder[i]) index = i;
		}
		return index;
	}
	
	public double getResult(String question) {
		char[] questionData = question.toCharArray(); 
		
		char operand = questionData[1];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double result = 0;
		
		if(operand == '+') result = firstNumber + secondNumber;
		if(operand == '-') result = firstNumber - secondNumber;
		if(operand == '*') result = firstNumber * secondNumber;
		if(operand == '/') result = firstNumber / secondNumber;
		double roundedResult = Math.round(result);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	public double getResultAverage(String question) {
		char[] questionData = question.toCharArray(); 
		
		char firstOperand = questionData[1];
		char secondOperand = questionData[3];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double thirdNumber = Double.parseDouble(String.valueOf(questionData[4]));
		double result = 0;
		
		
		char[] operandOrder = {'-', '+', '/', '*'};
		int indexFirst = findIndex(firstOperand);
		int indexSecond = findIndex(secondOperand);
		double totalResult = 0;
		double initialResult = 0;
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+') initialResult = secondNumber + thirdNumber;
			if(secondOperand == '-') initialResult = secondNumber - thirdNumber;
			if(secondOperand == '*') initialResult = secondNumber * thirdNumber;
			if(secondOperand == '/') initialResult = secondNumber / thirdNumber;
			
			
		}
		else if (indexSecond < indexFirst) {
			if(firstOperand == '+') initialResult = firstNumber + secondNumber;
			if(firstOperand == '-') initialResult = firstNumber - secondNumber;
			if(firstOperand == '*') initialResult = firstNumber * secondNumber;
			if(firstOperand == '/') initialResult = firstNumber / secondNumber;
		}
		else {
			if(firstOperand == '+') totalResult = firstNumber + secondNumber + thirdNumber;
			if(firstOperand == '-') totalResult = firstNumber - secondNumber - thirdNumber;
			if(firstOperand == '*') totalResult = firstNumber * secondNumber * thirdNumber;
			if(firstOperand == '/') totalResult = firstNumber / secondNumber / thirdNumber;
		}
		
		
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+')  totalResult = firstNumber + thirdNumber;
			if(secondOperand == '-')  totalResult = firstNumber - thirdNumber;
			if(secondOperand == '*')  totalResult = firstNumber * thirdNumber;
			if(secondOperand == '/')  totalResult = firstNumber / thirdNumber;
			
			
		}
		else (indexSecond < indexFirst) {
			if(firstOperand == '+')  totalResult = initialResult + thirdNumber;
			if(firstOperand == '-')  totalResult = initialResult - thirdNumber;
			if(firstOperand == '*')  totalResult = initialResult * thirdNumber;
			if(firstOperand == '/')  totalResult = initialResult / thirdNumber;
		}
		
		
		
		
		
		double roundedResult = Math.round(totalResult);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	
	public String generateQuestion() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond];
		
		return question;
	}
	
	public String generateQuestionAverage() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexThird = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		int randomIndexOperand2 = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond] + operands[randomIndexOperand2] + numbers[randomIndexThird];
		System.out.println(question);
		return question;
	}
	
	
	public Main() {
		setIconImage(Toolkit.getDefaultToolkit().getImage("C:\\Users\\user\\Downloads\\quiz.png"));
		setTitle("QUIZ GAME");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(400, 100, 600, 600);
		contentPane = new JPanel();
		contentPane.setBackground(Color.WHITE);
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));

		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JPanel panel = new JPanel();
		panel.setBackground(Color.RED);
		panel.setBounds(10, 0, 564, 550);
		contentPane.add(panel);
		panel.setLayout(null);
		
		lblNewLabel_1_2_4 = new JLabel("quiz");
		lblNewLabel_1_2_4.setForeground(Color.WHITE);
		lblNewLabel_1_2_4.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_4.setBounds(140, 130, 561, 120);
		panel.add(lblNewLabel_1_2_4);
		
		lblNewLabel_1_2 = new JLabel("MATH");
		lblNewLabel_1_2.setForeground(Color.WHITE);
		lblNewLabel_1_2.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_2.setBounds(70, 50, 561, 120);
		panel.add(lblNewLabel_1_2);
		
		lblNewLabel_1 = new JLabel("MATH");
		lblNewLabel_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1.setForeground(Color.DARK_GRAY);
		lblNewLabel_1.setBounds(78, 50, 777, 120);
		panel.add(lblNewLabel_1);
		
		lblNewLabel_1_1 = new JLabel("MATH");
		lblNewLabel_1_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_1.setBounds(89, 50, 612, 120);
		panel.add(lblNewLabel_1_1);
		
		lblNewLabel_1_2_2 = new JLabel("quiz");
		lblNewLabel_1_2_2.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_2.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_2.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_2);
		
		lblNewLabel_1_2_1 = new JLabel("quiz");
		lblNewLabel_1_2_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_2_1.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_1.setBounds(159, 130, 561, 120);
		panel.add(lblNewLabel_1_2_1);
		
		lblNewLabel_1_2_3 = new JLabel("quiz");
		lblNewLabel_1_2_3.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_3.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_3.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_3);
		
		lblNewLabel = new JLabel("");
		lblNewLabel.setFont(new Font("Dialog", Font.BOLD, 9));
		lblNewLabel.setBounds(225, 428, 161, 14);
		panel.add(lblNewLabel);
		
		rdbtnEasy = new JRadioButton("EASY");
		rdbtnEasy.setForeground(Color.WHITE);
		rdbtnEasy.setBackground(Color.RED);
		rdbtnEasy.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnEasy.setBounds(215, 232, 269, 78);
		panel.add(rdbtnEasy);
		
		rdbtnAverage = new JRadioButton("AVERAGE");
		rdbtnAverage.setForeground(Color.WHITE);
		rdbtnAverage.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnAverage.setBackground(Color.RED);
		rdbtnAverage.setBounds(188, 290, 269, 73);
		panel.add(rdbtnAverage);
		
		rdbtnDifficult = new JRadioButton("DIFFICULT");
		rdbtnDifficult.setForeground(Color.WHITE);
		rdbtnDifficult.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnDifficult.setBackground(Color.RED);
		rdbtnDifficult.setBounds(176, 342, 269, 68);
		panel.add(rdbtnDifficult);
		
		ButtonGroup difficulty = new ButtonGroup();
		difficulty.add(rdbtnEasy);
		difficulty.add(rdbtnAverage);
		difficulty.add(rdbtnDifficult);
		
		btnStart = new JButton("START");
		
		
	
		
		btnStart.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
			if(rdbtnEasy.isSelected()){
				///////////
				
 				lblNewLabel_3.setText(generateQuestion());
 				
 				
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_1.setVisible(true);
				
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnAverage.isSelected()){
				
				lblNewLabel_3.setText(generateQuestionAverage());
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_2.setVisible(true);
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnDifficult.isSelected()){
				
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			}
		});
		btnStart.setBackground(Color.WHITE);
		btnStart.setForeground(Color.RED);
		btnStart.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnStart.setBounds(212, 453, 125, 43);
		panel.add(btnStart);
		
		lblNewLabel_2 = new JLabel("");
		lblNewLabel_2.setVisible(false);
		lblNewLabel_2.setForeground(Color.WHITE);
		lblNewLabel_2.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_2.setBounds(317, 90, 125, 129);
		panel.add(lblNewLabel_2);
		
		lblNewLabel_3 = new JLabel("");
		lblNewLabel_3.setVisible(false);
		lblNewLabel_3.setForeground(Color.WHITE);
		lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_3.setBounds(215, 90, 300, 200);
		panel.add(lblNewLabel_3);
		
		lblNewLabel_4 = new JLabel("");
		lblNewLabel_4.addMouseListener(new MouseAdapter() {
			public void mouseReleased(MouseEvent e) {
				
			}
		});
		lblNewLabel_4.setVisible(false);
		lblNewLabel_4.setForeground(Color.WHITE);
		lblNewLabel_4.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_4.setBounds(121, 90, 103, 129);
		panel.add(lblNewLabel_4);
				
		textField = new JTextField();
		textField.setHorizontalAlignment(SwingConstants.RIGHT);
		textField.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField.setVisible(false);
		textField.setBounds(121, 261, 324, 49);
		panel.add(textField);
		textField.setColumns(10);
		
		textField1 = new JTextField();
		textField1.setHorizontalAlignment(SwingConstants.RIGHT);
		textField1.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField1.setVisible(false);
		textField1.setBounds(121, 261, 324, 49);
		panel.add(textField1);
		textField1.setColumns(10);
		
		returnButton = new JButton("Return");
		returnButton.setVisible(false);
		returnButton.setFont(new Font("Tahoma", Font.BOLD, 20));
		returnButton.setForeground(Color.RED);
		returnButton.setBackground(Color.WHITE);
		returnButton.setBounds(225, 363, 126, 43);
		panel.add(returnButton);
		
		
		returnButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel.setVisible(true);
				rdbtnEasy.setVisible(true);
				rdbtnAverage.setVisible(true);
				rdbtnDifficult.setVisible(true);
				lblNewLabel_1_2_3.setVisible(true);
				lblNewLabel_1_2_1.setVisible(true);
				lblNewLabel_1_2_2.setVisible(true);
				lblNewLabel_1_1.setVisible(true);
				lblNewLabel_1.setVisible(true);
				lblNewLabel_1_2.setVisible(true);
				lblNewLabel_1_2_4.setVisible(true);
				btnStart.setVisible(true);
				returnButton.setVisible(false);
				lblNewLabel_3.setVisible(false);
				lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
			}

		
			
			
		});
		
		btnNewButton_1 = new JButton("SUBMIT");
		btnNewButton_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				
				
				double result = getResult(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
				
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
				
			}
		});
		btnNewButton_1.setVisible(false);
		btnNewButton_1.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_1.setForeground(Color.RED);
		btnNewButton_1.setBackground(Color.WHITE);
		btnNewButton_1.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_1);
		
		//Button 2
		btnNewButton_2 = new JButton("SUBMIT");
		btnNewButton_2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				double result = getResultAverage(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
			
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
			}
		});
		btnNewButton_2.setVisible(false);
		btnNewButton_2.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_2.setForeground(Color.RED);
		btnNewButton_2.setBackground(Color.WHITE);
		btnNewButton_2.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_2);
		
		
		textField2 = new JTextField();
		textField2.setHorizontalAlignment(SwingConstants.RIGHT);
		textField2.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField2.setVisible(false);
		textField2.setBounds(121, 261, 324, 49);
		panel.add(textField2);
		textField2.setColumns(10);
		
		btnNewButton_3 = new JButton("SUBMIT");
		btnNewButton_3.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel_2.setVisible(false);
				
				textField.setVisible(false);
				textField1.setVisible(false);
				btnNewButton_1.setVisible(false);
				btnNewButton_2.setVisible(false);
				
				textField2.setVisible(false);
				btnNewButton_3.setVisible(false);
				
				
				
			}
		});
		btnNewButton_3.setVisible(false);
		btnNewButton_3.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_3.setForeground(Color.RED);
		btnNewButton_3.setBackground(Color.WHITE);
		btnNewButton_3.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_3);
		
		
	}
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-04-30 17:32:46.187
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-04-30 17:32:46.187
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-30 17:32:47.830
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import java.awt.Color;
import java.awt.Toolkit;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

import java.awt.Font;
import javax.swing.JRadioButton;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Arrays;
import java.util.Random;


public class Main extends JFrame {

	private JPanel contentPane;
	private JLabel lblNewLabel_1_2;
	private JLabel lblNewLabel_1;
	private JLabel lblNewLabel_1_1; 
	private JLabel lblNewLabel_1_2_1;
	private JLabel lblNewLabel_1_2_2;
	private JLabel lblNewLabel_1_2_3;
	private JLabel lblNewLabel_1_2_4;
	private JRadioButton rdbtnEasy;
	private JRadioButton rdbtnAverage;
	private JRadioButton rdbtnDifficult;
	private JButton btnStart; 
	private JLabel lblNewLabel;
	private JLabel lblNewLabel_2;
	private JLabel lblNewLabel_3;
	private JLabel lblNewLabel_4;
	private JTextField textField;
	private JButton btnNewButton_1;
	private JTextField textField1;
	private JButton btnNewButton_2;
	private JButton returnButton;

	private JTextField textField2;
	private JButton btnNewButton_3;
	int currentQuestionNumber = 1;
	int playerScore = 0;
	Random random = new Random();
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Main frame = new Main();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
	
	
	
	

	/**
	 * Create the frame.
	 */
	
	
	public int findIndex(char operand) {
		char[] operandOrder = {'-', '+', '/', '*'};
		int index = 0;
		
		for(int i = 0; i < operandOrder.length; i++) {
			if(operand == operandOrder[i]) index = i;
		}
		return index;
	}
	
	public double getResult(String question) {
		char[] questionData = question.toCharArray(); 
		
		char operand = questionData[1];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double result = 0;
		
		if(operand == '+') result = firstNumber + secondNumber;
		if(operand == '-') result = firstNumber - secondNumber;
		if(operand == '*') result = firstNumber * secondNumber;
		if(operand == '/') result = firstNumber / secondNumber;
		double roundedResult = Math.round(result);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	public double getResultAverage(String question) {
		char[] questionData = question.toCharArray(); 
		
		char firstOperand = questionData[1];
		char secondOperand = questionData[3];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double thirdNumber = Double.parseDouble(String.valueOf(questionData[4]));
		double result = 0;
		
		
		char[] operandOrder = {'-', '+', '/', '*'};
		int indexFirst = findIndex(firstOperand);
		int indexSecond = findIndex(secondOperand);
		double totalResult = 0;
		double initialResult = 0;
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+') initialResult = secondNumber + thirdNumber;
			if(secondOperand == '-') initialResult = secondNumber - thirdNumber;
			if(secondOperand == '*') initialResult = secondNumber * thirdNumber;
			if(secondOperand == '/') initialResult = secondNumber / thirdNumber;
			
			
		}
		else if (indexSecond < indexFirst) {
			if(firstOperand == '+') initialResult = firstNumber + secondNumber;
			if(firstOperand == '-') initialResult = firstNumber - secondNumber;
			if(firstOperand == '*') initialResult = firstNumber * secondNumber;
			if(firstOperand == '/') initialResult = firstNumber / secondNumber;
		}
		else {
			if(firstOperand == '+') totalResult = firstNumber + secondNumber + thirdNumber;
			if(firstOperand == '-') totalResult = firstNumber - secondNumber - thirdNumber;
			if(firstOperand == '*') totalResult = firstNumber * secondNumber * thirdNumber;
			if(firstOperand == '/') totalResult = firstNumber / secondNumber / thirdNumber;
		}
		
		
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+')  totalResult = firstNumber + thirdNumber;
			if(secondOperand == '-')  totalResult = firstNumber - thirdNumber;
			if(secondOperand == '*')  totalResult = firstNumber * thirdNumber;
			if(secondOperand == '/')  totalResult = firstNumber / thirdNumber;
			
			
		}
		else (indexSecond < indexFirst) {
			if(firstOperand == '+')  totalResult = initialResult + thirdNumber;
			if(firstOperand == '-')  totalResult = initialResult - thirdNumber;
			if(firstOperand == '*')  totalResult = initialResult * thirdNumber;
			if(firstOperand == '/')  totalResult = initialResult / thirdNumber;
		}
		
		
		
		
		
		double roundedResult = Math.round(totalResult);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	
	public String generateQuestion() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond];
		
		return question;
	}
	
	public String generateQuestionAverage() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexThird = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		int randomIndexOperand2 = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond] + operands[randomIndexOperand2] + numbers[randomIndexThird];
		System.out.println(question);
		return question;
	}
	
	
	public Main() {
		setIconImage(Toolkit.getDefaultToolkit().getImage("C:\\Users\\user\\Downloads\\quiz.png"));
		setTitle("QUIZ GAME");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(400, 100, 600, 600);
		contentPane = new JPanel();
		contentPane.setBackground(Color.WHITE);
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));

		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JPanel panel = new JPanel();
		panel.setBackground(Color.RED);
		panel.setBounds(10, 0, 564, 550);
		contentPane.add(panel);
		panel.setLayout(null);
		
		lblNewLabel_1_2_4 = new JLabel("quiz");
		lblNewLabel_1_2_4.setForeground(Color.WHITE);
		lblNewLabel_1_2_4.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_4.setBounds(140, 130, 561, 120);
		panel.add(lblNewLabel_1_2_4);
		
		lblNewLabel_1_2 = new JLabel("MATH");
		lblNewLabel_1_2.setForeground(Color.WHITE);
		lblNewLabel_1_2.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_2.setBounds(70, 50, 561, 120);
		panel.add(lblNewLabel_1_2);
		
		lblNewLabel_1 = new JLabel("MATH");
		lblNewLabel_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1.setForeground(Color.DARK_GRAY);
		lblNewLabel_1.setBounds(78, 50, 777, 120);
		panel.add(lblNewLabel_1);
		
		lblNewLabel_1_1 = new JLabel("MATH");
		lblNewLabel_1_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_1.setBounds(89, 50, 612, 120);
		panel.add(lblNewLabel_1_1);
		
		lblNewLabel_1_2_2 = new JLabel("quiz");
		lblNewLabel_1_2_2.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_2.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_2.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_2);
		
		lblNewLabel_1_2_1 = new JLabel("quiz");
		lblNewLabel_1_2_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_2_1.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_1.setBounds(159, 130, 561, 120);
		panel.add(lblNewLabel_1_2_1);
		
		lblNewLabel_1_2_3 = new JLabel("quiz");
		lblNewLabel_1_2_3.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_3.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_3.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_3);
		
		lblNewLabel = new JLabel("");
		lblNewLabel.setFont(new Font("Dialog", Font.BOLD, 9));
		lblNewLabel.setBounds(225, 428, 161, 14);
		panel.add(lblNewLabel);
		
		rdbtnEasy = new JRadioButton("EASY");
		rdbtnEasy.setForeground(Color.WHITE);
		rdbtnEasy.setBackground(Color.RED);
		rdbtnEasy.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnEasy.setBounds(215, 232, 269, 78);
		panel.add(rdbtnEasy);
		
		rdbtnAverage = new JRadioButton("AVERAGE");
		rdbtnAverage.setForeground(Color.WHITE);
		rdbtnAverage.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnAverage.setBackground(Color.RED);
		rdbtnAverage.setBounds(188, 290, 269, 73);
		panel.add(rdbtnAverage);
		
		rdbtnDifficult = new JRadioButton("DIFFICULT");
		rdbtnDifficult.setForeground(Color.WHITE);
		rdbtnDifficult.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnDifficult.setBackground(Color.RED);
		rdbtnDifficult.setBounds(176, 342, 269, 68);
		panel.add(rdbtnDifficult);
		
		ButtonGroup difficulty = new ButtonGroup();
		difficulty.add(rdbtnEasy);
		difficulty.add(rdbtnAverage);
		difficulty.add(rdbtnDifficult);
		
		btnStart = new JButton("START");
		
		
	
		
		btnStart.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
			if(rdbtnEasy.isSelected()){
				///////////
				
 				lblNewLabel_3.setText(generateQuestion());
 				
 				
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_1.setVisible(true);
				
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnAverage.isSelected()){
				
				lblNewLabel_3.setText(generateQuestionAverage());
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_2.setVisible(true);
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnDifficult.isSelected()){
				
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			}
		});
		btnStart.setBackground(Color.WHITE);
		btnStart.setForeground(Color.RED);
		btnStart.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnStart.setBounds(212, 453, 125, 43);
		panel.add(btnStart);
		
		lblNewLabel_2 = new JLabel("");
		lblNewLabel_2.setVisible(false);
		lblNewLabel_2.setForeground(Color.WHITE);
		lblNewLabel_2.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_2.setBounds(317, 90, 125, 129);
		panel.add(lblNewLabel_2);
		
		lblNewLabel_3 = new JLabel("");
		lblNewLabel_3.setVisible(false);
		lblNewLabel_3.setForeground(Color.WHITE);
		lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_3.setBounds(215, 90, 300, 200);
		panel.add(lblNewLabel_3);
		
		lblNewLabel_4 = new JLabel("");
		lblNewLabel_4.addMouseListener(new MouseAdapter() {
			public void mouseReleased(MouseEvent e) {
				
			}
		});
		lblNewLabel_4.setVisible(false);
		lblNewLabel_4.setForeground(Color.WHITE);
		lblNewLabel_4.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_4.setBounds(121, 90, 103, 129);
		panel.add(lblNewLabel_4);
				
		textField = new JTextField();
		textField.setHorizontalAlignment(SwingConstants.RIGHT);
		textField.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField.setVisible(false);
		textField.setBounds(121, 261, 324, 49);
		panel.add(textField);
		textField.setColumns(10);
		
		textField1 = new JTextField();
		textField1.setHorizontalAlignment(SwingConstants.RIGHT);
		textField1.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField1.setVisible(false);
		textField1.setBounds(121, 261, 324, 49);
		panel.add(textField1);
		textField1.setColumns(10);
		
		returnButton = new JButton("Return");
		returnButton.setVisible(false);
		returnButton.setFont(new Font("Tahoma", Font.BOLD, 20));
		returnButton.setForeground(Color.RED);
		returnButton.setBackground(Color.WHITE);
		returnButton.setBounds(225, 363, 126, 43);
		panel.add(returnButton);
		
		
		returnButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel.setVisible(true);
				rdbtnEasy.setVisible(true);
				rdbtnAverage.setVisible(true);
				rdbtnDifficult.setVisible(true);
				lblNewLabel_1_2_3.setVisible(true);
				lblNewLabel_1_2_1.setVisible(true);
				lblNewLabel_1_2_2.setVisible(true);
				lblNewLabel_1_1.setVisible(true);
				lblNewLabel_1.setVisible(true);
				lblNewLabel_1_2.setVisible(true);
				lblNewLabel_1_2_4.setVisible(true);
				btnStart.setVisible(true);
				returnButton.setVisible(false);
				lblNewLabel_3.setVisible(false);
				lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
			}

		
			
			
		});
		
		btnNewButton_1 = new JButton("SUBMIT");
		btnNewButton_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				
				
				double result = getResult(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
				
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
				
			}
		});
		btnNewButton_1.setVisible(false);
		btnNewButton_1.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_1.setForeground(Color.RED);
		btnNewButton_1.setBackground(Color.WHITE);
		btnNewButton_1.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_1);
		
		//Button 2
		btnNewButton_2 = new JButton("SUBMIT");
		btnNewButton_2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				double result = getResultAverage(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
			
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
			}
		});
		btnNewButton_2.setVisible(false);
		btnNewButton_2.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_2.setForeground(Color.RED);
		btnNewButton_2.setBackground(Color.WHITE);
		btnNewButton_2.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_2);
		
		
		textField2 = new JTextField();
		textField2.setHorizontalAlignment(SwingConstants.RIGHT);
		textField2.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField2.setVisible(false);
		textField2.setBounds(121, 261, 324, 49);
		panel.add(textField2);
		textField2.setColumns(10);
		
		btnNewButton_3 = new JButton("SUBMIT");
		btnNewButton_3.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel_2.setVisible(false);
				
				textField.setVisible(false);
				textField1.setVisible(false);
				btnNewButton_1.setVisible(false);
				btnNewButton_2.setVisible(false);
				
				textField2.setVisible(false);
				btnNewButton_3.setVisible(false);
				
				
				
			}
		});
		btnNewButton_3.setVisible(false);
		btnNewButton_3.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_3.setForeground(Color.RED);
		btnNewButton_3.setBackground(Color.WHITE);
		btnNewButton_3.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_3);
		
		
	}
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:111)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-04-30 17:32:47.831
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:111)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-04-30 17:32:47.832
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:111)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-30 17:32:47.842
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import java.awt.Color;
import java.awt.Toolkit;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

import java.awt.Font;
import javax.swing.JRadioButton;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Arrays;
import java.util.Random;


public class Main extends JFrame {

	private JPanel contentPane;
	private JLabel lblNewLabel_1_2;
	private JLabel lblNewLabel_1;
	private JLabel lblNewLabel_1_1; 
	private JLabel lblNewLabel_1_2_1;
	private JLabel lblNewLabel_1_2_2;
	private JLabel lblNewLabel_1_2_3;
	private JLabel lblNewLabel_1_2_4;
	private JRadioButton rdbtnEasy;
	private JRadioButton rdbtnAverage;
	private JRadioButton rdbtnDifficult;
	private JButton btnStart; 
	private JLabel lblNewLabel;
	private JLabel lblNewLabel_2;
	private JLabel lblNewLabel_3;
	private JLabel lblNewLabel_4;
	private JTextField textField;
	private JButton btnNewButton_1;
	private JTextField textField1;
	private JButton btnNewButton_2;
	private JButton returnButton;

	private JTextField textField2;
	private JButton btnNewButton_3;
	int currentQuestionNumber = 1;
	int playerScore = 0;
	Random random = new Random();
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Main frame = new Main();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
	
	
	
	

	/**
	 * Create the frame.
	 */
	
	
	public int findIndex(char operand) {
		char[] operandOrder = {'-', '+', '/', '*'};
		int index = 0;
		
		for(int i = 0; i < operandOrder.length; i++) {
			if(operand == operandOrder[i]) index = i;
		}
		return index;
	}
	
	public double getResult(String question) {
		char[] questionData = question.toCharArray(); 
		
		char operand = questionData[1];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double result = 0;
		
		if(operand == '+') result = firstNumber + secondNumber;
		if(operand == '-') result = firstNumber - secondNumber;
		if(operand == '*') result = firstNumber * secondNumber;
		if(operand == '/') result = firstNumber / secondNumber;
		double roundedResult = Math.round(result);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	public double getResultAverage(String question) {
		char[] questionData = question.toCharArray(); 
		
		char firstOperand = questionData[1];
		char secondOperand = questionData[3];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double thirdNumber = Double.parseDouble(String.valueOf(questionData[4]));
		double result = 0;
		
		
		char[] operandOrder = {'-', '+', '/', '*'};
		int indexFirst = findIndex(firstOperand);
		int indexSecond = findIndex(secondOperand);
		double totalResult = 0;
		double initialResult = 0;
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+') initialResult = secondNumber + thirdNumber;
			if(secondOperand == '-') initialResult = secondNumber - thirdNumber;
			if(secondOperand == '*') initialResult = secondNumber * thirdNumber;
			if(secondOperand == '/') initialResult = secondNumber / thirdNumber;
			
			
		}
		else if (indexSecond < indexFirst) {
			if(firstOperand == '+') initialResult = firstNumber + secondNumber;
			if(firstOperand == '-') initialResult = firstNumber - secondNumber;
			if(firstOperand == '*') initialResult = firstNumber * secondNumber;
			if(firstOperand == '/') initialResult = firstNumber / secondNumber;
		}
		else {
			if(firstOperand == '+') totalResult = firstNumber + secondNumber + thirdNumber;
			if(firstOperand == '-') totalResult = firstNumber - secondNumber - thirdNumber;
			if(firstOperand == '*') totalResult = firstNumber * secondNumber * thirdNumber;
			if(firstOperand == '/') totalResult = firstNumber / secondNumber / thirdNumber;
		}
		
		
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+')  totalResult = firstNumber + thirdNumber;
			if(secondOperand == '-')  totalResult = firstNumber - thirdNumber;
			if(secondOperand == '*')  totalResult = firstNumber * thirdNumber;
			if(secondOperand == '/')  totalResult = firstNumber / thirdNumber;
			
			
		}
		else (indexSecond < indexFirst) {
			if(firstOperand == '+')  totalResult = initialResult + thirdNumber;
			if(firstOperand == '-')  totalResult = initialResult - thirdNumber;
			if(firstOperand == '*')  totalResult = initialResult * thirdNumber;
			if(firstOperand == '/')  totalResult = initialResult / thirdNumber;
		}
		
		
		
		
		
		double roundedResult = Math.round(totalResult);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	
	public String generateQuestion() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond];
		
		return question;
	}
	
	public String generateQuestionAverage() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexThird = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		int randomIndexOperand2 = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond] + operands[randomIndexOperand2] + numbers[randomIndexThird];
		System.out.println(question);
		return question;
	}
	
	
	public Main() {
		setIconImage(Toolkit.getDefaultToolkit().getImage("C:\\Users\\user\\Downloads\\quiz.png"));
		setTitle("QUIZ GAME");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(400, 100, 600, 600);
		contentPane = new JPanel();
		contentPane.setBackground(Color.WHITE);
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));

		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JPanel panel = new JPanel();
		panel.setBackground(Color.RED);
		panel.setBounds(10, 0, 564, 550);
		contentPane.add(panel);
		panel.setLayout(null);
		
		lblNewLabel_1_2_4 = new JLabel("quiz");
		lblNewLabel_1_2_4.setForeground(Color.WHITE);
		lblNewLabel_1_2_4.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_4.setBounds(140, 130, 561, 120);
		panel.add(lblNewLabel_1_2_4);
		
		lblNewLabel_1_2 = new JLabel("MATH");
		lblNewLabel_1_2.setForeground(Color.WHITE);
		lblNewLabel_1_2.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_2.setBounds(70, 50, 561, 120);
		panel.add(lblNewLabel_1_2);
		
		lblNewLabel_1 = new JLabel("MATH");
		lblNewLabel_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1.setForeground(Color.DARK_GRAY);
		lblNewLabel_1.setBounds(78, 50, 777, 120);
		panel.add(lblNewLabel_1);
		
		lblNewLabel_1_1 = new JLabel("MATH");
		lblNewLabel_1_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_1.setBounds(89, 50, 612, 120);
		panel.add(lblNewLabel_1_1);
		
		lblNewLabel_1_2_2 = new JLabel("quiz");
		lblNewLabel_1_2_2.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_2.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_2.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_2);
		
		lblNewLabel_1_2_1 = new JLabel("quiz");
		lblNewLabel_1_2_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_2_1.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_1.setBounds(159, 130, 561, 120);
		panel.add(lblNewLabel_1_2_1);
		
		lblNewLabel_1_2_3 = new JLabel("quiz");
		lblNewLabel_1_2_3.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_3.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_3.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_3);
		
		lblNewLabel = new JLabel("");
		lblNewLabel.setFont(new Font("Dialog", Font.BOLD, 9));
		lblNewLabel.setBounds(225, 428, 161, 14);
		panel.add(lblNewLabel);
		
		rdbtnEasy = new JRadioButton("EASY");
		rdbtnEasy.setForeground(Color.WHITE);
		rdbtnEasy.setBackground(Color.RED);
		rdbtnEasy.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnEasy.setBounds(215, 232, 269, 78);
		panel.add(rdbtnEasy);
		
		rdbtnAverage = new JRadioButton("AVERAGE");
		rdbtnAverage.setForeground(Color.WHITE);
		rdbtnAverage.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnAverage.setBackground(Color.RED);
		rdbtnAverage.setBounds(188, 290, 269, 73);
		panel.add(rdbtnAverage);
		
		rdbtnDifficult = new JRadioButton("DIFFICULT");
		rdbtnDifficult.setForeground(Color.WHITE);
		rdbtnDifficult.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnDifficult.setBackground(Color.RED);
		rdbtnDifficult.setBounds(176, 342, 269, 68);
		panel.add(rdbtnDifficult);
		
		ButtonGroup difficulty = new ButtonGroup();
		difficulty.add(rdbtnEasy);
		difficulty.add(rdbtnAverage);
		difficulty.add(rdbtnDifficult);
		
		btnStart = new JButton("START");
		
		
	
		
		btnStart.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
			if(rdbtnEasy.isSelected()){
				///////////
				
 				lblNewLabel_3.setText(generateQuestion());
 				
 				
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_1.setVisible(true);
				
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnAverage.isSelected()){
				
				lblNewLabel_3.setText(generateQuestionAverage());
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_2.setVisible(true);
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnDifficult.isSelected()){
				
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			}
		});
		btnStart.setBackground(Color.WHITE);
		btnStart.setForeground(Color.RED);
		btnStart.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnStart.setBounds(212, 453, 125, 43);
		panel.add(btnStart);
		
		lblNewLabel_2 = new JLabel("");
		lblNewLabel_2.setVisible(false);
		lblNewLabel_2.setForeground(Color.WHITE);
		lblNewLabel_2.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_2.setBounds(317, 90, 125, 129);
		panel.add(lblNewLabel_2);
		
		lblNewLabel_3 = new JLabel("");
		lblNewLabel_3.setVisible(false);
		lblNewLabel_3.setForeground(Color.WHITE);
		lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_3.setBounds(215, 90, 300, 200);
		panel.add(lblNewLabel_3);
		
		lblNewLabel_4 = new JLabel("");
		lblNewLabel_4.addMouseListener(new MouseAdapter() {
			public void mouseReleased(MouseEvent e) {
				
			}
		});
		lblNewLabel_4.setVisible(false);
		lblNewLabel_4.setForeground(Color.WHITE);
		lblNewLabel_4.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_4.setBounds(121, 90, 103, 129);
		panel.add(lblNewLabel_4);
				
		textField = new JTextField();
		textField.setHorizontalAlignment(SwingConstants.RIGHT);
		textField.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField.setVisible(false);
		textField.setBounds(121, 261, 324, 49);
		panel.add(textField);
		textField.setColumns(10);
		
		textField1 = new JTextField();
		textField1.setHorizontalAlignment(SwingConstants.RIGHT);
		textField1.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField1.setVisible(false);
		textField1.setBounds(121, 261, 324, 49);
		panel.add(textField1);
		textField1.setColumns(10);
		
		returnButton = new JButton("Return");
		returnButton.setVisible(false);
		returnButton.setFont(new Font("Tahoma", Font.BOLD, 20));
		returnButton.setForeground(Color.RED);
		returnButton.setBackground(Color.WHITE);
		returnButton.setBounds(225, 363, 126, 43);
		panel.add(returnButton);
		
		
		returnButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel.setVisible(true);
				rdbtnEasy.setVisible(true);
				rdbtnAverage.setVisible(true);
				rdbtnDifficult.setVisible(true);
				lblNewLabel_1_2_3.setVisible(true);
				lblNewLabel_1_2_1.setVisible(true);
				lblNewLabel_1_2_2.setVisible(true);
				lblNewLabel_1_1.setVisible(true);
				lblNewLabel_1.setVisible(true);
				lblNewLabel_1_2.setVisible(true);
				lblNewLabel_1_2_4.setVisible(true);
				btnStart.setVisible(true);
				returnButton.setVisible(false);
				lblNewLabel_3.setVisible(false);
				lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
			}

		
			
			
		});
		
		btnNewButton_1 = new JButton("SUBMIT");
		btnNewButton_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				
				
				double result = getResult(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
				
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
				
			}
		});
		btnNewButton_1.setVisible(false);
		btnNewButton_1.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_1.setForeground(Color.RED);
		btnNewButton_1.setBackground(Color.WHITE);
		btnNewButton_1.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_1);
		
		//Button 2
		btnNewButton_2 = new JButton("SUBMIT");
		btnNewButton_2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				double result = getResultAverage(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
			
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
			}
		});
		btnNewButton_2.setVisible(false);
		btnNewButton_2.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_2.setForeground(Color.RED);
		btnNewButton_2.setBackground(Color.WHITE);
		btnNewButton_2.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_2);
		
		
		textField2 = new JTextField();
		textField2.setHorizontalAlignment(SwingConstants.RIGHT);
		textField2.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField2.setVisible(false);
		textField2.setBounds(121, 261, 324, 49);
		panel.add(textField2);
		textField2.setColumns(10);
		
		btnNewButton_3 = new JButton("SUBMIT");
		btnNewButton_3.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel_2.setVisible(false);
				
				textField.setVisible(false);
				textField1.setVisible(false);
				btnNewButton_1.setVisible(false);
				btnNewButton_2.setVisible(false);
				
				textField2.setVisible(false);
				btnNewButton_3.setVisible(false);
				
				
				
			}
		});
		btnNewButton_3.setVisible(false);
		btnNewButton_3.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_3.setForeground(Color.RED);
		btnNewButton_3.setBackground(Color.WHITE);
		btnNewButton_3.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_3);
		
		
	}
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.internal.core.manipulation.dom.ASTResolving.createQuickFixAST(ASTResolving.java:1052)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:131)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:111)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jface.text 4 0 2023-04-30 17:32:47.843
!MESSAGE Unexpected runtime error while computing a text hover
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.internal.core.manipulation.dom.ASTResolving.createQuickFixAST(ASTResolving.java:1052)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:131)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:111)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-30 17:32:54.601
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import java.awt.Color;
import java.awt.Toolkit;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

import java.awt.Font;
import javax.swing.JRadioButton;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Arrays;
import java.util.Random;


public class Main extends JFrame {

	private JPanel contentPane;
	private JLabel lblNewLabel_1_2;
	private JLabel lblNewLabel_1;
	private JLabel lblNewLabel_1_1; 
	private JLabel lblNewLabel_1_2_1;
	private JLabel lblNewLabel_1_2_2;
	private JLabel lblNewLabel_1_2_3;
	private JLabel lblNewLabel_1_2_4;
	private JRadioButton rdbtnEasy;
	private JRadioButton rdbtnAverage;
	private JRadioButton rdbtnDifficult;
	private JButton btnStart; 
	private JLabel lblNewLabel;
	private JLabel lblNewLabel_2;
	private JLabel lblNewLabel_3;
	private JLabel lblNewLabel_4;
	private JTextField textField;
	private JButton btnNewButton_1;
	private JTextField textField1;
	private JButton btnNewButton_2;
	private JButton returnButton;

	private JTextField textField2;
	private JButton btnNewButton_3;
	int currentQuestionNumber = 1;
	int playerScore = 0;
	Random random = new Random();
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Main frame = new Main();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
	
	
	
	

	/**
	 * Create the frame.
	 */
	
	
	public int findIndex(char operand) {
		char[] operandOrder = {'-', '+', '/', '*'};
		int index = 0;
		
		for(int i = 0; i < operandOrder.length; i++) {
			if(operand == operandOrder[i]) index = i;
		}
		return index;
	}
	
	public double getResult(String question) {
		char[] questionData = question.toCharArray(); 
		
		char operand = questionData[1];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double result = 0;
		
		if(operand == '+') result = firstNumber + secondNumber;
		if(operand == '-') result = firstNumber - secondNumber;
		if(operand == '*') result = firstNumber * secondNumber;
		if(operand == '/') result = firstNumber / secondNumber;
		double roundedResult = Math.round(result);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	public double getResultAverage(String question) {
		char[] questionData = question.toCharArray(); 
		
		char firstOperand = questionData[1];
		char secondOperand = questionData[3];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double thirdNumber = Double.parseDouble(String.valueOf(questionData[4]));
		double result = 0;
		
		
		char[] operandOrder = {'-', '+', '/', '*'};
		int indexFirst = findIndex(firstOperand);
		int indexSecond = findIndex(secondOperand);
		double totalResult = 0;
		double initialResult = 0;
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+') initialResult = secondNumber + thirdNumber;
			if(secondOperand == '-') initialResult = secondNumber - thirdNumber;
			if(secondOperand == '*') initialResult = secondNumber * thirdNumber;
			if(secondOperand == '/') initialResult = secondNumber / thirdNumber;
			
			
		}
		else if (indexSecond < indexFirst) {
			if(firstOperand == '+') initialResult = firstNumber + secondNumber;
			if(firstOperand == '-') initialResult = firstNumber - secondNumber;
			if(firstOperand == '*') initialResult = firstNumber * secondNumber;
			if(firstOperand == '/') initialResult = firstNumber / secondNumber;
		}
		else {
			if(firstOperand == '+') totalResult = firstNumber + secondNumber + thirdNumber;
			if(firstOperand == '-') totalResult = firstNumber - secondNumber - thirdNumber;
			if(firstOperand == '*') totalResult = firstNumber * secondNumber * thirdNumber;
			if(firstOperand == '/') totalResult = firstNumber / secondNumber / thirdNumber;
		}
		
		
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+')  totalResult = firstNumber + thirdNumber;
			if(secondOperand == '-')  totalResult = firstNumber - thirdNumber;
			if(secondOperand == '*')  totalResult = firstNumber * thirdNumber;
			if(secondOperand == '/')  totalResult = firstNumber / thirdNumber;
			
			
		}
		else (indexSecond < indexFirst) {
			if(firstOperand == '+')  totalResult = initialResult + thirdNumber;
			if(firstOperand == '-')  totalResult = initialResult - thirdNumber;
			if(firstOperand == '*')  totalResult = initialResult * thirdNumber;
			if(firstOperand == '/')  totalResult = initialResult / thirdNumber;
		}
		
		
		
		
		
		double roundedResult = Math.round(totalResult);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	
	public String generateQuestion() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond];
		
		return question;
	}
	
	public String generateQuestionAverage() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexThird = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		int randomIndexOperand2 = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond] + operands[randomIndexOperand2] + numbers[randomIndexThird];
		System.out.println(question);
		return question;
	}
	
	
	public Main() {
		setIconImage(Toolkit.getDefaultToolkit().getImage("C:\\Users\\user\\Downloads\\quiz.png"));
		setTitle("QUIZ GAME");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(400, 100, 600, 600);
		contentPane = new JPanel();
		contentPane.setBackground(Color.WHITE);
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));

		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JPanel panel = new JPanel();
		panel.setBackground(Color.RED);
		panel.setBounds(10, 0, 564, 550);
		contentPane.add(panel);
		panel.setLayout(null);
		
		lblNewLabel_1_2_4 = new JLabel("quiz");
		lblNewLabel_1_2_4.setForeground(Color.WHITE);
		lblNewLabel_1_2_4.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_4.setBounds(140, 130, 561, 120);
		panel.add(lblNewLabel_1_2_4);
		
		lblNewLabel_1_2 = new JLabel("MATH");
		lblNewLabel_1_2.setForeground(Color.WHITE);
		lblNewLabel_1_2.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_2.setBounds(70, 50, 561, 120);
		panel.add(lblNewLabel_1_2);
		
		lblNewLabel_1 = new JLabel("MATH");
		lblNewLabel_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1.setForeground(Color.DARK_GRAY);
		lblNewLabel_1.setBounds(78, 50, 777, 120);
		panel.add(lblNewLabel_1);
		
		lblNewLabel_1_1 = new JLabel("MATH");
		lblNewLabel_1_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_1.setBounds(89, 50, 612, 120);
		panel.add(lblNewLabel_1_1);
		
		lblNewLabel_1_2_2 = new JLabel("quiz");
		lblNewLabel_1_2_2.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_2.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_2.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_2);
		
		lblNewLabel_1_2_1 = new JLabel("quiz");
		lblNewLabel_1_2_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_2_1.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_1.setBounds(159, 130, 561, 120);
		panel.add(lblNewLabel_1_2_1);
		
		lblNewLabel_1_2_3 = new JLabel("quiz");
		lblNewLabel_1_2_3.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_3.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_3.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_3);
		
		lblNewLabel = new JLabel("");
		lblNewLabel.setFont(new Font("Dialog", Font.BOLD, 9));
		lblNewLabel.setBounds(225, 428, 161, 14);
		panel.add(lblNewLabel);
		
		rdbtnEasy = new JRadioButton("EASY");
		rdbtnEasy.setForeground(Color.WHITE);
		rdbtnEasy.setBackground(Color.RED);
		rdbtnEasy.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnEasy.setBounds(215, 232, 269, 78);
		panel.add(rdbtnEasy);
		
		rdbtnAverage = new JRadioButton("AVERAGE");
		rdbtnAverage.setForeground(Color.WHITE);
		rdbtnAverage.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnAverage.setBackground(Color.RED);
		rdbtnAverage.setBounds(188, 290, 269, 73);
		panel.add(rdbtnAverage);
		
		rdbtnDifficult = new JRadioButton("DIFFICULT");
		rdbtnDifficult.setForeground(Color.WHITE);
		rdbtnDifficult.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnDifficult.setBackground(Color.RED);
		rdbtnDifficult.setBounds(176, 342, 269, 68);
		panel.add(rdbtnDifficult);
		
		ButtonGroup difficulty = new ButtonGroup();
		difficulty.add(rdbtnEasy);
		difficulty.add(rdbtnAverage);
		difficulty.add(rdbtnDifficult);
		
		btnStart = new JButton("START");
		
		
	
		
		btnStart.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
			if(rdbtnEasy.isSelected()){
				///////////
				
 				lblNewLabel_3.setText(generateQuestion());
 				
 				
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_1.setVisible(true);
				
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnAverage.isSelected()){
				
				lblNewLabel_3.setText(generateQuestionAverage());
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_2.setVisible(true);
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnDifficult.isSelected()){
				
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			}
		});
		btnStart.setBackground(Color.WHITE);
		btnStart.setForeground(Color.RED);
		btnStart.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnStart.setBounds(212, 453, 125, 43);
		panel.add(btnStart);
		
		lblNewLabel_2 = new JLabel("");
		lblNewLabel_2.setVisible(false);
		lblNewLabel_2.setForeground(Color.WHITE);
		lblNewLabel_2.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_2.setBounds(317, 90, 125, 129);
		panel.add(lblNewLabel_2);
		
		lblNewLabel_3 = new JLabel("");
		lblNewLabel_3.setVisible(false);
		lblNewLabel_3.setForeground(Color.WHITE);
		lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_3.setBounds(215, 90, 300, 200);
		panel.add(lblNewLabel_3);
		
		lblNewLabel_4 = new JLabel("");
		lblNewLabel_4.addMouseListener(new MouseAdapter() {
			public void mouseReleased(MouseEvent e) {
				
			}
		});
		lblNewLabel_4.setVisible(false);
		lblNewLabel_4.setForeground(Color.WHITE);
		lblNewLabel_4.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_4.setBounds(121, 90, 103, 129);
		panel.add(lblNewLabel_4);
				
		textField = new JTextField();
		textField.setHorizontalAlignment(SwingConstants.RIGHT);
		textField.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField.setVisible(false);
		textField.setBounds(121, 261, 324, 49);
		panel.add(textField);
		textField.setColumns(10);
		
		textField1 = new JTextField();
		textField1.setHorizontalAlignment(SwingConstants.RIGHT);
		textField1.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField1.setVisible(false);
		textField1.setBounds(121, 261, 324, 49);
		panel.add(textField1);
		textField1.setColumns(10);
		
		returnButton = new JButton("Return");
		returnButton.setVisible(false);
		returnButton.setFont(new Font("Tahoma", Font.BOLD, 20));
		returnButton.setForeground(Color.RED);
		returnButton.setBackground(Color.WHITE);
		returnButton.setBounds(225, 363, 126, 43);
		panel.add(returnButton);
		
		
		returnButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel.setVisible(true);
				rdbtnEasy.setVisible(true);
				rdbtnAverage.setVisible(true);
				rdbtnDifficult.setVisible(true);
				lblNewLabel_1_2_3.setVisible(true);
				lblNewLabel_1_2_1.setVisible(true);
				lblNewLabel_1_2_2.setVisible(true);
				lblNewLabel_1_1.setVisible(true);
				lblNewLabel_1.setVisible(true);
				lblNewLabel_1_2.setVisible(true);
				lblNewLabel_1_2_4.setVisible(true);
				btnStart.setVisible(true);
				returnButton.setVisible(false);
				lblNewLabel_3.setVisible(false);
				lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
			}

		
			
			
		});
		
		btnNewButton_1 = new JButton("SUBMIT");
		btnNewButton_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				
				
				double result = getResult(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
				
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
				
			}
		});
		btnNewButton_1.setVisible(false);
		btnNewButton_1.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_1.setForeground(Color.RED);
		btnNewButton_1.setBackground(Color.WHITE);
		btnNewButton_1.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_1);
		
		//Button 2
		btnNewButton_2 = new JButton("SUBMIT");
		btnNewButton_2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				double result = getResultAverage(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
			
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
			}
		});
		btnNewButton_2.setVisible(false);
		btnNewButton_2.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_2.setForeground(Color.RED);
		btnNewButton_2.setBackground(Color.WHITE);
		btnNewButton_2.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_2);
		
		
		textField2 = new JTextField();
		textField2.setHorizontalAlignment(SwingConstants.RIGHT);
		textField2.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField2.setVisible(false);
		textField2.setBounds(121, 261, 324, 49);
		panel.add(textField2);
		textField2.setColumns(10);
		
		btnNewButton_3 = new JButton("SUBMIT");
		btnNewButton_3.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel_2.setVisible(false);
				
				textField.setVisible(false);
				textField1.setVisible(false);
				btnNewButton_1.setVisible(false);
				btnNewButton_2.setVisible(false);
				
				textField2.setVisible(false);
				btnNewButton_3.setVisible(false);
				
				
				
			}
		});
		btnNewButton_3.setVisible(false);
		btnNewButton_3.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_3.setForeground(Color.RED);
		btnNewButton_3.setBackground(Color.WHITE);
		btnNewButton_3.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_3);
		
		
	}
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-04-30 17:32:54.602
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-04-30 17:32:54.602
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-30 17:33:05.798
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import java.awt.Color;
import java.awt.Toolkit;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

import java.awt.Font;
import javax.swing.JRadioButton;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Arrays;
import java.util.Random;


public class Main extends JFrame {

	private JPanel contentPane;
	private JLabel lblNewLabel_1_2;
	private JLabel lblNewLabel_1;
	private JLabel lblNewLabel_1_1; 
	private JLabel lblNewLabel_1_2_1;
	private JLabel lblNewLabel_1_2_2;
	private JLabel lblNewLabel_1_2_3;
	private JLabel lblNewLabel_1_2_4;
	private JRadioButton rdbtnEasy;
	private JRadioButton rdbtnAverage;
	private JRadioButton rdbtnDifficult;
	private JButton btnStart; 
	private JLabel lblNewLabel;
	private JLabel lblNewLabel_2;
	private JLabel lblNewLabel_3;
	private JLabel lblNewLabel_4;
	private JTextField textField;
	private JButton btnNewButton_1;
	private JTextField textField1;
	private JButton btnNewButton_2;
	private JButton returnButton;

	private JTextField textField2;
	private JButton btnNewButton_3;
	int currentQuestionNumber = 1;
	int playerScore = 0;
	Random random = new Random();
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Main frame = new Main();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
	
	
	
	

	/**
	 * Create the frame.
	 */
	
	
	public int findIndex(char operand) {
		char[] operandOrder = {'-', '+', '/', '*'};
		int index = 0;
		
		for(int i = 0; i < operandOrder.length; i++) {
			if(operand == operandOrder[i]) index = i;
		}
		return index;
	}
	
	public double getResult(String question) {
		char[] questionData = question.toCharArray(); 
		
		char operand = questionData[1];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double result = 0;
		
		if(operand == '+') result = firstNumber + secondNumber;
		if(operand == '-') result = firstNumber - secondNumber;
		if(operand == '*') result = firstNumber * secondNumber;
		if(operand == '/') result = firstNumber / secondNumber;
		double roundedResult = Math.round(result);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	public double getResultAverage(String question) {
		char[] questionData = question.toCharArray(); 
		
		char firstOperand = questionData[1];
		char secondOperand = questionData[3];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double thirdNumber = Double.parseDouble(String.valueOf(questionData[4]));
		double result = 0;
		
		
		char[] operandOrder = {'-', '+', '/', '*'};
		int indexFirst = findIndex(firstOperand);
		int indexSecond = findIndex(secondOperand);
		double totalResult = 0;
		double initialResult = 0;
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+') initialResult = secondNumber + thirdNumber;
			if(secondOperand == '-') initialResult = secondNumber - thirdNumber;
			if(secondOperand == '*') initialResult = secondNumber * thirdNumber;
			if(secondOperand == '/') initialResult = secondNumber / thirdNumber;
			
			
		}
		else if (indexSecond < indexFirst) {
			if(firstOperand == '+') initialResult = firstNumber + secondNumber;
			if(firstOperand == '-') initialResult = firstNumber - secondNumber;
			if(firstOperand == '*') initialResult = firstNumber * secondNumber;
			if(firstOperand == '/') initialResult = firstNumber / secondNumber;
		}
		else {
			if(firstOperand == '+') totalResult = firstNumber + secondNumber + thirdNumber;
			if(firstOperand == '-') totalResult = firstNumber - secondNumber - thirdNumber;
			if(firstOperand == '*') totalResult = firstNumber * secondNumber * thirdNumber;
			if(firstOperand == '/') totalResult = firstNumber / secondNumber / thirdNumber;
		}
		
		
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+')  totalResult = firstNumber + thirdNumber;
			if(secondOperand == '-')  totalResult = firstNumber - thirdNumber;
			if(secondOperand == '*')  totalResult = firstNumber * thirdNumber;
			if(secondOperand == '/')  totalResult = firstNumber / thirdNumber;
			
			
		}
		else (indexSecond < indexFirst) {
			if(firstOperand == '+')  totalResult = initialResult + thirdNumber;
			if(firstOperand == '-')  totalResult = initialResult - thirdNumber;
			if(firstOperand == '*')  totalResult = initialResult * thirdNumber;
			if(firstOperand == '/')  totalResult = initialResult / thirdNumber;
		}
		
		
		
		
		
		double roundedResult = Math.round(totalResult);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	
	public String generateQuestion() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond];
		
		return question;
	}
	
	public String generateQuestionAverage() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexThird = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		int randomIndexOperand2 = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond] + operands[randomIndexOperand2] + numbers[randomIndexThird];
		System.out.println(question);
		return question;
	}
	
	
	public Main() {
		setIconImage(Toolkit.getDefaultToolkit().getImage("C:\\Users\\user\\Downloads\\quiz.png"));
		setTitle("QUIZ GAME");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(400, 100, 600, 600);
		contentPane = new JPanel();
		contentPane.setBackground(Color.WHITE);
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));

		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JPanel panel = new JPanel();
		panel.setBackground(Color.RED);
		panel.setBounds(10, 0, 564, 550);
		contentPane.add(panel);
		panel.setLayout(null);
		
		lblNewLabel_1_2_4 = new JLabel("quiz");
		lblNewLabel_1_2_4.setForeground(Color.WHITE);
		lblNewLabel_1_2_4.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_4.setBounds(140, 130, 561, 120);
		panel.add(lblNewLabel_1_2_4);
		
		lblNewLabel_1_2 = new JLabel("MATH");
		lblNewLabel_1_2.setForeground(Color.WHITE);
		lblNewLabel_1_2.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_2.setBounds(70, 50, 561, 120);
		panel.add(lblNewLabel_1_2);
		
		lblNewLabel_1 = new JLabel("MATH");
		lblNewLabel_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1.setForeground(Color.DARK_GRAY);
		lblNewLabel_1.setBounds(78, 50, 777, 120);
		panel.add(lblNewLabel_1);
		
		lblNewLabel_1_1 = new JLabel("MATH");
		lblNewLabel_1_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_1.setBounds(89, 50, 612, 120);
		panel.add(lblNewLabel_1_1);
		
		lblNewLabel_1_2_2 = new JLabel("quiz");
		lblNewLabel_1_2_2.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_2.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_2.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_2);
		
		lblNewLabel_1_2_1 = new JLabel("quiz");
		lblNewLabel_1_2_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_2_1.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_1.setBounds(159, 130, 561, 120);
		panel.add(lblNewLabel_1_2_1);
		
		lblNewLabel_1_2_3 = new JLabel("quiz");
		lblNewLabel_1_2_3.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_3.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_3.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_3);
		
		lblNewLabel = new JLabel("");
		lblNewLabel.setFont(new Font("Dialog", Font.BOLD, 9));
		lblNewLabel.setBounds(225, 428, 161, 14);
		panel.add(lblNewLabel);
		
		rdbtnEasy = new JRadioButton("EASY");
		rdbtnEasy.setForeground(Color.WHITE);
		rdbtnEasy.setBackground(Color.RED);
		rdbtnEasy.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnEasy.setBounds(215, 232, 269, 78);
		panel.add(rdbtnEasy);
		
		rdbtnAverage = new JRadioButton("AVERAGE");
		rdbtnAverage.setForeground(Color.WHITE);
		rdbtnAverage.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnAverage.setBackground(Color.RED);
		rdbtnAverage.setBounds(188, 290, 269, 73);
		panel.add(rdbtnAverage);
		
		rdbtnDifficult = new JRadioButton("DIFFICULT");
		rdbtnDifficult.setForeground(Color.WHITE);
		rdbtnDifficult.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnDifficult.setBackground(Color.RED);
		rdbtnDifficult.setBounds(176, 342, 269, 68);
		panel.add(rdbtnDifficult);
		
		ButtonGroup difficulty = new ButtonGroup();
		difficulty.add(rdbtnEasy);
		difficulty.add(rdbtnAverage);
		difficulty.add(rdbtnDifficult);
		
		btnStart = new JButton("START");
		
		
	
		
		btnStart.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
			if(rdbtnEasy.isSelected()){
				///////////
				
 				lblNewLabel_3.setText(generateQuestion());
 				
 				
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_1.setVisible(true);
				
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnAverage.isSelected()){
				
				lblNewLabel_3.setText(generateQuestionAverage());
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_2.setVisible(true);
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnDifficult.isSelected()){
				
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			}
		});
		btnStart.setBackground(Color.WHITE);
		btnStart.setForeground(Color.RED);
		btnStart.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnStart.setBounds(212, 453, 125, 43);
		panel.add(btnStart);
		
		lblNewLabel_2 = new JLabel("");
		lblNewLabel_2.setVisible(false);
		lblNewLabel_2.setForeground(Color.WHITE);
		lblNewLabel_2.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_2.setBounds(317, 90, 125, 129);
		panel.add(lblNewLabel_2);
		
		lblNewLabel_3 = new JLabel("");
		lblNewLabel_3.setVisible(false);
		lblNewLabel_3.setForeground(Color.WHITE);
		lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_3.setBounds(215, 90, 300, 200);
		panel.add(lblNewLabel_3);
		
		lblNewLabel_4 = new JLabel("");
		lblNewLabel_4.addMouseListener(new MouseAdapter() {
			public void mouseReleased(MouseEvent e) {
				
			}
		});
		lblNewLabel_4.setVisible(false);
		lblNewLabel_4.setForeground(Color.WHITE);
		lblNewLabel_4.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_4.setBounds(121, 90, 103, 129);
		panel.add(lblNewLabel_4);
				
		textField = new JTextField();
		textField.setHorizontalAlignment(SwingConstants.RIGHT);
		textField.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField.setVisible(false);
		textField.setBounds(121, 261, 324, 49);
		panel.add(textField);
		textField.setColumns(10);
		
		textField1 = new JTextField();
		textField1.setHorizontalAlignment(SwingConstants.RIGHT);
		textField1.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField1.setVisible(false);
		textField1.setBounds(121, 261, 324, 49);
		panel.add(textField1);
		textField1.setColumns(10);
		
		returnButton = new JButton("Return");
		returnButton.setVisible(false);
		returnButton.setFont(new Font("Tahoma", Font.BOLD, 20));
		returnButton.setForeground(Color.RED);
		returnButton.setBackground(Color.WHITE);
		returnButton.setBounds(225, 363, 126, 43);
		panel.add(returnButton);
		
		
		returnButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel.setVisible(true);
				rdbtnEasy.setVisible(true);
				rdbtnAverage.setVisible(true);
				rdbtnDifficult.setVisible(true);
				lblNewLabel_1_2_3.setVisible(true);
				lblNewLabel_1_2_1.setVisible(true);
				lblNewLabel_1_2_2.setVisible(true);
				lblNewLabel_1_1.setVisible(true);
				lblNewLabel_1.setVisible(true);
				lblNewLabel_1_2.setVisible(true);
				lblNewLabel_1_2_4.setVisible(true);
				btnStart.setVisible(true);
				returnButton.setVisible(false);
				lblNewLabel_3.setVisible(false);
				lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
			}

		
			
			
		});
		
		btnNewButton_1 = new JButton("SUBMIT");
		btnNewButton_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				
				
				double result = getResult(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
				
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
				
			}
		});
		btnNewButton_1.setVisible(false);
		btnNewButton_1.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_1.setForeground(Color.RED);
		btnNewButton_1.setBackground(Color.WHITE);
		btnNewButton_1.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_1);
		
		//Button 2
		btnNewButton_2 = new JButton("SUBMIT");
		btnNewButton_2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				double result = getResultAverage(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
			
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
			}
		});
		btnNewButton_2.setVisible(false);
		btnNewButton_2.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_2.setForeground(Color.RED);
		btnNewButton_2.setBackground(Color.WHITE);
		btnNewButton_2.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_2);
		
		
		textField2 = new JTextField();
		textField2.setHorizontalAlignment(SwingConstants.RIGHT);
		textField2.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField2.setVisible(false);
		textField2.setBounds(121, 261, 324, 49);
		panel.add(textField2);
		textField2.setColumns(10);
		
		btnNewButton_3 = new JButton("SUBMIT");
		btnNewButton_3.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel_2.setVisible(false);
				
				textField.setVisible(false);
				textField1.setVisible(false);
				btnNewButton_1.setVisible(false);
				btnNewButton_2.setVisible(false);
				
				textField2.setVisible(false);
				btnNewButton_3.setVisible(false);
				
				
				
			}
		});
		btnNewButton_3.setVisible(false);
		btnNewButton_3.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_3.setForeground(Color.RED);
		btnNewButton_3.setBackground(Color.WHITE);
		btnNewButton_3.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_3);
		
		
	}
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-04-30 17:33:05.799
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-04-30 17:33:05.800
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-30 17:33:06.713
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import java.awt.Color;
import java.awt.Toolkit;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

import java.awt.Font;
import javax.swing.JRadioButton;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Arrays;
import java.util.Random;


public class Main extends JFrame {

	private JPanel contentPane;
	private JLabel lblNewLabel_1_2;
	private JLabel lblNewLabel_1;
	private JLabel lblNewLabel_1_1; 
	private JLabel lblNewLabel_1_2_1;
	private JLabel lblNewLabel_1_2_2;
	private JLabel lblNewLabel_1_2_3;
	private JLabel lblNewLabel_1_2_4;
	private JRadioButton rdbtnEasy;
	private JRadioButton rdbtnAverage;
	private JRadioButton rdbtnDifficult;
	private JButton btnStart; 
	private JLabel lblNewLabel;
	private JLabel lblNewLabel_2;
	private JLabel lblNewLabel_3;
	private JLabel lblNewLabel_4;
	private JTextField textField;
	private JButton btnNewButton_1;
	private JTextField textField1;
	private JButton btnNewButton_2;
	private JButton returnButton;

	private JTextField textField2;
	private JButton btnNewButton_3;
	int currentQuestionNumber = 1;
	int playerScore = 0;
	Random random = new Random();
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Main frame = new Main();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
	
	
	
	

	/**
	 * Create the frame.
	 */
	
	
	public int findIndex(char operand) {
		char[] operandOrder = {'-', '+', '/', '*'};
		int index = 0;
		
		for(int i = 0; i < operandOrder.length; i++) {
			if(operand == operandOrder[i]) index = i;
		}
		return index;
	}
	
	public double getResult(String question) {
		char[] questionData = question.toCharArray(); 
		
		char operand = questionData[1];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double result = 0;
		
		if(operand == '+') result = firstNumber + secondNumber;
		if(operand == '-') result = firstNumber - secondNumber;
		if(operand == '*') result = firstNumber * secondNumber;
		if(operand == '/') result = firstNumber / secondNumber;
		double roundedResult = Math.round(result);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	public double getResultAverage(String question) {
		char[] questionData = question.toCharArray(); 
		
		char firstOperand = questionData[1];
		char secondOperand = questionData[3];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double thirdNumber = Double.parseDouble(String.valueOf(questionData[4]));
		double result = 0;
		
		
		char[] operandOrder = {'-', '+', '/', '*'};
		int indexFirst = findIndex(firstOperand);
		int indexSecond = findIndex(secondOperand);
		double totalResult = 0;
		double initialResult = 0;
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+') initialResult = secondNumber + thirdNumber;
			if(secondOperand == '-') initialResult = secondNumber - thirdNumber;
			if(secondOperand == '*') initialResult = secondNumber * thirdNumber;
			if(secondOperand == '/') initialResult = secondNumber / thirdNumber;
			
			
		}
		else if (indexSecond < indexFirst) {
			if(firstOperand == '+') initialResult = firstNumber + secondNumber;
			if(firstOperand == '-') initialResult = firstNumber - secondNumber;
			if(firstOperand == '*') initialResult = firstNumber * secondNumber;
			if(firstOperand == '/') initialResult = firstNumber / secondNumber;
		}
		else {
			if(firstOperand == '+') totalResult = firstNumber + secondNumber + thirdNumber;
			if(firstOperand == '-') totalResult = firstNumber - secondNumber - thirdNumber;
			if(firstOperand == '*') totalResult = firstNumber * secondNumber * thirdNumber;
			if(firstOperand == '/') totalResult = firstNumber / secondNumber / thirdNumber;
		}
		
		
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+')  totalResult = firstNumber + thirdNumber;
			if(secondOperand == '-')  totalResult = firstNumber - thirdNumber;
			if(secondOperand == '*')  totalResult = firstNumber * thirdNumber;
			if(secondOperand == '/')  totalResult = firstNumber / thirdNumber;
			
			
		}
		else (indexSecond < indexFirst) {
			if(firstOperand == '+')  totalResult = initialResult + thirdNumber;
			if(firstOperand == '-')  totalResult = initialResult - thirdNumber;
			if(firstOperand == '*')  totalResult = initialResult * thirdNumber;
			if(firstOperand == '/')  totalResult = initialResult / thirdNumber;
		}
		
		
		
		
		
		double roundedResult = Math.round(totalResult);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	
	public String generateQuestion() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond];
		
		return question;
	}
	
	public String generateQuestionAverage() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexThird = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		int randomIndexOperand2 = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond] + operands[randomIndexOperand2] + numbers[randomIndexThird];
		System.out.println(question);
		return question;
	}
	
	
	public Main() {
		setIconImage(Toolkit.getDefaultToolkit().getImage("C:\\Users\\user\\Downloads\\quiz.png"));
		setTitle("QUIZ GAME");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(400, 100, 600, 600);
		contentPane = new JPanel();
		contentPane.setBackground(Color.WHITE);
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));

		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JPanel panel = new JPanel();
		panel.setBackground(Color.RED);
		panel.setBounds(10, 0, 564, 550);
		contentPane.add(panel);
		panel.setLayout(null);
		
		lblNewLabel_1_2_4 = new JLabel("quiz");
		lblNewLabel_1_2_4.setForeground(Color.WHITE);
		lblNewLabel_1_2_4.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_4.setBounds(140, 130, 561, 120);
		panel.add(lblNewLabel_1_2_4);
		
		lblNewLabel_1_2 = new JLabel("MATH");
		lblNewLabel_1_2.setForeground(Color.WHITE);
		lblNewLabel_1_2.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_2.setBounds(70, 50, 561, 120);
		panel.add(lblNewLabel_1_2);
		
		lblNewLabel_1 = new JLabel("MATH");
		lblNewLabel_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1.setForeground(Color.DARK_GRAY);
		lblNewLabel_1.setBounds(78, 50, 777, 120);
		panel.add(lblNewLabel_1);
		
		lblNewLabel_1_1 = new JLabel("MATH");
		lblNewLabel_1_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_1.setBounds(89, 50, 612, 120);
		panel.add(lblNewLabel_1_1);
		
		lblNewLabel_1_2_2 = new JLabel("quiz");
		lblNewLabel_1_2_2.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_2.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_2.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_2);
		
		lblNewLabel_1_2_1 = new JLabel("quiz");
		lblNewLabel_1_2_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_2_1.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_1.setBounds(159, 130, 561, 120);
		panel.add(lblNewLabel_1_2_1);
		
		lblNewLabel_1_2_3 = new JLabel("quiz");
		lblNewLabel_1_2_3.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_3.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_3.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_3);
		
		lblNewLabel = new JLabel("");
		lblNewLabel.setFont(new Font("Dialog", Font.BOLD, 9));
		lblNewLabel.setBounds(225, 428, 161, 14);
		panel.add(lblNewLabel);
		
		rdbtnEasy = new JRadioButton("EASY");
		rdbtnEasy.setForeground(Color.WHITE);
		rdbtnEasy.setBackground(Color.RED);
		rdbtnEasy.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnEasy.setBounds(215, 232, 269, 78);
		panel.add(rdbtnEasy);
		
		rdbtnAverage = new JRadioButton("AVERAGE");
		rdbtnAverage.setForeground(Color.WHITE);
		rdbtnAverage.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnAverage.setBackground(Color.RED);
		rdbtnAverage.setBounds(188, 290, 269, 73);
		panel.add(rdbtnAverage);
		
		rdbtnDifficult = new JRadioButton("DIFFICULT");
		rdbtnDifficult.setForeground(Color.WHITE);
		rdbtnDifficult.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnDifficult.setBackground(Color.RED);
		rdbtnDifficult.setBounds(176, 342, 269, 68);
		panel.add(rdbtnDifficult);
		
		ButtonGroup difficulty = new ButtonGroup();
		difficulty.add(rdbtnEasy);
		difficulty.add(rdbtnAverage);
		difficulty.add(rdbtnDifficult);
		
		btnStart = new JButton("START");
		
		
	
		
		btnStart.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
			if(rdbtnEasy.isSelected()){
				///////////
				
 				lblNewLabel_3.setText(generateQuestion());
 				
 				
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_1.setVisible(true);
				
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnAverage.isSelected()){
				
				lblNewLabel_3.setText(generateQuestionAverage());
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_2.setVisible(true);
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnDifficult.isSelected()){
				
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			}
		});
		btnStart.setBackground(Color.WHITE);
		btnStart.setForeground(Color.RED);
		btnStart.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnStart.setBounds(212, 453, 125, 43);
		panel.add(btnStart);
		
		lblNewLabel_2 = new JLabel("");
		lblNewLabel_2.setVisible(false);
		lblNewLabel_2.setForeground(Color.WHITE);
		lblNewLabel_2.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_2.setBounds(317, 90, 125, 129);
		panel.add(lblNewLabel_2);
		
		lblNewLabel_3 = new JLabel("");
		lblNewLabel_3.setVisible(false);
		lblNewLabel_3.setForeground(Color.WHITE);
		lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_3.setBounds(215, 90, 300, 200);
		panel.add(lblNewLabel_3);
		
		lblNewLabel_4 = new JLabel("");
		lblNewLabel_4.addMouseListener(new MouseAdapter() {
			public void mouseReleased(MouseEvent e) {
				
			}
		});
		lblNewLabel_4.setVisible(false);
		lblNewLabel_4.setForeground(Color.WHITE);
		lblNewLabel_4.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_4.setBounds(121, 90, 103, 129);
		panel.add(lblNewLabel_4);
				
		textField = new JTextField();
		textField.setHorizontalAlignment(SwingConstants.RIGHT);
		textField.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField.setVisible(false);
		textField.setBounds(121, 261, 324, 49);
		panel.add(textField);
		textField.setColumns(10);
		
		textField1 = new JTextField();
		textField1.setHorizontalAlignment(SwingConstants.RIGHT);
		textField1.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField1.setVisible(false);
		textField1.setBounds(121, 261, 324, 49);
		panel.add(textField1);
		textField1.setColumns(10);
		
		returnButton = new JButton("Return");
		returnButton.setVisible(false);
		returnButton.setFont(new Font("Tahoma", Font.BOLD, 20));
		returnButton.setForeground(Color.RED);
		returnButton.setBackground(Color.WHITE);
		returnButton.setBounds(225, 363, 126, 43);
		panel.add(returnButton);
		
		
		returnButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel.setVisible(true);
				rdbtnEasy.setVisible(true);
				rdbtnAverage.setVisible(true);
				rdbtnDifficult.setVisible(true);
				lblNewLabel_1_2_3.setVisible(true);
				lblNewLabel_1_2_1.setVisible(true);
				lblNewLabel_1_2_2.setVisible(true);
				lblNewLabel_1_1.setVisible(true);
				lblNewLabel_1.setVisible(true);
				lblNewLabel_1_2.setVisible(true);
				lblNewLabel_1_2_4.setVisible(true);
				btnStart.setVisible(true);
				returnButton.setVisible(false);
				lblNewLabel_3.setVisible(false);
				lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
			}

		
			
			
		});
		
		btnNewButton_1 = new JButton("SUBMIT");
		btnNewButton_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				
				
				double result = getResult(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
				
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
				
			}
		});
		btnNewButton_1.setVisible(false);
		btnNewButton_1.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_1.setForeground(Color.RED);
		btnNewButton_1.setBackground(Color.WHITE);
		btnNewButton_1.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_1);
		
		//Button 2
		btnNewButton_2 = new JButton("SUBMIT");
		btnNewButton_2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				double result = getResultAverage(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
			
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
			}
		});
		btnNewButton_2.setVisible(false);
		btnNewButton_2.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_2.setForeground(Color.RED);
		btnNewButton_2.setBackground(Color.WHITE);
		btnNewButton_2.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_2);
		
		
		textField2 = new JTextField();
		textField2.setHorizontalAlignment(SwingConstants.RIGHT);
		textField2.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField2.setVisible(false);
		textField2.setBounds(121, 261, 324, 49);
		panel.add(textField2);
		textField2.setColumns(10);
		
		btnNewButton_3 = new JButton("SUBMIT");
		btnNewButton_3.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel_2.setVisible(false);
				
				textField.setVisible(false);
				textField1.setVisible(false);
				btnNewButton_1.setVisible(false);
				btnNewButton_2.setVisible(false);
				
				textField2.setVisible(false);
				btnNewButton_3.setVisible(false);
				
				
				
			}
		});
		btnNewButton_3.setVisible(false);
		btnNewButton_3.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_3.setForeground(Color.RED);
		btnNewButton_3.setBackground(Color.WHITE);
		btnNewButton_3.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_3);
		
		
	}
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:111)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-04-30 17:33:06.714
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:111)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-04-30 17:33:06.714
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:111)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-30 17:33:06.724
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import java.awt.Color;
import java.awt.Toolkit;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

import java.awt.Font;
import javax.swing.JRadioButton;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Arrays;
import java.util.Random;


public class Main extends JFrame {

	private JPanel contentPane;
	private JLabel lblNewLabel_1_2;
	private JLabel lblNewLabel_1;
	private JLabel lblNewLabel_1_1; 
	private JLabel lblNewLabel_1_2_1;
	private JLabel lblNewLabel_1_2_2;
	private JLabel lblNewLabel_1_2_3;
	private JLabel lblNewLabel_1_2_4;
	private JRadioButton rdbtnEasy;
	private JRadioButton rdbtnAverage;
	private JRadioButton rdbtnDifficult;
	private JButton btnStart; 
	private JLabel lblNewLabel;
	private JLabel lblNewLabel_2;
	private JLabel lblNewLabel_3;
	private JLabel lblNewLabel_4;
	private JTextField textField;
	private JButton btnNewButton_1;
	private JTextField textField1;
	private JButton btnNewButton_2;
	private JButton returnButton;

	private JTextField textField2;
	private JButton btnNewButton_3;
	int currentQuestionNumber = 1;
	int playerScore = 0;
	Random random = new Random();
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Main frame = new Main();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
	
	
	
	

	/**
	 * Create the frame.
	 */
	
	
	public int findIndex(char operand) {
		char[] operandOrder = {'-', '+', '/', '*'};
		int index = 0;
		
		for(int i = 0; i < operandOrder.length; i++) {
			if(operand == operandOrder[i]) index = i;
		}
		return index;
	}
	
	public double getResult(String question) {
		char[] questionData = question.toCharArray(); 
		
		char operand = questionData[1];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double result = 0;
		
		if(operand == '+') result = firstNumber + secondNumber;
		if(operand == '-') result = firstNumber - secondNumber;
		if(operand == '*') result = firstNumber * secondNumber;
		if(operand == '/') result = firstNumber / secondNumber;
		double roundedResult = Math.round(result);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	public double getResultAverage(String question) {
		char[] questionData = question.toCharArray(); 
		
		char firstOperand = questionData[1];
		char secondOperand = questionData[3];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double thirdNumber = Double.parseDouble(String.valueOf(questionData[4]));
		double result = 0;
		
		
		char[] operandOrder = {'-', '+', '/', '*'};
		int indexFirst = findIndex(firstOperand);
		int indexSecond = findIndex(secondOperand);
		double totalResult = 0;
		double initialResult = 0;
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+') initialResult = secondNumber + thirdNumber;
			if(secondOperand == '-') initialResult = secondNumber - thirdNumber;
			if(secondOperand == '*') initialResult = secondNumber * thirdNumber;
			if(secondOperand == '/') initialResult = secondNumber / thirdNumber;
			
			
		}
		else if (indexSecond < indexFirst) {
			if(firstOperand == '+') initialResult = firstNumber + secondNumber;
			if(firstOperand == '-') initialResult = firstNumber - secondNumber;
			if(firstOperand == '*') initialResult = firstNumber * secondNumber;
			if(firstOperand == '/') initialResult = firstNumber / secondNumber;
		}
		else {
			if(firstOperand == '+') totalResult = firstNumber + secondNumber + thirdNumber;
			if(firstOperand == '-') totalResult = firstNumber - secondNumber - thirdNumber;
			if(firstOperand == '*') totalResult = firstNumber * secondNumber * thirdNumber;
			if(firstOperand == '/') totalResult = firstNumber / secondNumber / thirdNumber;
		}
		
		
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+')  totalResult = firstNumber + thirdNumber;
			if(secondOperand == '-')  totalResult = firstNumber - thirdNumber;
			if(secondOperand == '*')  totalResult = firstNumber * thirdNumber;
			if(secondOperand == '/')  totalResult = firstNumber / thirdNumber;
			
			
		}
		else (indexSecond < indexFirst) {
			if(firstOperand == '+')  totalResult = initialResult + thirdNumber;
			if(firstOperand == '-')  totalResult = initialResult - thirdNumber;
			if(firstOperand == '*')  totalResult = initialResult * thirdNumber;
			if(firstOperand == '/')  totalResult = initialResult / thirdNumber;
		}
		
		
		
		
		
		double roundedResult = Math.round(totalResult);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	
	public String generateQuestion() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond];
		
		return question;
	}
	
	public String generateQuestionAverage() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexThird = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		int randomIndexOperand2 = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond] + operands[randomIndexOperand2] + numbers[randomIndexThird];
		System.out.println(question);
		return question;
	}
	
	
	public Main() {
		setIconImage(Toolkit.getDefaultToolkit().getImage("C:\\Users\\user\\Downloads\\quiz.png"));
		setTitle("QUIZ GAME");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(400, 100, 600, 600);
		contentPane = new JPanel();
		contentPane.setBackground(Color.WHITE);
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));

		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JPanel panel = new JPanel();
		panel.setBackground(Color.RED);
		panel.setBounds(10, 0, 564, 550);
		contentPane.add(panel);
		panel.setLayout(null);
		
		lblNewLabel_1_2_4 = new JLabel("quiz");
		lblNewLabel_1_2_4.setForeground(Color.WHITE);
		lblNewLabel_1_2_4.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_4.setBounds(140, 130, 561, 120);
		panel.add(lblNewLabel_1_2_4);
		
		lblNewLabel_1_2 = new JLabel("MATH");
		lblNewLabel_1_2.setForeground(Color.WHITE);
		lblNewLabel_1_2.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_2.setBounds(70, 50, 561, 120);
		panel.add(lblNewLabel_1_2);
		
		lblNewLabel_1 = new JLabel("MATH");
		lblNewLabel_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1.setForeground(Color.DARK_GRAY);
		lblNewLabel_1.setBounds(78, 50, 777, 120);
		panel.add(lblNewLabel_1);
		
		lblNewLabel_1_1 = new JLabel("MATH");
		lblNewLabel_1_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_1.setBounds(89, 50, 612, 120);
		panel.add(lblNewLabel_1_1);
		
		lblNewLabel_1_2_2 = new JLabel("quiz");
		lblNewLabel_1_2_2.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_2.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_2.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_2);
		
		lblNewLabel_1_2_1 = new JLabel("quiz");
		lblNewLabel_1_2_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_2_1.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_1.setBounds(159, 130, 561, 120);
		panel.add(lblNewLabel_1_2_1);
		
		lblNewLabel_1_2_3 = new JLabel("quiz");
		lblNewLabel_1_2_3.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_3.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_3.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_3);
		
		lblNewLabel = new JLabel("");
		lblNewLabel.setFont(new Font("Dialog", Font.BOLD, 9));
		lblNewLabel.setBounds(225, 428, 161, 14);
		panel.add(lblNewLabel);
		
		rdbtnEasy = new JRadioButton("EASY");
		rdbtnEasy.setForeground(Color.WHITE);
		rdbtnEasy.setBackground(Color.RED);
		rdbtnEasy.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnEasy.setBounds(215, 232, 269, 78);
		panel.add(rdbtnEasy);
		
		rdbtnAverage = new JRadioButton("AVERAGE");
		rdbtnAverage.setForeground(Color.WHITE);
		rdbtnAverage.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnAverage.setBackground(Color.RED);
		rdbtnAverage.setBounds(188, 290, 269, 73);
		panel.add(rdbtnAverage);
		
		rdbtnDifficult = new JRadioButton("DIFFICULT");
		rdbtnDifficult.setForeground(Color.WHITE);
		rdbtnDifficult.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnDifficult.setBackground(Color.RED);
		rdbtnDifficult.setBounds(176, 342, 269, 68);
		panel.add(rdbtnDifficult);
		
		ButtonGroup difficulty = new ButtonGroup();
		difficulty.add(rdbtnEasy);
		difficulty.add(rdbtnAverage);
		difficulty.add(rdbtnDifficult);
		
		btnStart = new JButton("START");
		
		
	
		
		btnStart.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
			if(rdbtnEasy.isSelected()){
				///////////
				
 				lblNewLabel_3.setText(generateQuestion());
 				
 				
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_1.setVisible(true);
				
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnAverage.isSelected()){
				
				lblNewLabel_3.setText(generateQuestionAverage());
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_2.setVisible(true);
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnDifficult.isSelected()){
				
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			}
		});
		btnStart.setBackground(Color.WHITE);
		btnStart.setForeground(Color.RED);
		btnStart.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnStart.setBounds(212, 453, 125, 43);
		panel.add(btnStart);
		
		lblNewLabel_2 = new JLabel("");
		lblNewLabel_2.setVisible(false);
		lblNewLabel_2.setForeground(Color.WHITE);
		lblNewLabel_2.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_2.setBounds(317, 90, 125, 129);
		panel.add(lblNewLabel_2);
		
		lblNewLabel_3 = new JLabel("");
		lblNewLabel_3.setVisible(false);
		lblNewLabel_3.setForeground(Color.WHITE);
		lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_3.setBounds(215, 90, 300, 200);
		panel.add(lblNewLabel_3);
		
		lblNewLabel_4 = new JLabel("");
		lblNewLabel_4.addMouseListener(new MouseAdapter() {
			public void mouseReleased(MouseEvent e) {
				
			}
		});
		lblNewLabel_4.setVisible(false);
		lblNewLabel_4.setForeground(Color.WHITE);
		lblNewLabel_4.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_4.setBounds(121, 90, 103, 129);
		panel.add(lblNewLabel_4);
				
		textField = new JTextField();
		textField.setHorizontalAlignment(SwingConstants.RIGHT);
		textField.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField.setVisible(false);
		textField.setBounds(121, 261, 324, 49);
		panel.add(textField);
		textField.setColumns(10);
		
		textField1 = new JTextField();
		textField1.setHorizontalAlignment(SwingConstants.RIGHT);
		textField1.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField1.setVisible(false);
		textField1.setBounds(121, 261, 324, 49);
		panel.add(textField1);
		textField1.setColumns(10);
		
		returnButton = new JButton("Return");
		returnButton.setVisible(false);
		returnButton.setFont(new Font("Tahoma", Font.BOLD, 20));
		returnButton.setForeground(Color.RED);
		returnButton.setBackground(Color.WHITE);
		returnButton.setBounds(225, 363, 126, 43);
		panel.add(returnButton);
		
		
		returnButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel.setVisible(true);
				rdbtnEasy.setVisible(true);
				rdbtnAverage.setVisible(true);
				rdbtnDifficult.setVisible(true);
				lblNewLabel_1_2_3.setVisible(true);
				lblNewLabel_1_2_1.setVisible(true);
				lblNewLabel_1_2_2.setVisible(true);
				lblNewLabel_1_1.setVisible(true);
				lblNewLabel_1.setVisible(true);
				lblNewLabel_1_2.setVisible(true);
				lblNewLabel_1_2_4.setVisible(true);
				btnStart.setVisible(true);
				returnButton.setVisible(false);
				lblNewLabel_3.setVisible(false);
				lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
			}

		
			
			
		});
		
		btnNewButton_1 = new JButton("SUBMIT");
		btnNewButton_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				
				
				double result = getResult(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
				
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
				
			}
		});
		btnNewButton_1.setVisible(false);
		btnNewButton_1.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_1.setForeground(Color.RED);
		btnNewButton_1.setBackground(Color.WHITE);
		btnNewButton_1.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_1);
		
		//Button 2
		btnNewButton_2 = new JButton("SUBMIT");
		btnNewButton_2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				double result = getResultAverage(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
			
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
			}
		});
		btnNewButton_2.setVisible(false);
		btnNewButton_2.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_2.setForeground(Color.RED);
		btnNewButton_2.setBackground(Color.WHITE);
		btnNewButton_2.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_2);
		
		
		textField2 = new JTextField();
		textField2.setHorizontalAlignment(SwingConstants.RIGHT);
		textField2.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField2.setVisible(false);
		textField2.setBounds(121, 261, 324, 49);
		panel.add(textField2);
		textField2.setColumns(10);
		
		btnNewButton_3 = new JButton("SUBMIT");
		btnNewButton_3.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel_2.setVisible(false);
				
				textField.setVisible(false);
				textField1.setVisible(false);
				btnNewButton_1.setVisible(false);
				btnNewButton_2.setVisible(false);
				
				textField2.setVisible(false);
				btnNewButton_3.setVisible(false);
				
				
				
			}
		});
		btnNewButton_3.setVisible(false);
		btnNewButton_3.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_3.setForeground(Color.RED);
		btnNewButton_3.setBackground(Color.WHITE);
		btnNewButton_3.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_3);
		
		
	}
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.internal.core.manipulation.dom.ASTResolving.createQuickFixAST(ASTResolving.java:1052)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:131)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:111)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jface.text 4 0 2023-04-30 17:33:06.724
!MESSAGE Unexpected runtime error while computing a text hover
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.internal.core.manipulation.dom.ASTResolving.createQuickFixAST(ASTResolving.java:1052)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:131)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:111)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-30 17:33:13.599
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import java.awt.Color;
import java.awt.Toolkit;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

import java.awt.Font;
import javax.swing.JRadioButton;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Arrays;
import java.util.Random;


public class Main extends JFrame {

	private JPanel contentPane;
	private JLabel lblNewLabel_1_2;
	private JLabel lblNewLabel_1;
	private JLabel lblNewLabel_1_1; 
	private JLabel lblNewLabel_1_2_1;
	private JLabel lblNewLabel_1_2_2;
	private JLabel lblNewLabel_1_2_3;
	private JLabel lblNewLabel_1_2_4;
	private JRadioButton rdbtnEasy;
	private JRadioButton rdbtnAverage;
	private JRadioButton rdbtnDifficult;
	private JButton btnStart; 
	private JLabel lblNewLabel;
	private JLabel lblNewLabel_2;
	private JLabel lblNewLabel_3;
	private JLabel lblNewLabel_4;
	private JTextField textField;
	private JButton btnNewButton_1;
	private JTextField textField1;
	private JButton btnNewButton_2;
	private JButton returnButton;

	private JTextField textField2;
	private JButton btnNewButton_3;
	int currentQuestionNumber = 1;
	int playerScore = 0;
	Random random = new Random();
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Main frame = new Main();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
	
	
	
	

	/**
	 * Create the frame.
	 */
	
	
	public int findIndex(char operand) {
		char[] operandOrder = {'-', '+', '/', '*'};
		int index = 0;
		
		for(int i = 0; i < operandOrder.length; i++) {
			if(operand == operandOrder[i]) index = i;
		}
		return index;
	}
	
	public double getResult(String question) {
		char[] questionData = question.toCharArray(); 
		
		char operand = questionData[1];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double result = 0;
		
		if(operand == '+') result = firstNumber + secondNumber;
		if(operand == '-') result = firstNumber - secondNumber;
		if(operand == '*') result = firstNumber * secondNumber;
		if(operand == '/') result = firstNumber / secondNumber;
		double roundedResult = Math.round(result);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	public double getResultAverage(String question) {
		char[] questionData = question.toCharArray(); 
		
		char firstOperand = questionData[1];
		char secondOperand = questionData[3];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double thirdNumber = Double.parseDouble(String.valueOf(questionData[4]));
		double result = 0;
		
		
		char[] operandOrder = {'-', '+', '/', '*'};
		int indexFirst = findIndex(firstOperand);
		int indexSecond = findIndex(secondOperand);
		double totalResult = 0;
		double initialResult = 0;
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+') initialResult = secondNumber + thirdNumber;
			if(secondOperand == '-') initialResult = secondNumber - thirdNumber;
			if(secondOperand == '*') initialResult = secondNumber * thirdNumber;
			if(secondOperand == '/') initialResult = secondNumber / thirdNumber;
			
			
		}
		else if (indexSecond < indexFirst) {
			if(firstOperand == '+') initialResult = firstNumber + secondNumber;
			if(firstOperand == '-') initialResult = firstNumber - secondNumber;
			if(firstOperand == '*') initialResult = firstNumber * secondNumber;
			if(firstOperand == '/') initialResult = firstNumber / secondNumber;
		}
		else {
			if(firstOperand == '+') totalResult = firstNumber + secondNumber + thirdNumber;
			if(firstOperand == '-') totalResult = firstNumber - secondNumber - thirdNumber;
			if(firstOperand == '*') totalResult = firstNumber * secondNumber * thirdNumber;
			if(firstOperand == '/') totalResult = firstNumber / secondNumber / thirdNumber;
		}
		
		
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+')  totalResult = firstNumber + thirdNumber;
			if(secondOperand == '-')  totalResult = firstNumber - thirdNumber;
			if(secondOperand == '*')  totalResult = firstNumber * thirdNumber;
			if(secondOperand == '/')  totalResult = firstNumber / thirdNumber;
			
			
		}
		else (indexSecond < indexFirst) {
			if(firstOperand == '+')  totalResult = initialResult + thirdNumber;
			if(firstOperand == '-')  totalResult = initialResult - thirdNumber;
			if(firstOperand == '*')  totalResult = initialResult * thirdNumber;
			if(firstOperand == '/')  totalResult = initialResult / thirdNumber;
		}
		
		
		
		
		
		double roundedResult = Math.round(totalResult);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	
	public String generateQuestion() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond];
		
		return question;
	}
	
	public String generateQuestionAverage() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexThird = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		int randomIndexOperand2 = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond] + operands[randomIndexOperand2] + numbers[randomIndexThird];
		System.out.println(question);
		return question;
	}
	
	
	public Main() {
		setIconImage(Toolkit.getDefaultToolkit().getImage("C:\\Users\\user\\Downloads\\quiz.png"));
		setTitle("QUIZ GAME");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(400, 100, 600, 600);
		contentPane = new JPanel();
		contentPane.setBackground(Color.WHITE);
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));

		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JPanel panel = new JPanel();
		panel.setBackground(Color.RED);
		panel.setBounds(10, 0, 564, 550);
		contentPane.add(panel);
		panel.setLayout(null);
		
		lblNewLabel_1_2_4 = new JLabel("quiz");
		lblNewLabel_1_2_4.setForeground(Color.WHITE);
		lblNewLabel_1_2_4.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_4.setBounds(140, 130, 561, 120);
		panel.add(lblNewLabel_1_2_4);
		
		lblNewLabel_1_2 = new JLabel("MATH");
		lblNewLabel_1_2.setForeground(Color.WHITE);
		lblNewLabel_1_2.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_2.setBounds(70, 50, 561, 120);
		panel.add(lblNewLabel_1_2);
		
		lblNewLabel_1 = new JLabel("MATH");
		lblNewLabel_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1.setForeground(Color.DARK_GRAY);
		lblNewLabel_1.setBounds(78, 50, 777, 120);
		panel.add(lblNewLabel_1);
		
		lblNewLabel_1_1 = new JLabel("MATH");
		lblNewLabel_1_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_1.setBounds(89, 50, 612, 120);
		panel.add(lblNewLabel_1_1);
		
		lblNewLabel_1_2_2 = new JLabel("quiz");
		lblNewLabel_1_2_2.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_2.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_2.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_2);
		
		lblNewLabel_1_2_1 = new JLabel("quiz");
		lblNewLabel_1_2_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_2_1.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_1.setBounds(159, 130, 561, 120);
		panel.add(lblNewLabel_1_2_1);
		
		lblNewLabel_1_2_3 = new JLabel("quiz");
		lblNewLabel_1_2_3.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_3.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_3.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_3);
		
		lblNewLabel = new JLabel("");
		lblNewLabel.setFont(new Font("Dialog", Font.BOLD, 9));
		lblNewLabel.setBounds(225, 428, 161, 14);
		panel.add(lblNewLabel);
		
		rdbtnEasy = new JRadioButton("EASY");
		rdbtnEasy.setForeground(Color.WHITE);
		rdbtnEasy.setBackground(Color.RED);
		rdbtnEasy.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnEasy.setBounds(215, 232, 269, 78);
		panel.add(rdbtnEasy);
		
		rdbtnAverage = new JRadioButton("AVERAGE");
		rdbtnAverage.setForeground(Color.WHITE);
		rdbtnAverage.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnAverage.setBackground(Color.RED);
		rdbtnAverage.setBounds(188, 290, 269, 73);
		panel.add(rdbtnAverage);
		
		rdbtnDifficult = new JRadioButton("DIFFICULT");
		rdbtnDifficult.setForeground(Color.WHITE);
		rdbtnDifficult.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnDifficult.setBackground(Color.RED);
		rdbtnDifficult.setBounds(176, 342, 269, 68);
		panel.add(rdbtnDifficult);
		
		ButtonGroup difficulty = new ButtonGroup();
		difficulty.add(rdbtnEasy);
		difficulty.add(rdbtnAverage);
		difficulty.add(rdbtnDifficult);
		
		btnStart = new JButton("START");
		
		
	
		
		btnStart.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
			if(rdbtnEasy.isSelected()){
				///////////
				
 				lblNewLabel_3.setText(generateQuestion());
 				
 				
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_1.setVisible(true);
				
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnAverage.isSelected()){
				
				lblNewLabel_3.setText(generateQuestionAverage());
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_2.setVisible(true);
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnDifficult.isSelected()){
				
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			}
		});
		btnStart.setBackground(Color.WHITE);
		btnStart.setForeground(Color.RED);
		btnStart.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnStart.setBounds(212, 453, 125, 43);
		panel.add(btnStart);
		
		lblNewLabel_2 = new JLabel("");
		lblNewLabel_2.setVisible(false);
		lblNewLabel_2.setForeground(Color.WHITE);
		lblNewLabel_2.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_2.setBounds(317, 90, 125, 129);
		panel.add(lblNewLabel_2);
		
		lblNewLabel_3 = new JLabel("");
		lblNewLabel_3.setVisible(false);
		lblNewLabel_3.setForeground(Color.WHITE);
		lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_3.setBounds(215, 90, 300, 200);
		panel.add(lblNewLabel_3);
		
		lblNewLabel_4 = new JLabel("");
		lblNewLabel_4.addMouseListener(new MouseAdapter() {
			public void mouseReleased(MouseEvent e) {
				
			}
		});
		lblNewLabel_4.setVisible(false);
		lblNewLabel_4.setForeground(Color.WHITE);
		lblNewLabel_4.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_4.setBounds(121, 90, 103, 129);
		panel.add(lblNewLabel_4);
				
		textField = new JTextField();
		textField.setHorizontalAlignment(SwingConstants.RIGHT);
		textField.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField.setVisible(false);
		textField.setBounds(121, 261, 324, 49);
		panel.add(textField);
		textField.setColumns(10);
		
		textField1 = new JTextField();
		textField1.setHorizontalAlignment(SwingConstants.RIGHT);
		textField1.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField1.setVisible(false);
		textField1.setBounds(121, 261, 324, 49);
		panel.add(textField1);
		textField1.setColumns(10);
		
		returnButton = new JButton("Return");
		returnButton.setVisible(false);
		returnButton.setFont(new Font("Tahoma", Font.BOLD, 20));
		returnButton.setForeground(Color.RED);
		returnButton.setBackground(Color.WHITE);
		returnButton.setBounds(225, 363, 126, 43);
		panel.add(returnButton);
		
		
		returnButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel.setVisible(true);
				rdbtnEasy.setVisible(true);
				rdbtnAverage.setVisible(true);
				rdbtnDifficult.setVisible(true);
				lblNewLabel_1_2_3.setVisible(true);
				lblNewLabel_1_2_1.setVisible(true);
				lblNewLabel_1_2_2.setVisible(true);
				lblNewLabel_1_1.setVisible(true);
				lblNewLabel_1.setVisible(true);
				lblNewLabel_1_2.setVisible(true);
				lblNewLabel_1_2_4.setVisible(true);
				btnStart.setVisible(true);
				returnButton.setVisible(false);
				lblNewLabel_3.setVisible(false);
				lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
			}

		
			
			
		});
		
		btnNewButton_1 = new JButton("SUBMIT");
		btnNewButton_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				
				
				double result = getResult(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
				
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
				
			}
		});
		btnNewButton_1.setVisible(false);
		btnNewButton_1.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_1.setForeground(Color.RED);
		btnNewButton_1.setBackground(Color.WHITE);
		btnNewButton_1.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_1);
		
		//Button 2
		btnNewButton_2 = new JButton("SUBMIT");
		btnNewButton_2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				double result = getResultAverage(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
			
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
			}
		});
		btnNewButton_2.setVisible(false);
		btnNewButton_2.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_2.setForeground(Color.RED);
		btnNewButton_2.setBackground(Color.WHITE);
		btnNewButton_2.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_2);
		
		
		textField2 = new JTextField();
		textField2.setHorizontalAlignment(SwingConstants.RIGHT);
		textField2.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField2.setVisible(false);
		textField2.setBounds(121, 261, 324, 49);
		panel.add(textField2);
		textField2.setColumns(10);
		
		btnNewButton_3 = new JButton("SUBMIT");
		btnNewButton_3.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel_2.setVisible(false);
				
				textField.setVisible(false);
				textField1.setVisible(false);
				btnNewButton_1.setVisible(false);
				btnNewButton_2.setVisible(false);
				
				textField2.setVisible(false);
				btnNewButton_3.setVisible(false);
				
				
				
			}
		});
		btnNewButton_3.setVisible(false);
		btnNewButton_3.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_3.setForeground(Color.RED);
		btnNewButton_3.setBackground(Color.WHITE);
		btnNewButton_3.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_3);
		
		
	}
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-04-30 17:33:13.600
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-04-30 17:33:13.600
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-30 17:33:13.627
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import java.awt.Color;
import java.awt.Toolkit;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

import java.awt.Font;
import javax.swing.JRadioButton;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Arrays;
import java.util.Random;


public class Main extends JFrame {

	private JPanel contentPane;
	private JLabel lblNewLabel_1_2;
	private JLabel lblNewLabel_1;
	private JLabel lblNewLabel_1_1; 
	private JLabel lblNewLabel_1_2_1;
	private JLabel lblNewLabel_1_2_2;
	private JLabel lblNewLabel_1_2_3;
	private JLabel lblNewLabel_1_2_4;
	private JRadioButton rdbtnEasy;
	private JRadioButton rdbtnAverage;
	private JRadioButton rdbtnDifficult;
	private JButton btnStart; 
	private JLabel lblNewLabel;
	private JLabel lblNewLabel_2;
	private JLabel lblNewLabel_3;
	private JLabel lblNewLabel_4;
	private JTextField textField;
	private JButton btnNewButton_1;
	private JTextField textField1;
	private JButton btnNewButton_2;
	private JButton returnButton;

	private JTextField textField2;
	private JButton btnNewButton_3;
	int currentQuestionNumber = 1;
	int playerScore = 0;
	Random random = new Random();
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Main frame = new Main();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
	
	
	
	

	/**
	 * Create the frame.
	 */
	
	
	public int findIndex(char operand) {
		char[] operandOrder = {'-', '+', '/', '*'};
		int index = 0;
		
		for(int i = 0; i < operandOrder.length; i++) {
			if(operand == operandOrder[i]) index = i;
		}
		return index;
	}
	
	public double getResult(String question) {
		char[] questionData = question.toCharArray(); 
		
		char operand = questionData[1];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double result = 0;
		
		if(operand == '+') result = firstNumber + secondNumber;
		if(operand == '-') result = firstNumber - secondNumber;
		if(operand == '*') result = firstNumber * secondNumber;
		if(operand == '/') result = firstNumber / secondNumber;
		double roundedResult = Math.round(result);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	public double getResultAverage(String question) {
		char[] questionData = question.toCharArray(); 
		
		char firstOperand = questionData[1];
		char secondOperand = questionData[3];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double thirdNumber = Double.parseDouble(String.valueOf(questionData[4]));
		double result = 0;
		
		
		char[] operandOrder = {'-', '+', '/', '*'};
		int indexFirst = findIndex(firstOperand);
		int indexSecond = findIndex(secondOperand);
		double totalResult = 0;
		double initialResult = 0;
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+') initialResult = secondNumber + thirdNumber;
			if(secondOperand == '-') initialResult = secondNumber - thirdNumber;
			if(secondOperand == '*') initialResult = secondNumber * thirdNumber;
			if(secondOperand == '/') initialResult = secondNumber / thirdNumber;
			
			
		}
		else if (indexSecond < indexFirst) {
			if(firstOperand == '+') initialResult = firstNumber + secondNumber;
			if(firstOperand == '-') initialResult = firstNumber - secondNumber;
			if(firstOperand == '*') initialResult = firstNumber * secondNumber;
			if(firstOperand == '/') initialResult = firstNumber / secondNumber;
		}
		else {
			if(firstOperand == '+') totalResult = firstNumber + secondNumber + thirdNumber;
			if(firstOperand == '-') totalResult = firstNumber - secondNumber - thirdNumber;
			if(firstOperand == '*') totalResult = firstNumber * secondNumber * thirdNumber;
			if(firstOperand == '/') totalResult = firstNumber / secondNumber / thirdNumber;
		}
		
		
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+')  totalResult = firstNumber + thirdNumber;
			if(secondOperand == '-')  totalResult = firstNumber - thirdNumber;
			if(secondOperand == '*')  totalResult = firstNumber * thirdNumber;
			if(secondOperand == '/')  totalResult = firstNumber / thirdNumber;
			
			
		}
		else (indexSecond < indexFirst) {
			if(firstOperand == '+')  totalResult = initialResult + thirdNumber;
			if(firstOperand == '-')  totalResult = initialResult - thirdNumber;
			if(firstOperand == '*')  totalResult = initialResult * thirdNumber;
			if(firstOperand == '/')  totalResult = initialResult / thirdNumber;
		}
		
		
		
		
		
		double roundedResult = Math.round(totalResult);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	
	public String generateQuestion() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond];
		
		return question;
	}
	
	public String generateQuestionAverage() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexThird = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		int randomIndexOperand2 = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond] + operands[randomIndexOperand2] + numbers[randomIndexThird];
		System.out.println(question);
		return question;
	}
	
	
	public Main() {
		setIconImage(Toolkit.getDefaultToolkit().getImage("C:\\Users\\user\\Downloads\\quiz.png"));
		setTitle("QUIZ GAME");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(400, 100, 600, 600);
		contentPane = new JPanel();
		contentPane.setBackground(Color.WHITE);
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));

		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JPanel panel = new JPanel();
		panel.setBackground(Color.RED);
		panel.setBounds(10, 0, 564, 550);
		contentPane.add(panel);
		panel.setLayout(null);
		
		lblNewLabel_1_2_4 = new JLabel("quiz");
		lblNewLabel_1_2_4.setForeground(Color.WHITE);
		lblNewLabel_1_2_4.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_4.setBounds(140, 130, 561, 120);
		panel.add(lblNewLabel_1_2_4);
		
		lblNewLabel_1_2 = new JLabel("MATH");
		lblNewLabel_1_2.setForeground(Color.WHITE);
		lblNewLabel_1_2.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_2.setBounds(70, 50, 561, 120);
		panel.add(lblNewLabel_1_2);
		
		lblNewLabel_1 = new JLabel("MATH");
		lblNewLabel_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1.setForeground(Color.DARK_GRAY);
		lblNewLabel_1.setBounds(78, 50, 777, 120);
		panel.add(lblNewLabel_1);
		
		lblNewLabel_1_1 = new JLabel("MATH");
		lblNewLabel_1_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_1.setBounds(89, 50, 612, 120);
		panel.add(lblNewLabel_1_1);
		
		lblNewLabel_1_2_2 = new JLabel("quiz");
		lblNewLabel_1_2_2.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_2.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_2.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_2);
		
		lblNewLabel_1_2_1 = new JLabel("quiz");
		lblNewLabel_1_2_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_2_1.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_1.setBounds(159, 130, 561, 120);
		panel.add(lblNewLabel_1_2_1);
		
		lblNewLabel_1_2_3 = new JLabel("quiz");
		lblNewLabel_1_2_3.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_3.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_3.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_3);
		
		lblNewLabel = new JLabel("");
		lblNewLabel.setFont(new Font("Dialog", Font.BOLD, 9));
		lblNewLabel.setBounds(225, 428, 161, 14);
		panel.add(lblNewLabel);
		
		rdbtnEasy = new JRadioButton("EASY");
		rdbtnEasy.setForeground(Color.WHITE);
		rdbtnEasy.setBackground(Color.RED);
		rdbtnEasy.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnEasy.setBounds(215, 232, 269, 78);
		panel.add(rdbtnEasy);
		
		rdbtnAverage = new JRadioButton("AVERAGE");
		rdbtnAverage.setForeground(Color.WHITE);
		rdbtnAverage.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnAverage.setBackground(Color.RED);
		rdbtnAverage.setBounds(188, 290, 269, 73);
		panel.add(rdbtnAverage);
		
		rdbtnDifficult = new JRadioButton("DIFFICULT");
		rdbtnDifficult.setForeground(Color.WHITE);
		rdbtnDifficult.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnDifficult.setBackground(Color.RED);
		rdbtnDifficult.setBounds(176, 342, 269, 68);
		panel.add(rdbtnDifficult);
		
		ButtonGroup difficulty = new ButtonGroup();
		difficulty.add(rdbtnEasy);
		difficulty.add(rdbtnAverage);
		difficulty.add(rdbtnDifficult);
		
		btnStart = new JButton("START");
		
		
	
		
		btnStart.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
			if(rdbtnEasy.isSelected()){
				///////////
				
 				lblNewLabel_3.setText(generateQuestion());
 				
 				
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_1.setVisible(true);
				
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnAverage.isSelected()){
				
				lblNewLabel_3.setText(generateQuestionAverage());
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_2.setVisible(true);
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnDifficult.isSelected()){
				
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			}
		});
		btnStart.setBackground(Color.WHITE);
		btnStart.setForeground(Color.RED);
		btnStart.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnStart.setBounds(212, 453, 125, 43);
		panel.add(btnStart);
		
		lblNewLabel_2 = new JLabel("");
		lblNewLabel_2.setVisible(false);
		lblNewLabel_2.setForeground(Color.WHITE);
		lblNewLabel_2.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_2.setBounds(317, 90, 125, 129);
		panel.add(lblNewLabel_2);
		
		lblNewLabel_3 = new JLabel("");
		lblNewLabel_3.setVisible(false);
		lblNewLabel_3.setForeground(Color.WHITE);
		lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_3.setBounds(215, 90, 300, 200);
		panel.add(lblNewLabel_3);
		
		lblNewLabel_4 = new JLabel("");
		lblNewLabel_4.addMouseListener(new MouseAdapter() {
			public void mouseReleased(MouseEvent e) {
				
			}
		});
		lblNewLabel_4.setVisible(false);
		lblNewLabel_4.setForeground(Color.WHITE);
		lblNewLabel_4.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_4.setBounds(121, 90, 103, 129);
		panel.add(lblNewLabel_4);
				
		textField = new JTextField();
		textField.setHorizontalAlignment(SwingConstants.RIGHT);
		textField.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField.setVisible(false);
		textField.setBounds(121, 261, 324, 49);
		panel.add(textField);
		textField.setColumns(10);
		
		textField1 = new JTextField();
		textField1.setHorizontalAlignment(SwingConstants.RIGHT);
		textField1.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField1.setVisible(false);
		textField1.setBounds(121, 261, 324, 49);
		panel.add(textField1);
		textField1.setColumns(10);
		
		returnButton = new JButton("Return");
		returnButton.setVisible(false);
		returnButton.setFont(new Font("Tahoma", Font.BOLD, 20));
		returnButton.setForeground(Color.RED);
		returnButton.setBackground(Color.WHITE);
		returnButton.setBounds(225, 363, 126, 43);
		panel.add(returnButton);
		
		
		returnButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel.setVisible(true);
				rdbtnEasy.setVisible(true);
				rdbtnAverage.setVisible(true);
				rdbtnDifficult.setVisible(true);
				lblNewLabel_1_2_3.setVisible(true);
				lblNewLabel_1_2_1.setVisible(true);
				lblNewLabel_1_2_2.setVisible(true);
				lblNewLabel_1_1.setVisible(true);
				lblNewLabel_1.setVisible(true);
				lblNewLabel_1_2.setVisible(true);
				lblNewLabel_1_2_4.setVisible(true);
				btnStart.setVisible(true);
				returnButton.setVisible(false);
				lblNewLabel_3.setVisible(false);
				lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
			}

		
			
			
		});
		
		btnNewButton_1 = new JButton("SUBMIT");
		btnNewButton_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				
				
				double result = getResult(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
				
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
				
			}
		});
		btnNewButton_1.setVisible(false);
		btnNewButton_1.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_1.setForeground(Color.RED);
		btnNewButton_1.setBackground(Color.WHITE);
		btnNewButton_1.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_1);
		
		//Button 2
		btnNewButton_2 = new JButton("SUBMIT");
		btnNewButton_2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				double result = getResultAverage(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
			
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
			}
		});
		btnNewButton_2.setVisible(false);
		btnNewButton_2.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_2.setForeground(Color.RED);
		btnNewButton_2.setBackground(Color.WHITE);
		btnNewButton_2.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_2);
		
		
		textField2 = new JTextField();
		textField2.setHorizontalAlignment(SwingConstants.RIGHT);
		textField2.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField2.setVisible(false);
		textField2.setBounds(121, 261, 324, 49);
		panel.add(textField2);
		textField2.setColumns(10);
		
		btnNewButton_3 = new JButton("SUBMIT");
		btnNewButton_3.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel_2.setVisible(false);
				
				textField.setVisible(false);
				textField1.setVisible(false);
				btnNewButton_1.setVisible(false);
				btnNewButton_2.setVisible(false);
				
				textField2.setVisible(false);
				btnNewButton_3.setVisible(false);
				
				
				
			}
		});
		btnNewButton_3.setVisible(false);
		btnNewButton_3.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_3.setForeground(Color.RED);
		btnNewButton_3.setBackground(Color.WHITE);
		btnNewButton_3.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_3);
		
		
	}
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:111)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-04-30 17:33:13.627
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:111)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-04-30 17:33:13.628
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:111)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-30 17:33:13.637
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import java.awt.Color;
import java.awt.Toolkit;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

import java.awt.Font;
import javax.swing.JRadioButton;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Arrays;
import java.util.Random;


public class Main extends JFrame {

	private JPanel contentPane;
	private JLabel lblNewLabel_1_2;
	private JLabel lblNewLabel_1;
	private JLabel lblNewLabel_1_1; 
	private JLabel lblNewLabel_1_2_1;
	private JLabel lblNewLabel_1_2_2;
	private JLabel lblNewLabel_1_2_3;
	private JLabel lblNewLabel_1_2_4;
	private JRadioButton rdbtnEasy;
	private JRadioButton rdbtnAverage;
	private JRadioButton rdbtnDifficult;
	private JButton btnStart; 
	private JLabel lblNewLabel;
	private JLabel lblNewLabel_2;
	private JLabel lblNewLabel_3;
	private JLabel lblNewLabel_4;
	private JTextField textField;
	private JButton btnNewButton_1;
	private JTextField textField1;
	private JButton btnNewButton_2;
	private JButton returnButton;

	private JTextField textField2;
	private JButton btnNewButton_3;
	int currentQuestionNumber = 1;
	int playerScore = 0;
	Random random = new Random();
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Main frame = new Main();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
	
	
	
	

	/**
	 * Create the frame.
	 */
	
	
	public int findIndex(char operand) {
		char[] operandOrder = {'-', '+', '/', '*'};
		int index = 0;
		
		for(int i = 0; i < operandOrder.length; i++) {
			if(operand == operandOrder[i]) index = i;
		}
		return index;
	}
	
	public double getResult(String question) {
		char[] questionData = question.toCharArray(); 
		
		char operand = questionData[1];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double result = 0;
		
		if(operand == '+') result = firstNumber + secondNumber;
		if(operand == '-') result = firstNumber - secondNumber;
		if(operand == '*') result = firstNumber * secondNumber;
		if(operand == '/') result = firstNumber / secondNumber;
		double roundedResult = Math.round(result);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	public double getResultAverage(String question) {
		char[] questionData = question.toCharArray(); 
		
		char firstOperand = questionData[1];
		char secondOperand = questionData[3];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double thirdNumber = Double.parseDouble(String.valueOf(questionData[4]));
		double result = 0;
		
		
		char[] operandOrder = {'-', '+', '/', '*'};
		int indexFirst = findIndex(firstOperand);
		int indexSecond = findIndex(secondOperand);
		double totalResult = 0;
		double initialResult = 0;
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+') initialResult = secondNumber + thirdNumber;
			if(secondOperand == '-') initialResult = secondNumber - thirdNumber;
			if(secondOperand == '*') initialResult = secondNumber * thirdNumber;
			if(secondOperand == '/') initialResult = secondNumber / thirdNumber;
			
			
		}
		else if (indexSecond < indexFirst) {
			if(firstOperand == '+') initialResult = firstNumber + secondNumber;
			if(firstOperand == '-') initialResult = firstNumber - secondNumber;
			if(firstOperand == '*') initialResult = firstNumber * secondNumber;
			if(firstOperand == '/') initialResult = firstNumber / secondNumber;
		}
		else {
			if(firstOperand == '+') totalResult = firstNumber + secondNumber + thirdNumber;
			if(firstOperand == '-') totalResult = firstNumber - secondNumber - thirdNumber;
			if(firstOperand == '*') totalResult = firstNumber * secondNumber * thirdNumber;
			if(firstOperand == '/') totalResult = firstNumber / secondNumber / thirdNumber;
		}
		
		
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+')  totalResult = firstNumber + thirdNumber;
			if(secondOperand == '-')  totalResult = firstNumber - thirdNumber;
			if(secondOperand == '*')  totalResult = firstNumber * thirdNumber;
			if(secondOperand == '/')  totalResult = firstNumber / thirdNumber;
			
			
		}
		else (indexSecond < indexFirst) {
			if(firstOperand == '+')  totalResult = initialResult + thirdNumber;
			if(firstOperand == '-')  totalResult = initialResult - thirdNumber;
			if(firstOperand == '*')  totalResult = initialResult * thirdNumber;
			if(firstOperand == '/')  totalResult = initialResult / thirdNumber;
		}
		
		
		
		
		
		double roundedResult = Math.round(totalResult);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	
	public String generateQuestion() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond];
		
		return question;
	}
	
	public String generateQuestionAverage() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexThird = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		int randomIndexOperand2 = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond] + operands[randomIndexOperand2] + numbers[randomIndexThird];
		System.out.println(question);
		return question;
	}
	
	
	public Main() {
		setIconImage(Toolkit.getDefaultToolkit().getImage("C:\\Users\\user\\Downloads\\quiz.png"));
		setTitle("QUIZ GAME");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(400, 100, 600, 600);
		contentPane = new JPanel();
		contentPane.setBackground(Color.WHITE);
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));

		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JPanel panel = new JPanel();
		panel.setBackground(Color.RED);
		panel.setBounds(10, 0, 564, 550);
		contentPane.add(panel);
		panel.setLayout(null);
		
		lblNewLabel_1_2_4 = new JLabel("quiz");
		lblNewLabel_1_2_4.setForeground(Color.WHITE);
		lblNewLabel_1_2_4.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_4.setBounds(140, 130, 561, 120);
		panel.add(lblNewLabel_1_2_4);
		
		lblNewLabel_1_2 = new JLabel("MATH");
		lblNewLabel_1_2.setForeground(Color.WHITE);
		lblNewLabel_1_2.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_2.setBounds(70, 50, 561, 120);
		panel.add(lblNewLabel_1_2);
		
		lblNewLabel_1 = new JLabel("MATH");
		lblNewLabel_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1.setForeground(Color.DARK_GRAY);
		lblNewLabel_1.setBounds(78, 50, 777, 120);
		panel.add(lblNewLabel_1);
		
		lblNewLabel_1_1 = new JLabel("MATH");
		lblNewLabel_1_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_1.setBounds(89, 50, 612, 120);
		panel.add(lblNewLabel_1_1);
		
		lblNewLabel_1_2_2 = new JLabel("quiz");
		lblNewLabel_1_2_2.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_2.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_2.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_2);
		
		lblNewLabel_1_2_1 = new JLabel("quiz");
		lblNewLabel_1_2_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_2_1.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_1.setBounds(159, 130, 561, 120);
		panel.add(lblNewLabel_1_2_1);
		
		lblNewLabel_1_2_3 = new JLabel("quiz");
		lblNewLabel_1_2_3.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_3.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_3.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_3);
		
		lblNewLabel = new JLabel("");
		lblNewLabel.setFont(new Font("Dialog", Font.BOLD, 9));
		lblNewLabel.setBounds(225, 428, 161, 14);
		panel.add(lblNewLabel);
		
		rdbtnEasy = new JRadioButton("EASY");
		rdbtnEasy.setForeground(Color.WHITE);
		rdbtnEasy.setBackground(Color.RED);
		rdbtnEasy.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnEasy.setBounds(215, 232, 269, 78);
		panel.add(rdbtnEasy);
		
		rdbtnAverage = new JRadioButton("AVERAGE");
		rdbtnAverage.setForeground(Color.WHITE);
		rdbtnAverage.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnAverage.setBackground(Color.RED);
		rdbtnAverage.setBounds(188, 290, 269, 73);
		panel.add(rdbtnAverage);
		
		rdbtnDifficult = new JRadioButton("DIFFICULT");
		rdbtnDifficult.setForeground(Color.WHITE);
		rdbtnDifficult.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnDifficult.setBackground(Color.RED);
		rdbtnDifficult.setBounds(176, 342, 269, 68);
		panel.add(rdbtnDifficult);
		
		ButtonGroup difficulty = new ButtonGroup();
		difficulty.add(rdbtnEasy);
		difficulty.add(rdbtnAverage);
		difficulty.add(rdbtnDifficult);
		
		btnStart = new JButton("START");
		
		
	
		
		btnStart.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
			if(rdbtnEasy.isSelected()){
				///////////
				
 				lblNewLabel_3.setText(generateQuestion());
 				
 				
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_1.setVisible(true);
				
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnAverage.isSelected()){
				
				lblNewLabel_3.setText(generateQuestionAverage());
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_2.setVisible(true);
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnDifficult.isSelected()){
				
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			}
		});
		btnStart.setBackground(Color.WHITE);
		btnStart.setForeground(Color.RED);
		btnStart.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnStart.setBounds(212, 453, 125, 43);
		panel.add(btnStart);
		
		lblNewLabel_2 = new JLabel("");
		lblNewLabel_2.setVisible(false);
		lblNewLabel_2.setForeground(Color.WHITE);
		lblNewLabel_2.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_2.setBounds(317, 90, 125, 129);
		panel.add(lblNewLabel_2);
		
		lblNewLabel_3 = new JLabel("");
		lblNewLabel_3.setVisible(false);
		lblNewLabel_3.setForeground(Color.WHITE);
		lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_3.setBounds(215, 90, 300, 200);
		panel.add(lblNewLabel_3);
		
		lblNewLabel_4 = new JLabel("");
		lblNewLabel_4.addMouseListener(new MouseAdapter() {
			public void mouseReleased(MouseEvent e) {
				
			}
		});
		lblNewLabel_4.setVisible(false);
		lblNewLabel_4.setForeground(Color.WHITE);
		lblNewLabel_4.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_4.setBounds(121, 90, 103, 129);
		panel.add(lblNewLabel_4);
				
		textField = new JTextField();
		textField.setHorizontalAlignment(SwingConstants.RIGHT);
		textField.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField.setVisible(false);
		textField.setBounds(121, 261, 324, 49);
		panel.add(textField);
		textField.setColumns(10);
		
		textField1 = new JTextField();
		textField1.setHorizontalAlignment(SwingConstants.RIGHT);
		textField1.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField1.setVisible(false);
		textField1.setBounds(121, 261, 324, 49);
		panel.add(textField1);
		textField1.setColumns(10);
		
		returnButton = new JButton("Return");
		returnButton.setVisible(false);
		returnButton.setFont(new Font("Tahoma", Font.BOLD, 20));
		returnButton.setForeground(Color.RED);
		returnButton.setBackground(Color.WHITE);
		returnButton.setBounds(225, 363, 126, 43);
		panel.add(returnButton);
		
		
		returnButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel.setVisible(true);
				rdbtnEasy.setVisible(true);
				rdbtnAverage.setVisible(true);
				rdbtnDifficult.setVisible(true);
				lblNewLabel_1_2_3.setVisible(true);
				lblNewLabel_1_2_1.setVisible(true);
				lblNewLabel_1_2_2.setVisible(true);
				lblNewLabel_1_1.setVisible(true);
				lblNewLabel_1.setVisible(true);
				lblNewLabel_1_2.setVisible(true);
				lblNewLabel_1_2_4.setVisible(true);
				btnStart.setVisible(true);
				returnButton.setVisible(false);
				lblNewLabel_3.setVisible(false);
				lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
			}

		
			
			
		});
		
		btnNewButton_1 = new JButton("SUBMIT");
		btnNewButton_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				
				
				double result = getResult(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
				
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
				
			}
		});
		btnNewButton_1.setVisible(false);
		btnNewButton_1.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_1.setForeground(Color.RED);
		btnNewButton_1.setBackground(Color.WHITE);
		btnNewButton_1.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_1);
		
		//Button 2
		btnNewButton_2 = new JButton("SUBMIT");
		btnNewButton_2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				double result = getResultAverage(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
			
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
			}
		});
		btnNewButton_2.setVisible(false);
		btnNewButton_2.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_2.setForeground(Color.RED);
		btnNewButton_2.setBackground(Color.WHITE);
		btnNewButton_2.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_2);
		
		
		textField2 = new JTextField();
		textField2.setHorizontalAlignment(SwingConstants.RIGHT);
		textField2.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField2.setVisible(false);
		textField2.setBounds(121, 261, 324, 49);
		panel.add(textField2);
		textField2.setColumns(10);
		
		btnNewButton_3 = new JButton("SUBMIT");
		btnNewButton_3.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel_2.setVisible(false);
				
				textField.setVisible(false);
				textField1.setVisible(false);
				btnNewButton_1.setVisible(false);
				btnNewButton_2.setVisible(false);
				
				textField2.setVisible(false);
				btnNewButton_3.setVisible(false);
				
				
				
			}
		});
		btnNewButton_3.setVisible(false);
		btnNewButton_3.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_3.setForeground(Color.RED);
		btnNewButton_3.setBackground(Color.WHITE);
		btnNewButton_3.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_3);
		
		
	}
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.internal.core.manipulation.dom.ASTResolving.createQuickFixAST(ASTResolving.java:1052)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:131)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:111)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jface.text 4 0 2023-04-30 17:33:13.637
!MESSAGE Unexpected runtime error while computing a text hover
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.internal.core.manipulation.dom.ASTResolving.createQuickFixAST(ASTResolving.java:1052)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:131)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:111)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-30 17:33:24.793
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import java.awt.Color;
import java.awt.Toolkit;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

import java.awt.Font;
import javax.swing.JRadioButton;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Arrays;
import java.util.Random;


public class Main extends JFrame {

	private JPanel contentPane;
	private JLabel lblNewLabel_1_2;
	private JLabel lblNewLabel_1;
	private JLabel lblNewLabel_1_1; 
	private JLabel lblNewLabel_1_2_1;
	private JLabel lblNewLabel_1_2_2;
	private JLabel lblNewLabel_1_2_3;
	private JLabel lblNewLabel_1_2_4;
	private JRadioButton rdbtnEasy;
	private JRadioButton rdbtnAverage;
	private JRadioButton rdbtnDifficult;
	private JButton btnStart; 
	private JLabel lblNewLabel;
	private JLabel lblNewLabel_2;
	private JLabel lblNewLabel_3;
	private JLabel lblNewLabel_4;
	private JTextField textField;
	private JButton btnNewButton_1;
	private JTextField textField1;
	private JButton btnNewButton_2;
	private JButton returnButton;

	private JTextField textField2;
	private JButton btnNewButton_3;
	int currentQuestionNumber = 1;
	int playerScore = 0;
	Random random = new Random();
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Main frame = new Main();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
	
	
	
	

	/**
	 * Create the frame.
	 */
	
	
	public int findIndex(char operand) {
		char[] operandOrder = {'-', '+', '/', '*'};
		int index = 0;
		
		for(int i = 0; i < operandOrder.length; i++) {
			if(operand == operandOrder[i]) index = i;
		}
		return index;
	}
	
	public double getResult(String question) {
		char[] questionData = question.toCharArray(); 
		
		char operand = questionData[1];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double result = 0;
		
		if(operand == '+') result = firstNumber + secondNumber;
		if(operand == '-') result = firstNumber - secondNumber;
		if(operand == '*') result = firstNumber * secondNumber;
		if(operand == '/') result = firstNumber / secondNumber;
		double roundedResult = Math.round(result);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	public double getResultAverage(String question) {
		char[] questionData = question.toCharArray(); 
		
		char firstOperand = questionData[1];
		char secondOperand = questionData[3];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double thirdNumber = Double.parseDouble(String.valueOf(questionData[4]));
		double result = 0;
		
		
		char[] operandOrder = {'-', '+', '/', '*'};
		int indexFirst = findIndex(firstOperand);
		int indexSecond = findIndex(secondOperand);
		double totalResult = 0;
		double initialResult = 0;
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+') initialResult = secondNumber + thirdNumber;
			if(secondOperand == '-') initialResult = secondNumber - thirdNumber;
			if(secondOperand == '*') initialResult = secondNumber * thirdNumber;
			if(secondOperand == '/') initialResult = secondNumber / thirdNumber;
			
			
		}
		else if (indexSecond < indexFirst) {
			if(firstOperand == '+') initialResult = firstNumber + secondNumber;
			if(firstOperand == '-') initialResult = firstNumber - secondNumber;
			if(firstOperand == '*') initialResult = firstNumber * secondNumber;
			if(firstOperand == '/') initialResult = firstNumber / secondNumber;
		}
		else {
			if(firstOperand == '+') totalResult = firstNumber + secondNumber + thirdNumber;
			if(firstOperand == '-') totalResult = firstNumber - secondNumber - thirdNumber;
			if(firstOperand == '*') totalResult = firstNumber * secondNumber * thirdNumber;
			if(firstOperand == '/') totalResult = firstNumber / secondNumber / thirdNumber;
		}
		
		
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+')  totalResult = firstNumber + thirdNumber;
			if(secondOperand == '-')  totalResult = firstNumber - thirdNumber;
			if(secondOperand == '*')  totalResult = firstNumber * thirdNumber;
			if(secondOperand == '/')  totalResult = firstNumber / thirdNumber;
			
			
		}
		else (indexSecond < indexFirst) {
			if(firstOperand == '+')  totalResult = initialResult + thirdNumber;
			if(firstOperand == '-')  totalResult = initialResult - thirdNumber;
			if(firstOperand == '*')  totalResult = initialResult * thirdNumber;
			if(firstOperand == '/')  totalResult = initialResult / thirdNumber;
		}
		
		
		
		
		
		double roundedResult = Math.round(totalResult);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	
	public String generateQuestion() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond];
		
		return question;
	}
	
	public String generateQuestionAverage() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexThird = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		int randomIndexOperand2 = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond] + operands[randomIndexOperand2] + numbers[randomIndexThird];
		System.out.println(question);
		return question;
	}
	
	
	public Main() {
		setIconImage(Toolkit.getDefaultToolkit().getImage("C:\\Users\\user\\Downloads\\quiz.png"));
		setTitle("QUIZ GAME");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(400, 100, 600, 600);
		contentPane = new JPanel();
		contentPane.setBackground(Color.WHITE);
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));

		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JPanel panel = new JPanel();
		panel.setBackground(Color.RED);
		panel.setBounds(10, 0, 564, 550);
		contentPane.add(panel);
		panel.setLayout(null);
		
		lblNewLabel_1_2_4 = new JLabel("quiz");
		lblNewLabel_1_2_4.setForeground(Color.WHITE);
		lblNewLabel_1_2_4.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_4.setBounds(140, 130, 561, 120);
		panel.add(lblNewLabel_1_2_4);
		
		lblNewLabel_1_2 = new JLabel("MATH");
		lblNewLabel_1_2.setForeground(Color.WHITE);
		lblNewLabel_1_2.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_2.setBounds(70, 50, 561, 120);
		panel.add(lblNewLabel_1_2);
		
		lblNewLabel_1 = new JLabel("MATH");
		lblNewLabel_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1.setForeground(Color.DARK_GRAY);
		lblNewLabel_1.setBounds(78, 50, 777, 120);
		panel.add(lblNewLabel_1);
		
		lblNewLabel_1_1 = new JLabel("MATH");
		lblNewLabel_1_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_1.setBounds(89, 50, 612, 120);
		panel.add(lblNewLabel_1_1);
		
		lblNewLabel_1_2_2 = new JLabel("quiz");
		lblNewLabel_1_2_2.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_2.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_2.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_2);
		
		lblNewLabel_1_2_1 = new JLabel("quiz");
		lblNewLabel_1_2_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_2_1.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_1.setBounds(159, 130, 561, 120);
		panel.add(lblNewLabel_1_2_1);
		
		lblNewLabel_1_2_3 = new JLabel("quiz");
		lblNewLabel_1_2_3.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_3.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_3.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_3);
		
		lblNewLabel = new JLabel("");
		lblNewLabel.setFont(new Font("Dialog", Font.BOLD, 9));
		lblNewLabel.setBounds(225, 428, 161, 14);
		panel.add(lblNewLabel);
		
		rdbtnEasy = new JRadioButton("EASY");
		rdbtnEasy.setForeground(Color.WHITE);
		rdbtnEasy.setBackground(Color.RED);
		rdbtnEasy.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnEasy.setBounds(215, 232, 269, 78);
		panel.add(rdbtnEasy);
		
		rdbtnAverage = new JRadioButton("AVERAGE");
		rdbtnAverage.setForeground(Color.WHITE);
		rdbtnAverage.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnAverage.setBackground(Color.RED);
		rdbtnAverage.setBounds(188, 290, 269, 73);
		panel.add(rdbtnAverage);
		
		rdbtnDifficult = new JRadioButton("DIFFICULT");
		rdbtnDifficult.setForeground(Color.WHITE);
		rdbtnDifficult.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnDifficult.setBackground(Color.RED);
		rdbtnDifficult.setBounds(176, 342, 269, 68);
		panel.add(rdbtnDifficult);
		
		ButtonGroup difficulty = new ButtonGroup();
		difficulty.add(rdbtnEasy);
		difficulty.add(rdbtnAverage);
		difficulty.add(rdbtnDifficult);
		
		btnStart = new JButton("START");
		
		
	
		
		btnStart.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
			if(rdbtnEasy.isSelected()){
				///////////
				
 				lblNewLabel_3.setText(generateQuestion());
 				
 				
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_1.setVisible(true);
				
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnAverage.isSelected()){
				
				lblNewLabel_3.setText(generateQuestionAverage());
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_2.setVisible(true);
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnDifficult.isSelected()){
				
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			}
		});
		btnStart.setBackground(Color.WHITE);
		btnStart.setForeground(Color.RED);
		btnStart.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnStart.setBounds(212, 453, 125, 43);
		panel.add(btnStart);
		
		lblNewLabel_2 = new JLabel("");
		lblNewLabel_2.setVisible(false);
		lblNewLabel_2.setForeground(Color.WHITE);
		lblNewLabel_2.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_2.setBounds(317, 90, 125, 129);
		panel.add(lblNewLabel_2);
		
		lblNewLabel_3 = new JLabel("");
		lblNewLabel_3.setVisible(false);
		lblNewLabel_3.setForeground(Color.WHITE);
		lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_3.setBounds(215, 90, 300, 200);
		panel.add(lblNewLabel_3);
		
		lblNewLabel_4 = new JLabel("");
		lblNewLabel_4.addMouseListener(new MouseAdapter() {
			public void mouseReleased(MouseEvent e) {
				
			}
		});
		lblNewLabel_4.setVisible(false);
		lblNewLabel_4.setForeground(Color.WHITE);
		lblNewLabel_4.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_4.setBounds(121, 90, 103, 129);
		panel.add(lblNewLabel_4);
				
		textField = new JTextField();
		textField.setHorizontalAlignment(SwingConstants.RIGHT);
		textField.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField.setVisible(false);
		textField.setBounds(121, 261, 324, 49);
		panel.add(textField);
		textField.setColumns(10);
		
		textField1 = new JTextField();
		textField1.setHorizontalAlignment(SwingConstants.RIGHT);
		textField1.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField1.setVisible(false);
		textField1.setBounds(121, 261, 324, 49);
		panel.add(textField1);
		textField1.setColumns(10);
		
		returnButton = new JButton("Return");
		returnButton.setVisible(false);
		returnButton.setFont(new Font("Tahoma", Font.BOLD, 20));
		returnButton.setForeground(Color.RED);
		returnButton.setBackground(Color.WHITE);
		returnButton.setBounds(225, 363, 126, 43);
		panel.add(returnButton);
		
		
		returnButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel.setVisible(true);
				rdbtnEasy.setVisible(true);
				rdbtnAverage.setVisible(true);
				rdbtnDifficult.setVisible(true);
				lblNewLabel_1_2_3.setVisible(true);
				lblNewLabel_1_2_1.setVisible(true);
				lblNewLabel_1_2_2.setVisible(true);
				lblNewLabel_1_1.setVisible(true);
				lblNewLabel_1.setVisible(true);
				lblNewLabel_1_2.setVisible(true);
				lblNewLabel_1_2_4.setVisible(true);
				btnStart.setVisible(true);
				returnButton.setVisible(false);
				lblNewLabel_3.setVisible(false);
				lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
			}

		
			
			
		});
		
		btnNewButton_1 = new JButton("SUBMIT");
		btnNewButton_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				
				
				double result = getResult(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
				
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
				
			}
		});
		btnNewButton_1.setVisible(false);
		btnNewButton_1.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_1.setForeground(Color.RED);
		btnNewButton_1.setBackground(Color.WHITE);
		btnNewButton_1.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_1);
		
		//Button 2
		btnNewButton_2 = new JButton("SUBMIT");
		btnNewButton_2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				double result = getResultAverage(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
			
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
			}
		});
		btnNewButton_2.setVisible(false);
		btnNewButton_2.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_2.setForeground(Color.RED);
		btnNewButton_2.setBackground(Color.WHITE);
		btnNewButton_2.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_2);
		
		
		textField2 = new JTextField();
		textField2.setHorizontalAlignment(SwingConstants.RIGHT);
		textField2.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField2.setVisible(false);
		textField2.setBounds(121, 261, 324, 49);
		panel.add(textField2);
		textField2.setColumns(10);
		
		btnNewButton_3 = new JButton("SUBMIT");
		btnNewButton_3.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel_2.setVisible(false);
				
				textField.setVisible(false);
				textField1.setVisible(false);
				btnNewButton_1.setVisible(false);
				btnNewButton_2.setVisible(false);
				
				textField2.setVisible(false);
				btnNewButton_3.setVisible(false);
				
				
				
			}
		});
		btnNewButton_3.setVisible(false);
		btnNewButton_3.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_3.setForeground(Color.RED);
		btnNewButton_3.setBackground(Color.WHITE);
		btnNewButton_3.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_3);
		
		
	}
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-04-30 17:33:24.793
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-04-30 17:33:24.794
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-30 17:33:27.176
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import java.awt.Color;
import java.awt.Toolkit;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

import java.awt.Font;
import javax.swing.JRadioButton;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Arrays;
import java.util.Random;


public class Main extends JFrame {

	private JPanel contentPane;
	private JLabel lblNewLabel_1_2;
	private JLabel lblNewLabel_1;
	private JLabel lblNewLabel_1_1; 
	private JLabel lblNewLabel_1_2_1;
	private JLabel lblNewLabel_1_2_2;
	private JLabel lblNewLabel_1_2_3;
	private JLabel lblNewLabel_1_2_4;
	private JRadioButton rdbtnEasy;
	private JRadioButton rdbtnAverage;
	private JRadioButton rdbtnDifficult;
	private JButton btnStart; 
	private JLabel lblNewLabel;
	private JLabel lblNewLabel_2;
	private JLabel lblNewLabel_3;
	private JLabel lblNewLabel_4;
	private JTextField textField;
	private JButton btnNewButton_1;
	private JTextField textField1;
	private JButton btnNewButton_2;
	private JButton returnButton;

	private JTextField textField2;
	private JButton btnNewButton_3;
	int currentQuestionNumber = 1;
	int playerScore = 0;
	Random random = new Random();
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Main frame = new Main();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
	
	
	
	

	/**
	 * Create the frame.
	 */
	
	
	public int findIndex(char operand) {
		char[] operandOrder = {'-', '+', '/', '*'};
		int index = 0;
		
		for(int i = 0; i < operandOrder.length; i++) {
			if(operand == operandOrder[i]) index = i;
		}
		return index;
	}
	
	public double getResult(String question) {
		char[] questionData = question.toCharArray(); 
		
		char operand = questionData[1];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double result = 0;
		
		if(operand == '+') result = firstNumber + secondNumber;
		if(operand == '-') result = firstNumber - secondNumber;
		if(operand == '*') result = firstNumber * secondNumber;
		if(operand == '/') result = firstNumber / secondNumber;
		double roundedResult = Math.round(result);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	public double getResultAverage(String question) {
		char[] questionData = question.toCharArray(); 
		
		char firstOperand = questionData[1];
		char secondOperand = questionData[3];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double thirdNumber = Double.parseDouble(String.valueOf(questionData[4]));
		double result = 0;
		
		
		char[] operandOrder = {'-', '+', '/', '*'};
		int indexFirst = findIndex(firstOperand);
		int indexSecond = findIndex(secondOperand);
		double totalResult = 0;
		double initialResult = 0;
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+') initialResult = secondNumber + thirdNumber;
			if(secondOperand == '-') initialResult = secondNumber - thirdNumber;
			if(secondOperand == '*') initialResult = secondNumber * thirdNumber;
			if(secondOperand == '/') initialResult = secondNumber / thirdNumber;
			
			
		}
		else if (indexSecond < indexFirst) {
			if(firstOperand == '+') initialResult = firstNumber + secondNumber;
			if(firstOperand == '-') initialResult = firstNumber - secondNumber;
			if(firstOperand == '*') initialResult = firstNumber * secondNumber;
			if(firstOperand == '/') initialResult = firstNumber / secondNumber;
		}
		else {
			if(firstOperand == '+') totalResult = firstNumber + secondNumber + thirdNumber;
			if(firstOperand == '-') totalResult = firstNumber - secondNumber - thirdNumber;
			if(firstOperand == '*') totalResult = firstNumber * secondNumber * thirdNumber;
			if(firstOperand == '/') totalResult = firstNumber / secondNumber / thirdNumber;
		}
		
		
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+')  totalResult = firstNumber + thirdNumber;
			if(secondOperand == '-')  totalResult = firstNumber - thirdNumber;
			if(secondOperand == '*')  totalResult = firstNumber * thirdNumber;
			if(secondOperand == '/')  totalResult = firstNumber / thirdNumber;
			
			
		}
		
		else (indexSecond < indexFirst) {
			if(firstOperand == '+')  totalResult = initialResult + thirdNumber;
			if(firstOperand == '-')  totalResult = initialResult - thirdNumber;
			if(firstOperand == '*')  totalResult = initialResult * thirdNumber;
			if(firstOperand == '/')  totalResult = initialResult / thirdNumber;
		}
		
		
		
		
		
		double roundedResult = Math.round(totalResult);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	
	public String generateQuestion() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond];
		
		return question;
	}
	
	public String generateQuestionAverage() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexThird = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		int randomIndexOperand2 = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond] + operands[randomIndexOperand2] + numbers[randomIndexThird];
		System.out.println(question);
		return question;
	}
	
	
	public Main() {
		setIconImage(Toolkit.getDefaultToolkit().getImage("C:\\Users\\user\\Downloads\\quiz.png"));
		setTitle("QUIZ GAME");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(400, 100, 600, 600);
		contentPane = new JPanel();
		contentPane.setBackground(Color.WHITE);
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));

		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JPanel panel = new JPanel();
		panel.setBackground(Color.RED);
		panel.setBounds(10, 0, 564, 550);
		contentPane.add(panel);
		panel.setLayout(null);
		
		lblNewLabel_1_2_4 = new JLabel("quiz");
		lblNewLabel_1_2_4.setForeground(Color.WHITE);
		lblNewLabel_1_2_4.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_4.setBounds(140, 130, 561, 120);
		panel.add(lblNewLabel_1_2_4);
		
		lblNewLabel_1_2 = new JLabel("MATH");
		lblNewLabel_1_2.setForeground(Color.WHITE);
		lblNewLabel_1_2.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_2.setBounds(70, 50, 561, 120);
		panel.add(lblNewLabel_1_2);
		
		lblNewLabel_1 = new JLabel("MATH");
		lblNewLabel_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1.setForeground(Color.DARK_GRAY);
		lblNewLabel_1.setBounds(78, 50, 777, 120);
		panel.add(lblNewLabel_1);
		
		lblNewLabel_1_1 = new JLabel("MATH");
		lblNewLabel_1_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_1.setBounds(89, 50, 612, 120);
		panel.add(lblNewLabel_1_1);
		
		lblNewLabel_1_2_2 = new JLabel("quiz");
		lblNewLabel_1_2_2.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_2.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_2.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_2);
		
		lblNewLabel_1_2_1 = new JLabel("quiz");
		lblNewLabel_1_2_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_2_1.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_1.setBounds(159, 130, 561, 120);
		panel.add(lblNewLabel_1_2_1);
		
		lblNewLabel_1_2_3 = new JLabel("quiz");
		lblNewLabel_1_2_3.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_3.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_3.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_3);
		
		lblNewLabel = new JLabel("");
		lblNewLabel.setFont(new Font("Dialog", Font.BOLD, 9));
		lblNewLabel.setBounds(225, 428, 161, 14);
		panel.add(lblNewLabel);
		
		rdbtnEasy = new JRadioButton("EASY");
		rdbtnEasy.setForeground(Color.WHITE);
		rdbtnEasy.setBackground(Color.RED);
		rdbtnEasy.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnEasy.setBounds(215, 232, 269, 78);
		panel.add(rdbtnEasy);
		
		rdbtnAverage = new JRadioButton("AVERAGE");
		rdbtnAverage.setForeground(Color.WHITE);
		rdbtnAverage.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnAverage.setBackground(Color.RED);
		rdbtnAverage.setBounds(188, 290, 269, 73);
		panel.add(rdbtnAverage);
		
		rdbtnDifficult = new JRadioButton("DIFFICULT");
		rdbtnDifficult.setForeground(Color.WHITE);
		rdbtnDifficult.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnDifficult.setBackground(Color.RED);
		rdbtnDifficult.setBounds(176, 342, 269, 68);
		panel.add(rdbtnDifficult);
		
		ButtonGroup difficulty = new ButtonGroup();
		difficulty.add(rdbtnEasy);
		difficulty.add(rdbtnAverage);
		difficulty.add(rdbtnDifficult);
		
		btnStart = new JButton("START");
		
		
	
		
		btnStart.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
			if(rdbtnEasy.isSelected()){
				///////////
				
 				lblNewLabel_3.setText(generateQuestion());
 				
 				
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_1.setVisible(true);
				
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnAverage.isSelected()){
				
				lblNewLabel_3.setText(generateQuestionAverage());
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_2.setVisible(true);
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnDifficult.isSelected()){
				
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			}
		});
		btnStart.setBackground(Color.WHITE);
		btnStart.setForeground(Color.RED);
		btnStart.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnStart.setBounds(212, 453, 125, 43);
		panel.add(btnStart);
		
		lblNewLabel_2 = new JLabel("");
		lblNewLabel_2.setVisible(false);
		lblNewLabel_2.setForeground(Color.WHITE);
		lblNewLabel_2.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_2.setBounds(317, 90, 125, 129);
		panel.add(lblNewLabel_2);
		
		lblNewLabel_3 = new JLabel("");
		lblNewLabel_3.setVisible(false);
		lblNewLabel_3.setForeground(Color.WHITE);
		lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_3.setBounds(215, 90, 300, 200);
		panel.add(lblNewLabel_3);
		
		lblNewLabel_4 = new JLabel("");
		lblNewLabel_4.addMouseListener(new MouseAdapter() {
			public void mouseReleased(MouseEvent e) {
				
			}
		});
		lblNewLabel_4.setVisible(false);
		lblNewLabel_4.setForeground(Color.WHITE);
		lblNewLabel_4.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_4.setBounds(121, 90, 103, 129);
		panel.add(lblNewLabel_4);
				
		textField = new JTextField();
		textField.setHorizontalAlignment(SwingConstants.RIGHT);
		textField.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField.setVisible(false);
		textField.setBounds(121, 261, 324, 49);
		panel.add(textField);
		textField.setColumns(10);
		
		textField1 = new JTextField();
		textField1.setHorizontalAlignment(SwingConstants.RIGHT);
		textField1.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField1.setVisible(false);
		textField1.setBounds(121, 261, 324, 49);
		panel.add(textField1);
		textField1.setColumns(10);
		
		returnButton = new JButton("Return");
		returnButton.setVisible(false);
		returnButton.setFont(new Font("Tahoma", Font.BOLD, 20));
		returnButton.setForeground(Color.RED);
		returnButton.setBackground(Color.WHITE);
		returnButton.setBounds(225, 363, 126, 43);
		panel.add(returnButton);
		
		
		returnButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel.setVisible(true);
				rdbtnEasy.setVisible(true);
				rdbtnAverage.setVisible(true);
				rdbtnDifficult.setVisible(true);
				lblNewLabel_1_2_3.setVisible(true);
				lblNewLabel_1_2_1.setVisible(true);
				lblNewLabel_1_2_2.setVisible(true);
				lblNewLabel_1_1.setVisible(true);
				lblNewLabel_1.setVisible(true);
				lblNewLabel_1_2.setVisible(true);
				lblNewLabel_1_2_4.setVisible(true);
				btnStart.setVisible(true);
				returnButton.setVisible(false);
				lblNewLabel_3.setVisible(false);
				lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
			}

		
			
			
		});
		
		btnNewButton_1 = new JButton("SUBMIT");
		btnNewButton_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				
				
				double result = getResult(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
				
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
				
			}
		});
		btnNewButton_1.setVisible(false);
		btnNewButton_1.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_1.setForeground(Color.RED);
		btnNewButton_1.setBackground(Color.WHITE);
		btnNewButton_1.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_1);
		
		//Button 2
		btnNewButton_2 = new JButton("SUBMIT");
		btnNewButton_2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				double result = getResultAverage(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
			
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
			}
		});
		btnNewButton_2.setVisible(false);
		btnNewButton_2.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_2.setForeground(Color.RED);
		btnNewButton_2.setBackground(Color.WHITE);
		btnNewButton_2.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_2);
		
		
		textField2 = new JTextField();
		textField2.setHorizontalAlignment(SwingConstants.RIGHT);
		textField2.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField2.setVisible(false);
		textField2.setBounds(121, 261, 324, 49);
		panel.add(textField2);
		textField2.setColumns(10);
		
		btnNewButton_3 = new JButton("SUBMIT");
		btnNewButton_3.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel_2.setVisible(false);
				
				textField.setVisible(false);
				textField1.setVisible(false);
				btnNewButton_1.setVisible(false);
				btnNewButton_2.setVisible(false);
				
				textField2.setVisible(false);
				btnNewButton_3.setVisible(false);
				
				
				
			}
		});
		btnNewButton_3.setVisible(false);
		btnNewButton_3.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_3.setForeground(Color.RED);
		btnNewButton_3.setBackground(Color.WHITE);
		btnNewButton_3.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_3);
		
		
	}
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-04-30 17:33:27.177
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-04-30 17:33:27.177
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-30 17:33:27.189
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import java.awt.Color;
import java.awt.Toolkit;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

import java.awt.Font;
import javax.swing.JRadioButton;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Arrays;
import java.util.Random;


public class Main extends JFrame {

	private JPanel contentPane;
	private JLabel lblNewLabel_1_2;
	private JLabel lblNewLabel_1;
	private JLabel lblNewLabel_1_1; 
	private JLabel lblNewLabel_1_2_1;
	private JLabel lblNewLabel_1_2_2;
	private JLabel lblNewLabel_1_2_3;
	private JLabel lblNewLabel_1_2_4;
	private JRadioButton rdbtnEasy;
	private JRadioButton rdbtnAverage;
	private JRadioButton rdbtnDifficult;
	private JButton btnStart; 
	private JLabel lblNewLabel;
	private JLabel lblNewLabel_2;
	private JLabel lblNewLabel_3;
	private JLabel lblNewLabel_4;
	private JTextField textField;
	private JButton btnNewButton_1;
	private JTextField textField1;
	private JButton btnNewButton_2;
	private JButton returnButton;

	private JTextField textField2;
	private JButton btnNewButton_3;
	int currentQuestionNumber = 1;
	int playerScore = 0;
	Random random = new Random();
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Main frame = new Main();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
	
	
	
	

	/**
	 * Create the frame.
	 */
	
	
	public int findIndex(char operand) {
		char[] operandOrder = {'-', '+', '/', '*'};
		int index = 0;
		
		for(int i = 0; i < operandOrder.length; i++) {
			if(operand == operandOrder[i]) index = i;
		}
		return index;
	}
	
	public double getResult(String question) {
		char[] questionData = question.toCharArray(); 
		
		char operand = questionData[1];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double result = 0;
		
		if(operand == '+') result = firstNumber + secondNumber;
		if(operand == '-') result = firstNumber - secondNumber;
		if(operand == '*') result = firstNumber * secondNumber;
		if(operand == '/') result = firstNumber / secondNumber;
		double roundedResult = Math.round(result);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	public double getResultAverage(String question) {
		char[] questionData = question.toCharArray(); 
		
		char firstOperand = questionData[1];
		char secondOperand = questionData[3];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double thirdNumber = Double.parseDouble(String.valueOf(questionData[4]));
		double result = 0;
		
		
		char[] operandOrder = {'-', '+', '/', '*'};
		int indexFirst = findIndex(firstOperand);
		int indexSecond = findIndex(secondOperand);
		double totalResult = 0;
		double initialResult = 0;
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+') initialResult = secondNumber + thirdNumber;
			if(secondOperand == '-') initialResult = secondNumber - thirdNumber;
			if(secondOperand == '*') initialResult = secondNumber * thirdNumber;
			if(secondOperand == '/') initialResult = secondNumber / thirdNumber;
			
			
		}
		else if (indexSecond < indexFirst) {
			if(firstOperand == '+') initialResult = firstNumber + secondNumber;
			if(firstOperand == '-') initialResult = firstNumber - secondNumber;
			if(firstOperand == '*') initialResult = firstNumber * secondNumber;
			if(firstOperand == '/') initialResult = firstNumber / secondNumber;
		}
		else {
			if(firstOperand == '+') totalResult = firstNumber + secondNumber + thirdNumber;
			if(firstOperand == '-') totalResult = firstNumber - secondNumber - thirdNumber;
			if(firstOperand == '*') totalResult = firstNumber * secondNumber * thirdNumber;
			if(firstOperand == '/') totalResult = firstNumber / secondNumber / thirdNumber;
		}
		
		
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+')  totalResult = firstNumber + thirdNumber;
			if(secondOperand == '-')  totalResult = firstNumber - thirdNumber;
			if(secondOperand == '*')  totalResult = firstNumber * thirdNumber;
			if(secondOperand == '/')  totalResult = firstNumber / thirdNumber;
			
			
		}
		
		else (indexSecond < indexFirst) {
			if(firstOperand == '+')  totalResult = initialResult + thirdNumber;
			if(firstOperand == '-')  totalResult = initialResult - thirdNumber;
			if(firstOperand == '*')  totalResult = initialResult * thirdNumber;
			if(firstOperand == '/')  totalResult = initialResult / thirdNumber;
		}
		
		
		
		
		
		double roundedResult = Math.round(totalResult);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	
	public String generateQuestion() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond];
		
		return question;
	}
	
	public String generateQuestionAverage() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexThird = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		int randomIndexOperand2 = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond] + operands[randomIndexOperand2] + numbers[randomIndexThird];
		System.out.println(question);
		return question;
	}
	
	
	public Main() {
		setIconImage(Toolkit.getDefaultToolkit().getImage("C:\\Users\\user\\Downloads\\quiz.png"));
		setTitle("QUIZ GAME");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(400, 100, 600, 600);
		contentPane = new JPanel();
		contentPane.setBackground(Color.WHITE);
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));

		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JPanel panel = new JPanel();
		panel.setBackground(Color.RED);
		panel.setBounds(10, 0, 564, 550);
		contentPane.add(panel);
		panel.setLayout(null);
		
		lblNewLabel_1_2_4 = new JLabel("quiz");
		lblNewLabel_1_2_4.setForeground(Color.WHITE);
		lblNewLabel_1_2_4.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_4.setBounds(140, 130, 561, 120);
		panel.add(lblNewLabel_1_2_4);
		
		lblNewLabel_1_2 = new JLabel("MATH");
		lblNewLabel_1_2.setForeground(Color.WHITE);
		lblNewLabel_1_2.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_2.setBounds(70, 50, 561, 120);
		panel.add(lblNewLabel_1_2);
		
		lblNewLabel_1 = new JLabel("MATH");
		lblNewLabel_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1.setForeground(Color.DARK_GRAY);
		lblNewLabel_1.setBounds(78, 50, 777, 120);
		panel.add(lblNewLabel_1);
		
		lblNewLabel_1_1 = new JLabel("MATH");
		lblNewLabel_1_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_1.setBounds(89, 50, 612, 120);
		panel.add(lblNewLabel_1_1);
		
		lblNewLabel_1_2_2 = new JLabel("quiz");
		lblNewLabel_1_2_2.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_2.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_2.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_2);
		
		lblNewLabel_1_2_1 = new JLabel("quiz");
		lblNewLabel_1_2_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_2_1.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_1.setBounds(159, 130, 561, 120);
		panel.add(lblNewLabel_1_2_1);
		
		lblNewLabel_1_2_3 = new JLabel("quiz");
		lblNewLabel_1_2_3.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_3.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_3.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_3);
		
		lblNewLabel = new JLabel("");
		lblNewLabel.setFont(new Font("Dialog", Font.BOLD, 9));
		lblNewLabel.setBounds(225, 428, 161, 14);
		panel.add(lblNewLabel);
		
		rdbtnEasy = new JRadioButton("EASY");
		rdbtnEasy.setForeground(Color.WHITE);
		rdbtnEasy.setBackground(Color.RED);
		rdbtnEasy.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnEasy.setBounds(215, 232, 269, 78);
		panel.add(rdbtnEasy);
		
		rdbtnAverage = new JRadioButton("AVERAGE");
		rdbtnAverage.setForeground(Color.WHITE);
		rdbtnAverage.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnAverage.setBackground(Color.RED);
		rdbtnAverage.setBounds(188, 290, 269, 73);
		panel.add(rdbtnAverage);
		
		rdbtnDifficult = new JRadioButton("DIFFICULT");
		rdbtnDifficult.setForeground(Color.WHITE);
		rdbtnDifficult.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnDifficult.setBackground(Color.RED);
		rdbtnDifficult.setBounds(176, 342, 269, 68);
		panel.add(rdbtnDifficult);
		
		ButtonGroup difficulty = new ButtonGroup();
		difficulty.add(rdbtnEasy);
		difficulty.add(rdbtnAverage);
		difficulty.add(rdbtnDifficult);
		
		btnStart = new JButton("START");
		
		
	
		
		btnStart.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
			if(rdbtnEasy.isSelected()){
				///////////
				
 				lblNewLabel_3.setText(generateQuestion());
 				
 				
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_1.setVisible(true);
				
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnAverage.isSelected()){
				
				lblNewLabel_3.setText(generateQuestionAverage());
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_2.setVisible(true);
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnDifficult.isSelected()){
				
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			}
		});
		btnStart.setBackground(Color.WHITE);
		btnStart.setForeground(Color.RED);
		btnStart.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnStart.setBounds(212, 453, 125, 43);
		panel.add(btnStart);
		
		lblNewLabel_2 = new JLabel("");
		lblNewLabel_2.setVisible(false);
		lblNewLabel_2.setForeground(Color.WHITE);
		lblNewLabel_2.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_2.setBounds(317, 90, 125, 129);
		panel.add(lblNewLabel_2);
		
		lblNewLabel_3 = new JLabel("");
		lblNewLabel_3.setVisible(false);
		lblNewLabel_3.setForeground(Color.WHITE);
		lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_3.setBounds(215, 90, 300, 200);
		panel.add(lblNewLabel_3);
		
		lblNewLabel_4 = new JLabel("");
		lblNewLabel_4.addMouseListener(new MouseAdapter() {
			public void mouseReleased(MouseEvent e) {
				
			}
		});
		lblNewLabel_4.setVisible(false);
		lblNewLabel_4.setForeground(Color.WHITE);
		lblNewLabel_4.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_4.setBounds(121, 90, 103, 129);
		panel.add(lblNewLabel_4);
				
		textField = new JTextField();
		textField.setHorizontalAlignment(SwingConstants.RIGHT);
		textField.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField.setVisible(false);
		textField.setBounds(121, 261, 324, 49);
		panel.add(textField);
		textField.setColumns(10);
		
		textField1 = new JTextField();
		textField1.setHorizontalAlignment(SwingConstants.RIGHT);
		textField1.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField1.setVisible(false);
		textField1.setBounds(121, 261, 324, 49);
		panel.add(textField1);
		textField1.setColumns(10);
		
		returnButton = new JButton("Return");
		returnButton.setVisible(false);
		returnButton.setFont(new Font("Tahoma", Font.BOLD, 20));
		returnButton.setForeground(Color.RED);
		returnButton.setBackground(Color.WHITE);
		returnButton.setBounds(225, 363, 126, 43);
		panel.add(returnButton);
		
		
		returnButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel.setVisible(true);
				rdbtnEasy.setVisible(true);
				rdbtnAverage.setVisible(true);
				rdbtnDifficult.setVisible(true);
				lblNewLabel_1_2_3.setVisible(true);
				lblNewLabel_1_2_1.setVisible(true);
				lblNewLabel_1_2_2.setVisible(true);
				lblNewLabel_1_1.setVisible(true);
				lblNewLabel_1.setVisible(true);
				lblNewLabel_1_2.setVisible(true);
				lblNewLabel_1_2_4.setVisible(true);
				btnStart.setVisible(true);
				returnButton.setVisible(false);
				lblNewLabel_3.setVisible(false);
				lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
			}

		
			
			
		});
		
		btnNewButton_1 = new JButton("SUBMIT");
		btnNewButton_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				
				
				double result = getResult(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
				
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
				
			}
		});
		btnNewButton_1.setVisible(false);
		btnNewButton_1.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_1.setForeground(Color.RED);
		btnNewButton_1.setBackground(Color.WHITE);
		btnNewButton_1.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_1);
		
		//Button 2
		btnNewButton_2 = new JButton("SUBMIT");
		btnNewButton_2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				double result = getResultAverage(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
			
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
			}
		});
		btnNewButton_2.setVisible(false);
		btnNewButton_2.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_2.setForeground(Color.RED);
		btnNewButton_2.setBackground(Color.WHITE);
		btnNewButton_2.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_2);
		
		
		textField2 = new JTextField();
		textField2.setHorizontalAlignment(SwingConstants.RIGHT);
		textField2.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField2.setVisible(false);
		textField2.setBounds(121, 261, 324, 49);
		panel.add(textField2);
		textField2.setColumns(10);
		
		btnNewButton_3 = new JButton("SUBMIT");
		btnNewButton_3.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel_2.setVisible(false);
				
				textField.setVisible(false);
				textField1.setVisible(false);
				btnNewButton_1.setVisible(false);
				btnNewButton_2.setVisible(false);
				
				textField2.setVisible(false);
				btnNewButton_3.setVisible(false);
				
				
				
			}
		});
		btnNewButton_3.setVisible(false);
		btnNewButton_3.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_3.setForeground(Color.RED);
		btnNewButton_3.setBackground(Color.WHITE);
		btnNewButton_3.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_3);
		
		
	}
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-04-30 17:33:27.189
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-04-30 17:33:27.190
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-30 17:33:35.612
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import java.awt.Color;
import java.awt.Toolkit;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

import java.awt.Font;
import javax.swing.JRadioButton;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Arrays;
import java.util.Random;


public class Main extends JFrame {

	private JPanel contentPane;
	private JLabel lblNewLabel_1_2;
	private JLabel lblNewLabel_1;
	private JLabel lblNewLabel_1_1; 
	private JLabel lblNewLabel_1_2_1;
	private JLabel lblNewLabel_1_2_2;
	private JLabel lblNewLabel_1_2_3;
	private JLabel lblNewLabel_1_2_4;
	private JRadioButton rdbtnEasy;
	private JRadioButton rdbtnAverage;
	private JRadioButton rdbtnDifficult;
	private JButton btnStart; 
	private JLabel lblNewLabel;
	private JLabel lblNewLabel_2;
	private JLabel lblNewLabel_3;
	private JLabel lblNewLabel_4;
	private JTextField textField;
	private JButton btnNewButton_1;
	private JTextField textField1;
	private JButton btnNewButton_2;
	private JButton returnButton;

	private JTextField textField2;
	private JButton btnNewButton_3;
	int currentQuestionNumber = 1;
	int playerScore = 0;
	Random random = new Random();
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Main frame = new Main();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
	
	
	
	

	/**
	 * Create the frame.
	 */
	
	
	public int findIndex(char operand) {
		char[] operandOrder = {'-', '+', '/', '*'};
		int index = 0;
		
		for(int i = 0; i < operandOrder.length; i++) {
			if(operand == operandOrder[i]) index = i;
		}
		return index;
	}
	
	public double getResult(String question) {
		char[] questionData = question.toCharArray(); 
		
		char operand = questionData[1];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double result = 0;
		
		if(operand == '+') result = firstNumber + secondNumber;
		if(operand == '-') result = firstNumber - secondNumber;
		if(operand == '*') result = firstNumber * secondNumber;
		if(operand == '/') result = firstNumber / secondNumber;
		double roundedResult = Math.round(result);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	public double getResultAverage(String question) {
		char[] questionData = question.toCharArray(); 
		
		char firstOperand = questionData[1];
		char secondOperand = questionData[3];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double thirdNumber = Double.parseDouble(String.valueOf(questionData[4]));
		double result = 0;
		
		
		char[] operandOrder = {'-', '+', '/', '*'};
		int indexFirst = findIndex(firstOperand);
		int indexSecond = findIndex(secondOperand);
		double totalResult = 0;
		double initialResult = 0;
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+') initialResult = secondNumber + thirdNumber;
			if(secondOperand == '-') initialResult = secondNumber - thirdNumber;
			if(secondOperand == '*') initialResult = secondNumber * thirdNumber;
			if(secondOperand == '/') initialResult = secondNumber / thirdNumber;
			
			
		}
		else if (indexSecond < indexFirst) {
			if(firstOperand == '+') initialResult = firstNumber + secondNumber;
			if(firstOperand == '-') initialResult = firstNumber - secondNumber;
			if(firstOperand == '*') initialResult = firstNumber * secondNumber;
			if(firstOperand == '/') initialResult = firstNumber / secondNumber;
		}
		else {
			if(firstOperand == '+') totalResult = firstNumber + secondNumber + thirdNumber;
			if(firstOperand == '-') totalResult = firstNumber - secondNumber - thirdNumber;
			if(firstOperand == '*') totalResult = firstNumber * secondNumber * thirdNumber;
			if(firstOperand == '/') totalResult = firstNumber / secondNumber / thirdNumber;
		}
		
		
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+')  totalResult = firstNumber + thirdNumber;
			if(secondOperand == '-')  totalResult = firstNumber - thirdNumber;
			if(secondOperand == '*')  totalResult = firstNumber * thirdNumber;
			if(secondOperand == '/')  totalResult = firstNumber / thirdNumber;
			
			
		}
		
		else (indexSecond < indexFirst) {
			if(firstOperand == '+')  totalResult = initialResult + thirdNumber;
			if(firstOperand == '-')  totalResult = initialResult - thirdNumber;
			if(firstOperand == '*')  totalResult = initialResult * thirdNumber;
			if(firstOperand == '/')  totalResult = initialResult / thirdNumber;
		}
		
		
		
		
		
		double roundedResult = Math.round(totalResult);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	
	public String generateQuestion() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond];
		
		return question;
	}
	
	public String generateQuestionAverage() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexThird = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		int randomIndexOperand2 = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond] + operands[randomIndexOperand2] + numbers[randomIndexThird];
		System.out.println(question);
		return question;
	}
	
	
	public Main() {
		setIconImage(Toolkit.getDefaultToolkit().getImage("C:\\Users\\user\\Downloads\\quiz.png"));
		setTitle("QUIZ GAME");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(400, 100, 600, 600);
		contentPane = new JPanel();
		contentPane.setBackground(Color.WHITE);
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));

		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JPanel panel = new JPanel();
		panel.setBackground(Color.RED);
		panel.setBounds(10, 0, 564, 550);
		contentPane.add(panel);
		panel.setLayout(null);
		
		lblNewLabel_1_2_4 = new JLabel("quiz");
		lblNewLabel_1_2_4.setForeground(Color.WHITE);
		lblNewLabel_1_2_4.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_4.setBounds(140, 130, 561, 120);
		panel.add(lblNewLabel_1_2_4);
		
		lblNewLabel_1_2 = new JLabel("MATH");
		lblNewLabel_1_2.setForeground(Color.WHITE);
		lblNewLabel_1_2.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_2.setBounds(70, 50, 561, 120);
		panel.add(lblNewLabel_1_2);
		
		lblNewLabel_1 = new JLabel("MATH");
		lblNewLabel_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1.setForeground(Color.DARK_GRAY);
		lblNewLabel_1.setBounds(78, 50, 777, 120);
		panel.add(lblNewLabel_1);
		
		lblNewLabel_1_1 = new JLabel("MATH");
		lblNewLabel_1_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_1.setBounds(89, 50, 612, 120);
		panel.add(lblNewLabel_1_1);
		
		lblNewLabel_1_2_2 = new JLabel("quiz");
		lblNewLabel_1_2_2.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_2.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_2.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_2);
		
		lblNewLabel_1_2_1 = new JLabel("quiz");
		lblNewLabel_1_2_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_2_1.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_1.setBounds(159, 130, 561, 120);
		panel.add(lblNewLabel_1_2_1);
		
		lblNewLabel_1_2_3 = new JLabel("quiz");
		lblNewLabel_1_2_3.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_3.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_3.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_3);
		
		lblNewLabel = new JLabel("");
		lblNewLabel.setFont(new Font("Dialog", Font.BOLD, 9));
		lblNewLabel.setBounds(225, 428, 161, 14);
		panel.add(lblNewLabel);
		
		rdbtnEasy = new JRadioButton("EASY");
		rdbtnEasy.setForeground(Color.WHITE);
		rdbtnEasy.setBackground(Color.RED);
		rdbtnEasy.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnEasy.setBounds(215, 232, 269, 78);
		panel.add(rdbtnEasy);
		
		rdbtnAverage = new JRadioButton("AVERAGE");
		rdbtnAverage.setForeground(Color.WHITE);
		rdbtnAverage.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnAverage.setBackground(Color.RED);
		rdbtnAverage.setBounds(188, 290, 269, 73);
		panel.add(rdbtnAverage);
		
		rdbtnDifficult = new JRadioButton("DIFFICULT");
		rdbtnDifficult.setForeground(Color.WHITE);
		rdbtnDifficult.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnDifficult.setBackground(Color.RED);
		rdbtnDifficult.setBounds(176, 342, 269, 68);
		panel.add(rdbtnDifficult);
		
		ButtonGroup difficulty = new ButtonGroup();
		difficulty.add(rdbtnEasy);
		difficulty.add(rdbtnAverage);
		difficulty.add(rdbtnDifficult);
		
		btnStart = new JButton("START");
		
		
	
		
		btnStart.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
			if(rdbtnEasy.isSelected()){
				///////////
				
 				lblNewLabel_3.setText(generateQuestion());
 				
 				
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_1.setVisible(true);
				
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnAverage.isSelected()){
				
				lblNewLabel_3.setText(generateQuestionAverage());
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_2.setVisible(true);
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnDifficult.isSelected()){
				
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			}
		});
		btnStart.setBackground(Color.WHITE);
		btnStart.setForeground(Color.RED);
		btnStart.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnStart.setBounds(212, 453, 125, 43);
		panel.add(btnStart);
		
		lblNewLabel_2 = new JLabel("");
		lblNewLabel_2.setVisible(false);
		lblNewLabel_2.setForeground(Color.WHITE);
		lblNewLabel_2.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_2.setBounds(317, 90, 125, 129);
		panel.add(lblNewLabel_2);
		
		lblNewLabel_3 = new JLabel("");
		lblNewLabel_3.setVisible(false);
		lblNewLabel_3.setForeground(Color.WHITE);
		lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_3.setBounds(215, 90, 300, 200);
		panel.add(lblNewLabel_3);
		
		lblNewLabel_4 = new JLabel("");
		lblNewLabel_4.addMouseListener(new MouseAdapter() {
			public void mouseReleased(MouseEvent e) {
				
			}
		});
		lblNewLabel_4.setVisible(false);
		lblNewLabel_4.setForeground(Color.WHITE);
		lblNewLabel_4.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_4.setBounds(121, 90, 103, 129);
		panel.add(lblNewLabel_4);
				
		textField = new JTextField();
		textField.setHorizontalAlignment(SwingConstants.RIGHT);
		textField.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField.setVisible(false);
		textField.setBounds(121, 261, 324, 49);
		panel.add(textField);
		textField.setColumns(10);
		
		textField1 = new JTextField();
		textField1.setHorizontalAlignment(SwingConstants.RIGHT);
		textField1.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField1.setVisible(false);
		textField1.setBounds(121, 261, 324, 49);
		panel.add(textField1);
		textField1.setColumns(10);
		
		returnButton = new JButton("Return");
		returnButton.setVisible(false);
		returnButton.setFont(new Font("Tahoma", Font.BOLD, 20));
		returnButton.setForeground(Color.RED);
		returnButton.setBackground(Color.WHITE);
		returnButton.setBounds(225, 363, 126, 43);
		panel.add(returnButton);
		
		
		returnButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel.setVisible(true);
				rdbtnEasy.setVisible(true);
				rdbtnAverage.setVisible(true);
				rdbtnDifficult.setVisible(true);
				lblNewLabel_1_2_3.setVisible(true);
				lblNewLabel_1_2_1.setVisible(true);
				lblNewLabel_1_2_2.setVisible(true);
				lblNewLabel_1_1.setVisible(true);
				lblNewLabel_1.setVisible(true);
				lblNewLabel_1_2.setVisible(true);
				lblNewLabel_1_2_4.setVisible(true);
				btnStart.setVisible(true);
				returnButton.setVisible(false);
				lblNewLabel_3.setVisible(false);
				lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
			}

		
			
			
		});
		
		btnNewButton_1 = new JButton("SUBMIT");
		btnNewButton_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				
				
				double result = getResult(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
				
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
				
			}
		});
		btnNewButton_1.setVisible(false);
		btnNewButton_1.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_1.setForeground(Color.RED);
		btnNewButton_1.setBackground(Color.WHITE);
		btnNewButton_1.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_1);
		
		//Button 2
		btnNewButton_2 = new JButton("SUBMIT");
		btnNewButton_2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				double result = getResultAverage(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
			
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
			}
		});
		btnNewButton_2.setVisible(false);
		btnNewButton_2.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_2.setForeground(Color.RED);
		btnNewButton_2.setBackground(Color.WHITE);
		btnNewButton_2.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_2);
		
		
		textField2 = new JTextField();
		textField2.setHorizontalAlignment(SwingConstants.RIGHT);
		textField2.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField2.setVisible(false);
		textField2.setBounds(121, 261, 324, 49);
		panel.add(textField2);
		textField2.setColumns(10);
		
		btnNewButton_3 = new JButton("SUBMIT");
		btnNewButton_3.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel_2.setVisible(false);
				
				textField.setVisible(false);
				textField1.setVisible(false);
				btnNewButton_1.setVisible(false);
				btnNewButton_2.setVisible(false);
				
				textField2.setVisible(false);
				btnNewButton_3.setVisible(false);
				
				
				
			}
		});
		btnNewButton_3.setVisible(false);
		btnNewButton_3.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_3.setForeground(Color.RED);
		btnNewButton_3.setBackground(Color.WHITE);
		btnNewButton_3.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_3);
		
		
	}
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:111)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-04-30 17:33:35.612
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:111)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-04-30 17:33:35.613
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:111)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-30 17:33:35.624
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import java.awt.Color;
import java.awt.Toolkit;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

import java.awt.Font;
import javax.swing.JRadioButton;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Arrays;
import java.util.Random;


public class Main extends JFrame {

	private JPanel contentPane;
	private JLabel lblNewLabel_1_2;
	private JLabel lblNewLabel_1;
	private JLabel lblNewLabel_1_1; 
	private JLabel lblNewLabel_1_2_1;
	private JLabel lblNewLabel_1_2_2;
	private JLabel lblNewLabel_1_2_3;
	private JLabel lblNewLabel_1_2_4;
	private JRadioButton rdbtnEasy;
	private JRadioButton rdbtnAverage;
	private JRadioButton rdbtnDifficult;
	private JButton btnStart; 
	private JLabel lblNewLabel;
	private JLabel lblNewLabel_2;
	private JLabel lblNewLabel_3;
	private JLabel lblNewLabel_4;
	private JTextField textField;
	private JButton btnNewButton_1;
	private JTextField textField1;
	private JButton btnNewButton_2;
	private JButton returnButton;

	private JTextField textField2;
	private JButton btnNewButton_3;
	int currentQuestionNumber = 1;
	int playerScore = 0;
	Random random = new Random();
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Main frame = new Main();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
	
	
	
	

	/**
	 * Create the frame.
	 */
	
	
	public int findIndex(char operand) {
		char[] operandOrder = {'-', '+', '/', '*'};
		int index = 0;
		
		for(int i = 0; i < operandOrder.length; i++) {
			if(operand == operandOrder[i]) index = i;
		}
		return index;
	}
	
	public double getResult(String question) {
		char[] questionData = question.toCharArray(); 
		
		char operand = questionData[1];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double result = 0;
		
		if(operand == '+') result = firstNumber + secondNumber;
		if(operand == '-') result = firstNumber - secondNumber;
		if(operand == '*') result = firstNumber * secondNumber;
		if(operand == '/') result = firstNumber / secondNumber;
		double roundedResult = Math.round(result);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	public double getResultAverage(String question) {
		char[] questionData = question.toCharArray(); 
		
		char firstOperand = questionData[1];
		char secondOperand = questionData[3];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double thirdNumber = Double.parseDouble(String.valueOf(questionData[4]));
		double result = 0;
		
		
		char[] operandOrder = {'-', '+', '/', '*'};
		int indexFirst = findIndex(firstOperand);
		int indexSecond = findIndex(secondOperand);
		double totalResult = 0;
		double initialResult = 0;
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+') initialResult = secondNumber + thirdNumber;
			if(secondOperand == '-') initialResult = secondNumber - thirdNumber;
			if(secondOperand == '*') initialResult = secondNumber * thirdNumber;
			if(secondOperand == '/') initialResult = secondNumber / thirdNumber;
			
			
		}
		else if (indexSecond < indexFirst) {
			if(firstOperand == '+') initialResult = firstNumber + secondNumber;
			if(firstOperand == '-') initialResult = firstNumber - secondNumber;
			if(firstOperand == '*') initialResult = firstNumber * secondNumber;
			if(firstOperand == '/') initialResult = firstNumber / secondNumber;
		}
		else {
			if(firstOperand == '+') totalResult = firstNumber + secondNumber + thirdNumber;
			if(firstOperand == '-') totalResult = firstNumber - secondNumber - thirdNumber;
			if(firstOperand == '*') totalResult = firstNumber * secondNumber * thirdNumber;
			if(firstOperand == '/') totalResult = firstNumber / secondNumber / thirdNumber;
		}
		
		
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+')  totalResult = firstNumber + thirdNumber;
			if(secondOperand == '-')  totalResult = firstNumber - thirdNumber;
			if(secondOperand == '*')  totalResult = firstNumber * thirdNumber;
			if(secondOperand == '/')  totalResult = firstNumber / thirdNumber;
			
			
		}
		
		else (indexSecond < indexFirst) {
			if(firstOperand == '+')  totalResult = initialResult + thirdNumber;
			if(firstOperand == '-')  totalResult = initialResult - thirdNumber;
			if(firstOperand == '*')  totalResult = initialResult * thirdNumber;
			if(firstOperand == '/')  totalResult = initialResult / thirdNumber;
		}
		
		
		
		
		
		double roundedResult = Math.round(totalResult);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	
	public String generateQuestion() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond];
		
		return question;
	}
	
	public String generateQuestionAverage() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexThird = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		int randomIndexOperand2 = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond] + operands[randomIndexOperand2] + numbers[randomIndexThird];
		System.out.println(question);
		return question;
	}
	
	
	public Main() {
		setIconImage(Toolkit.getDefaultToolkit().getImage("C:\\Users\\user\\Downloads\\quiz.png"));
		setTitle("QUIZ GAME");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(400, 100, 600, 600);
		contentPane = new JPanel();
		contentPane.setBackground(Color.WHITE);
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));

		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JPanel panel = new JPanel();
		panel.setBackground(Color.RED);
		panel.setBounds(10, 0, 564, 550);
		contentPane.add(panel);
		panel.setLayout(null);
		
		lblNewLabel_1_2_4 = new JLabel("quiz");
		lblNewLabel_1_2_4.setForeground(Color.WHITE);
		lblNewLabel_1_2_4.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_4.setBounds(140, 130, 561, 120);
		panel.add(lblNewLabel_1_2_4);
		
		lblNewLabel_1_2 = new JLabel("MATH");
		lblNewLabel_1_2.setForeground(Color.WHITE);
		lblNewLabel_1_2.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_2.setBounds(70, 50, 561, 120);
		panel.add(lblNewLabel_1_2);
		
		lblNewLabel_1 = new JLabel("MATH");
		lblNewLabel_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1.setForeground(Color.DARK_GRAY);
		lblNewLabel_1.setBounds(78, 50, 777, 120);
		panel.add(lblNewLabel_1);
		
		lblNewLabel_1_1 = new JLabel("MATH");
		lblNewLabel_1_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_1.setBounds(89, 50, 612, 120);
		panel.add(lblNewLabel_1_1);
		
		lblNewLabel_1_2_2 = new JLabel("quiz");
		lblNewLabel_1_2_2.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_2.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_2.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_2);
		
		lblNewLabel_1_2_1 = new JLabel("quiz");
		lblNewLabel_1_2_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_2_1.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_1.setBounds(159, 130, 561, 120);
		panel.add(lblNewLabel_1_2_1);
		
		lblNewLabel_1_2_3 = new JLabel("quiz");
		lblNewLabel_1_2_3.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_3.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_3.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_3);
		
		lblNewLabel = new JLabel("");
		lblNewLabel.setFont(new Font("Dialog", Font.BOLD, 9));
		lblNewLabel.setBounds(225, 428, 161, 14);
		panel.add(lblNewLabel);
		
		rdbtnEasy = new JRadioButton("EASY");
		rdbtnEasy.setForeground(Color.WHITE);
		rdbtnEasy.setBackground(Color.RED);
		rdbtnEasy.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnEasy.setBounds(215, 232, 269, 78);
		panel.add(rdbtnEasy);
		
		rdbtnAverage = new JRadioButton("AVERAGE");
		rdbtnAverage.setForeground(Color.WHITE);
		rdbtnAverage.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnAverage.setBackground(Color.RED);
		rdbtnAverage.setBounds(188, 290, 269, 73);
		panel.add(rdbtnAverage);
		
		rdbtnDifficult = new JRadioButton("DIFFICULT");
		rdbtnDifficult.setForeground(Color.WHITE);
		rdbtnDifficult.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnDifficult.setBackground(Color.RED);
		rdbtnDifficult.setBounds(176, 342, 269, 68);
		panel.add(rdbtnDifficult);
		
		ButtonGroup difficulty = new ButtonGroup();
		difficulty.add(rdbtnEasy);
		difficulty.add(rdbtnAverage);
		difficulty.add(rdbtnDifficult);
		
		btnStart = new JButton("START");
		
		
	
		
		btnStart.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
			if(rdbtnEasy.isSelected()){
				///////////
				
 				lblNewLabel_3.setText(generateQuestion());
 				
 				
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_1.setVisible(true);
				
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnAverage.isSelected()){
				
				lblNewLabel_3.setText(generateQuestionAverage());
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_2.setVisible(true);
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnDifficult.isSelected()){
				
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			}
		});
		btnStart.setBackground(Color.WHITE);
		btnStart.setForeground(Color.RED);
		btnStart.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnStart.setBounds(212, 453, 125, 43);
		panel.add(btnStart);
		
		lblNewLabel_2 = new JLabel("");
		lblNewLabel_2.setVisible(false);
		lblNewLabel_2.setForeground(Color.WHITE);
		lblNewLabel_2.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_2.setBounds(317, 90, 125, 129);
		panel.add(lblNewLabel_2);
		
		lblNewLabel_3 = new JLabel("");
		lblNewLabel_3.setVisible(false);
		lblNewLabel_3.setForeground(Color.WHITE);
		lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_3.setBounds(215, 90, 300, 200);
		panel.add(lblNewLabel_3);
		
		lblNewLabel_4 = new JLabel("");
		lblNewLabel_4.addMouseListener(new MouseAdapter() {
			public void mouseReleased(MouseEvent e) {
				
			}
		});
		lblNewLabel_4.setVisible(false);
		lblNewLabel_4.setForeground(Color.WHITE);
		lblNewLabel_4.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_4.setBounds(121, 90, 103, 129);
		panel.add(lblNewLabel_4);
				
		textField = new JTextField();
		textField.setHorizontalAlignment(SwingConstants.RIGHT);
		textField.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField.setVisible(false);
		textField.setBounds(121, 261, 324, 49);
		panel.add(textField);
		textField.setColumns(10);
		
		textField1 = new JTextField();
		textField1.setHorizontalAlignment(SwingConstants.RIGHT);
		textField1.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField1.setVisible(false);
		textField1.setBounds(121, 261, 324, 49);
		panel.add(textField1);
		textField1.setColumns(10);
		
		returnButton = new JButton("Return");
		returnButton.setVisible(false);
		returnButton.setFont(new Font("Tahoma", Font.BOLD, 20));
		returnButton.setForeground(Color.RED);
		returnButton.setBackground(Color.WHITE);
		returnButton.setBounds(225, 363, 126, 43);
		panel.add(returnButton);
		
		
		returnButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel.setVisible(true);
				rdbtnEasy.setVisible(true);
				rdbtnAverage.setVisible(true);
				rdbtnDifficult.setVisible(true);
				lblNewLabel_1_2_3.setVisible(true);
				lblNewLabel_1_2_1.setVisible(true);
				lblNewLabel_1_2_2.setVisible(true);
				lblNewLabel_1_1.setVisible(true);
				lblNewLabel_1.setVisible(true);
				lblNewLabel_1_2.setVisible(true);
				lblNewLabel_1_2_4.setVisible(true);
				btnStart.setVisible(true);
				returnButton.setVisible(false);
				lblNewLabel_3.setVisible(false);
				lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
			}

		
			
			
		});
		
		btnNewButton_1 = new JButton("SUBMIT");
		btnNewButton_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				
				
				double result = getResult(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
				
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
				
			}
		});
		btnNewButton_1.setVisible(false);
		btnNewButton_1.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_1.setForeground(Color.RED);
		btnNewButton_1.setBackground(Color.WHITE);
		btnNewButton_1.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_1);
		
		//Button 2
		btnNewButton_2 = new JButton("SUBMIT");
		btnNewButton_2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				double result = getResultAverage(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
			
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
			}
		});
		btnNewButton_2.setVisible(false);
		btnNewButton_2.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_2.setForeground(Color.RED);
		btnNewButton_2.setBackground(Color.WHITE);
		btnNewButton_2.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_2);
		
		
		textField2 = new JTextField();
		textField2.setHorizontalAlignment(SwingConstants.RIGHT);
		textField2.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField2.setVisible(false);
		textField2.setBounds(121, 261, 324, 49);
		panel.add(textField2);
		textField2.setColumns(10);
		
		btnNewButton_3 = new JButton("SUBMIT");
		btnNewButton_3.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel_2.setVisible(false);
				
				textField.setVisible(false);
				textField1.setVisible(false);
				btnNewButton_1.setVisible(false);
				btnNewButton_2.setVisible(false);
				
				textField2.setVisible(false);
				btnNewButton_3.setVisible(false);
				
				
				
			}
		});
		btnNewButton_3.setVisible(false);
		btnNewButton_3.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_3.setForeground(Color.RED);
		btnNewButton_3.setBackground(Color.WHITE);
		btnNewButton_3.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_3);
		
		
	}
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.internal.core.manipulation.dom.ASTResolving.createQuickFixAST(ASTResolving.java:1052)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:131)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:111)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jface.text 4 0 2023-04-30 17:33:35.625
!MESSAGE Unexpected runtime error while computing a text hover
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.internal.core.manipulation.dom.ASTResolving.createQuickFixAST(ASTResolving.java:1052)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:131)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:111)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-30 17:33:36.562
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import java.awt.Color;
import java.awt.Toolkit;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

import java.awt.Font;
import javax.swing.JRadioButton;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Arrays;
import java.util.Random;


public class Main extends JFrame {

	private JPanel contentPane;
	private JLabel lblNewLabel_1_2;
	private JLabel lblNewLabel_1;
	private JLabel lblNewLabel_1_1; 
	private JLabel lblNewLabel_1_2_1;
	private JLabel lblNewLabel_1_2_2;
	private JLabel lblNewLabel_1_2_3;
	private JLabel lblNewLabel_1_2_4;
	private JRadioButton rdbtnEasy;
	private JRadioButton rdbtnAverage;
	private JRadioButton rdbtnDifficult;
	private JButton btnStart; 
	private JLabel lblNewLabel;
	private JLabel lblNewLabel_2;
	private JLabel lblNewLabel_3;
	private JLabel lblNewLabel_4;
	private JTextField textField;
	private JButton btnNewButton_1;
	private JTextField textField1;
	private JButton btnNewButton_2;
	private JButton returnButton;

	private JTextField textField2;
	private JButton btnNewButton_3;
	int currentQuestionNumber = 1;
	int playerScore = 0;
	Random random = new Random();
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Main frame = new Main();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
	
	
	
	

	/**
	 * Create the frame.
	 */
	
	
	public int findIndex(char operand) {
		char[] operandOrder = {'-', '+', '/', '*'};
		int index = 0;
		
		for(int i = 0; i < operandOrder.length; i++) {
			if(operand == operandOrder[i]) index = i;
		}
		return index;
	}
	
	public double getResult(String question) {
		char[] questionData = question.toCharArray(); 
		
		char operand = questionData[1];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double result = 0;
		
		if(operand == '+') result = firstNumber + secondNumber;
		if(operand == '-') result = firstNumber - secondNumber;
		if(operand == '*') result = firstNumber * secondNumber;
		if(operand == '/') result = firstNumber / secondNumber;
		double roundedResult = Math.round(result);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	public double getResultAverage(String question) {
		char[] questionData = question.toCharArray(); 
		
		char firstOperand = questionData[1];
		char secondOperand = questionData[3];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double thirdNumber = Double.parseDouble(String.valueOf(questionData[4]));
		double result = 0;
		
		
		char[] operandOrder = {'-', '+', '/', '*'};
		int indexFirst = findIndex(firstOperand);
		int indexSecond = findIndex(secondOperand);
		double totalResult = 0;
		double initialResult = 0;
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+') initialResult = secondNumber + thirdNumber;
			if(secondOperand == '-') initialResult = secondNumber - thirdNumber;
			if(secondOperand == '*') initialResult = secondNumber * thirdNumber;
			if(secondOperand == '/') initialResult = secondNumber / thirdNumber;
			
			
		}
		else if (indexSecond < indexFirst) {
			if(firstOperand == '+') initialResult = firstNumber + secondNumber;
			if(firstOperand == '-') initialResult = firstNumber - secondNumber;
			if(firstOperand == '*') initialResult = firstNumber * secondNumber;
			if(firstOperand == '/') initialResult = firstNumber / secondNumber;
		}
		else {
			if(firstOperand == '+') totalResult = firstNumber + secondNumber + thirdNumber;
			if(firstOperand == '-') totalResult = firstNumber - secondNumber - thirdNumber;
			if(firstOperand == '*') totalResult = firstNumber * secondNumber * thirdNumber;
			if(firstOperand == '/') totalResult = firstNumber / secondNumber / thirdNumber;
		}
		
		
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+')  totalResult = firstNumber + thirdNumber;
			if(secondOperand == '-')  totalResult = firstNumber - thirdNumber;
			if(secondOperand == '*')  totalResult = firstNumber * thirdNumber;
			if(secondOperand == '/')  totalResult = firstNumber / thirdNumber;
			
			
		}
		
		else (indexSecond < indexFirst) {
			if(firstOperand == '+')  totalResult = initialResult + thirdNumber;
			if(firstOperand == '-')  totalResult = initialResult - thirdNumber;
			if(firstOperand == '*')  totalResult = initialResult * thirdNumber;
			if(firstOperand == '/')  totalResult = initialResult / thirdNumber;
		}
		
		
		
		
		
		double roundedResult = Math.round(totalResult);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	
	public String generateQuestion() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond];
		
		return question;
	}
	
	public String generateQuestionAverage() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexThird = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		int randomIndexOperand2 = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond] + operands[randomIndexOperand2] + numbers[randomIndexThird];
		System.out.println(question);
		return question;
	}
	
	
	public Main() {
		setIconImage(Toolkit.getDefaultToolkit().getImage("C:\\Users\\user\\Downloads\\quiz.png"));
		setTitle("QUIZ GAME");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(400, 100, 600, 600);
		contentPane = new JPanel();
		contentPane.setBackground(Color.WHITE);
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));

		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JPanel panel = new JPanel();
		panel.setBackground(Color.RED);
		panel.setBounds(10, 0, 564, 550);
		contentPane.add(panel);
		panel.setLayout(null);
		
		lblNewLabel_1_2_4 = new JLabel("quiz");
		lblNewLabel_1_2_4.setForeground(Color.WHITE);
		lblNewLabel_1_2_4.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_4.setBounds(140, 130, 561, 120);
		panel.add(lblNewLabel_1_2_4);
		
		lblNewLabel_1_2 = new JLabel("MATH");
		lblNewLabel_1_2.setForeground(Color.WHITE);
		lblNewLabel_1_2.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_2.setBounds(70, 50, 561, 120);
		panel.add(lblNewLabel_1_2);
		
		lblNewLabel_1 = new JLabel("MATH");
		lblNewLabel_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1.setForeground(Color.DARK_GRAY);
		lblNewLabel_1.setBounds(78, 50, 777, 120);
		panel.add(lblNewLabel_1);
		
		lblNewLabel_1_1 = new JLabel("MATH");
		lblNewLabel_1_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_1.setBounds(89, 50, 612, 120);
		panel.add(lblNewLabel_1_1);
		
		lblNewLabel_1_2_2 = new JLabel("quiz");
		lblNewLabel_1_2_2.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_2.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_2.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_2);
		
		lblNewLabel_1_2_1 = new JLabel("quiz");
		lblNewLabel_1_2_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_2_1.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_1.setBounds(159, 130, 561, 120);
		panel.add(lblNewLabel_1_2_1);
		
		lblNewLabel_1_2_3 = new JLabel("quiz");
		lblNewLabel_1_2_3.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_3.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_3.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_3);
		
		lblNewLabel = new JLabel("");
		lblNewLabel.setFont(new Font("Dialog", Font.BOLD, 9));
		lblNewLabel.setBounds(225, 428, 161, 14);
		panel.add(lblNewLabel);
		
		rdbtnEasy = new JRadioButton("EASY");
		rdbtnEasy.setForeground(Color.WHITE);
		rdbtnEasy.setBackground(Color.RED);
		rdbtnEasy.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnEasy.setBounds(215, 232, 269, 78);
		panel.add(rdbtnEasy);
		
		rdbtnAverage = new JRadioButton("AVERAGE");
		rdbtnAverage.setForeground(Color.WHITE);
		rdbtnAverage.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnAverage.setBackground(Color.RED);
		rdbtnAverage.setBounds(188, 290, 269, 73);
		panel.add(rdbtnAverage);
		
		rdbtnDifficult = new JRadioButton("DIFFICULT");
		rdbtnDifficult.setForeground(Color.WHITE);
		rdbtnDifficult.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnDifficult.setBackground(Color.RED);
		rdbtnDifficult.setBounds(176, 342, 269, 68);
		panel.add(rdbtnDifficult);
		
		ButtonGroup difficulty = new ButtonGroup();
		difficulty.add(rdbtnEasy);
		difficulty.add(rdbtnAverage);
		difficulty.add(rdbtnDifficult);
		
		btnStart = new JButton("START");
		
		
	
		
		btnStart.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
			if(rdbtnEasy.isSelected()){
				///////////
				
 				lblNewLabel_3.setText(generateQuestion());
 				
 				
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_1.setVisible(true);
				
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnAverage.isSelected()){
				
				lblNewLabel_3.setText(generateQuestionAverage());
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_2.setVisible(true);
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnDifficult.isSelected()){
				
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			}
		});
		btnStart.setBackground(Color.WHITE);
		btnStart.setForeground(Color.RED);
		btnStart.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnStart.setBounds(212, 453, 125, 43);
		panel.add(btnStart);
		
		lblNewLabel_2 = new JLabel("");
		lblNewLabel_2.setVisible(false);
		lblNewLabel_2.setForeground(Color.WHITE);
		lblNewLabel_2.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_2.setBounds(317, 90, 125, 129);
		panel.add(lblNewLabel_2);
		
		lblNewLabel_3 = new JLabel("");
		lblNewLabel_3.setVisible(false);
		lblNewLabel_3.setForeground(Color.WHITE);
		lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_3.setBounds(215, 90, 300, 200);
		panel.add(lblNewLabel_3);
		
		lblNewLabel_4 = new JLabel("");
		lblNewLabel_4.addMouseListener(new MouseAdapter() {
			public void mouseReleased(MouseEvent e) {
				
			}
		});
		lblNewLabel_4.setVisible(false);
		lblNewLabel_4.setForeground(Color.WHITE);
		lblNewLabel_4.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_4.setBounds(121, 90, 103, 129);
		panel.add(lblNewLabel_4);
				
		textField = new JTextField();
		textField.setHorizontalAlignment(SwingConstants.RIGHT);
		textField.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField.setVisible(false);
		textField.setBounds(121, 261, 324, 49);
		panel.add(textField);
		textField.setColumns(10);
		
		textField1 = new JTextField();
		textField1.setHorizontalAlignment(SwingConstants.RIGHT);
		textField1.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField1.setVisible(false);
		textField1.setBounds(121, 261, 324, 49);
		panel.add(textField1);
		textField1.setColumns(10);
		
		returnButton = new JButton("Return");
		returnButton.setVisible(false);
		returnButton.setFont(new Font("Tahoma", Font.BOLD, 20));
		returnButton.setForeground(Color.RED);
		returnButton.setBackground(Color.WHITE);
		returnButton.setBounds(225, 363, 126, 43);
		panel.add(returnButton);
		
		
		returnButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel.setVisible(true);
				rdbtnEasy.setVisible(true);
				rdbtnAverage.setVisible(true);
				rdbtnDifficult.setVisible(true);
				lblNewLabel_1_2_3.setVisible(true);
				lblNewLabel_1_2_1.setVisible(true);
				lblNewLabel_1_2_2.setVisible(true);
				lblNewLabel_1_1.setVisible(true);
				lblNewLabel_1.setVisible(true);
				lblNewLabel_1_2.setVisible(true);
				lblNewLabel_1_2_4.setVisible(true);
				btnStart.setVisible(true);
				returnButton.setVisible(false);
				lblNewLabel_3.setVisible(false);
				lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
			}

		
			
			
		});
		
		btnNewButton_1 = new JButton("SUBMIT");
		btnNewButton_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				
				
				double result = getResult(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
				
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
				
			}
		});
		btnNewButton_1.setVisible(false);
		btnNewButton_1.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_1.setForeground(Color.RED);
		btnNewButton_1.setBackground(Color.WHITE);
		btnNewButton_1.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_1);
		
		//Button 2
		btnNewButton_2 = new JButton("SUBMIT");
		btnNewButton_2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				double result = getResultAverage(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
			
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
			}
		});
		btnNewButton_2.setVisible(false);
		btnNewButton_2.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_2.setForeground(Color.RED);
		btnNewButton_2.setBackground(Color.WHITE);
		btnNewButton_2.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_2);
		
		
		textField2 = new JTextField();
		textField2.setHorizontalAlignment(SwingConstants.RIGHT);
		textField2.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField2.setVisible(false);
		textField2.setBounds(121, 261, 324, 49);
		panel.add(textField2);
		textField2.setColumns(10);
		
		btnNewButton_3 = new JButton("SUBMIT");
		btnNewButton_3.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel_2.setVisible(false);
				
				textField.setVisible(false);
				textField1.setVisible(false);
				btnNewButton_1.setVisible(false);
				btnNewButton_2.setVisible(false);
				
				textField2.setVisible(false);
				btnNewButton_3.setVisible(false);
				
				
				
			}
		});
		btnNewButton_3.setVisible(false);
		btnNewButton_3.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_3.setForeground(Color.RED);
		btnNewButton_3.setBackground(Color.WHITE);
		btnNewButton_3.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_3);
		
		
	}
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:111)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-04-30 17:33:36.563
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:111)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-04-30 17:33:36.563
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:111)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-30 17:33:36.577
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import java.awt.Color;
import java.awt.Toolkit;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

import java.awt.Font;
import javax.swing.JRadioButton;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Arrays;
import java.util.Random;


public class Main extends JFrame {

	private JPanel contentPane;
	private JLabel lblNewLabel_1_2;
	private JLabel lblNewLabel_1;
	private JLabel lblNewLabel_1_1; 
	private JLabel lblNewLabel_1_2_1;
	private JLabel lblNewLabel_1_2_2;
	private JLabel lblNewLabel_1_2_3;
	private JLabel lblNewLabel_1_2_4;
	private JRadioButton rdbtnEasy;
	private JRadioButton rdbtnAverage;
	private JRadioButton rdbtnDifficult;
	private JButton btnStart; 
	private JLabel lblNewLabel;
	private JLabel lblNewLabel_2;
	private JLabel lblNewLabel_3;
	private JLabel lblNewLabel_4;
	private JTextField textField;
	private JButton btnNewButton_1;
	private JTextField textField1;
	private JButton btnNewButton_2;
	private JButton returnButton;

	private JTextField textField2;
	private JButton btnNewButton_3;
	int currentQuestionNumber = 1;
	int playerScore = 0;
	Random random = new Random();
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Main frame = new Main();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
	
	
	
	

	/**
	 * Create the frame.
	 */
	
	
	public int findIndex(char operand) {
		char[] operandOrder = {'-', '+', '/', '*'};
		int index = 0;
		
		for(int i = 0; i < operandOrder.length; i++) {
			if(operand == operandOrder[i]) index = i;
		}
		return index;
	}
	
	public double getResult(String question) {
		char[] questionData = question.toCharArray(); 
		
		char operand = questionData[1];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double result = 0;
		
		if(operand == '+') result = firstNumber + secondNumber;
		if(operand == '-') result = firstNumber - secondNumber;
		if(operand == '*') result = firstNumber * secondNumber;
		if(operand == '/') result = firstNumber / secondNumber;
		double roundedResult = Math.round(result);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	public double getResultAverage(String question) {
		char[] questionData = question.toCharArray(); 
		
		char firstOperand = questionData[1];
		char secondOperand = questionData[3];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double thirdNumber = Double.parseDouble(String.valueOf(questionData[4]));
		double result = 0;
		
		
		char[] operandOrder = {'-', '+', '/', '*'};
		int indexFirst = findIndex(firstOperand);
		int indexSecond = findIndex(secondOperand);
		double totalResult = 0;
		double initialResult = 0;
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+') initialResult = secondNumber + thirdNumber;
			if(secondOperand == '-') initialResult = secondNumber - thirdNumber;
			if(secondOperand == '*') initialResult = secondNumber * thirdNumber;
			if(secondOperand == '/') initialResult = secondNumber / thirdNumber;
			
			
		}
		else if (indexSecond < indexFirst) {
			if(firstOperand == '+') initialResult = firstNumber + secondNumber;
			if(firstOperand == '-') initialResult = firstNumber - secondNumber;
			if(firstOperand == '*') initialResult = firstNumber * secondNumber;
			if(firstOperand == '/') initialResult = firstNumber / secondNumber;
		}
		else {
			if(firstOperand == '+') totalResult = firstNumber + secondNumber + thirdNumber;
			if(firstOperand == '-') totalResult = firstNumber - secondNumber - thirdNumber;
			if(firstOperand == '*') totalResult = firstNumber * secondNumber * thirdNumber;
			if(firstOperand == '/') totalResult = firstNumber / secondNumber / thirdNumber;
		}
		
		
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+')  totalResult = firstNumber + thirdNumber;
			if(secondOperand == '-')  totalResult = firstNumber - thirdNumber;
			if(secondOperand == '*')  totalResult = firstNumber * thirdNumber;
			if(secondOperand == '/')  totalResult = firstNumber / thirdNumber;
			
			
		}
		
		else (indexSecond < indexFirst) {
			if(firstOperand == '+')  totalResult = initialResult + thirdNumber;
			if(firstOperand == '-')  totalResult = initialResult - thirdNumber;
			if(firstOperand == '*')  totalResult = initialResult * thirdNumber;
			if(firstOperand == '/')  totalResult = initialResult / thirdNumber;
		}
		
		
		
		
		
		double roundedResult = Math.round(totalResult);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	
	public String generateQuestion() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond];
		
		return question;
	}
	
	public String generateQuestionAverage() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexThird = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		int randomIndexOperand2 = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond] + operands[randomIndexOperand2] + numbers[randomIndexThird];
		System.out.println(question);
		return question;
	}
	
	
	public Main() {
		setIconImage(Toolkit.getDefaultToolkit().getImage("C:\\Users\\user\\Downloads\\quiz.png"));
		setTitle("QUIZ GAME");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(400, 100, 600, 600);
		contentPane = new JPanel();
		contentPane.setBackground(Color.WHITE);
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));

		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JPanel panel = new JPanel();
		panel.setBackground(Color.RED);
		panel.setBounds(10, 0, 564, 550);
		contentPane.add(panel);
		panel.setLayout(null);
		
		lblNewLabel_1_2_4 = new JLabel("quiz");
		lblNewLabel_1_2_4.setForeground(Color.WHITE);
		lblNewLabel_1_2_4.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_4.setBounds(140, 130, 561, 120);
		panel.add(lblNewLabel_1_2_4);
		
		lblNewLabel_1_2 = new JLabel("MATH");
		lblNewLabel_1_2.setForeground(Color.WHITE);
		lblNewLabel_1_2.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_2.setBounds(70, 50, 561, 120);
		panel.add(lblNewLabel_1_2);
		
		lblNewLabel_1 = new JLabel("MATH");
		lblNewLabel_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1.setForeground(Color.DARK_GRAY);
		lblNewLabel_1.setBounds(78, 50, 777, 120);
		panel.add(lblNewLabel_1);
		
		lblNewLabel_1_1 = new JLabel("MATH");
		lblNewLabel_1_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_1.setBounds(89, 50, 612, 120);
		panel.add(lblNewLabel_1_1);
		
		lblNewLabel_1_2_2 = new JLabel("quiz");
		lblNewLabel_1_2_2.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_2.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_2.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_2);
		
		lblNewLabel_1_2_1 = new JLabel("quiz");
		lblNewLabel_1_2_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_2_1.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_1.setBounds(159, 130, 561, 120);
		panel.add(lblNewLabel_1_2_1);
		
		lblNewLabel_1_2_3 = new JLabel("quiz");
		lblNewLabel_1_2_3.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_3.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_3.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_3);
		
		lblNewLabel = new JLabel("");
		lblNewLabel.setFont(new Font("Dialog", Font.BOLD, 9));
		lblNewLabel.setBounds(225, 428, 161, 14);
		panel.add(lblNewLabel);
		
		rdbtnEasy = new JRadioButton("EASY");
		rdbtnEasy.setForeground(Color.WHITE);
		rdbtnEasy.setBackground(Color.RED);
		rdbtnEasy.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnEasy.setBounds(215, 232, 269, 78);
		panel.add(rdbtnEasy);
		
		rdbtnAverage = new JRadioButton("AVERAGE");
		rdbtnAverage.setForeground(Color.WHITE);
		rdbtnAverage.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnAverage.setBackground(Color.RED);
		rdbtnAverage.setBounds(188, 290, 269, 73);
		panel.add(rdbtnAverage);
		
		rdbtnDifficult = new JRadioButton("DIFFICULT");
		rdbtnDifficult.setForeground(Color.WHITE);
		rdbtnDifficult.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnDifficult.setBackground(Color.RED);
		rdbtnDifficult.setBounds(176, 342, 269, 68);
		panel.add(rdbtnDifficult);
		
		ButtonGroup difficulty = new ButtonGroup();
		difficulty.add(rdbtnEasy);
		difficulty.add(rdbtnAverage);
		difficulty.add(rdbtnDifficult);
		
		btnStart = new JButton("START");
		
		
	
		
		btnStart.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
			if(rdbtnEasy.isSelected()){
				///////////
				
 				lblNewLabel_3.setText(generateQuestion());
 				
 				
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_1.setVisible(true);
				
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnAverage.isSelected()){
				
				lblNewLabel_3.setText(generateQuestionAverage());
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_2.setVisible(true);
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnDifficult.isSelected()){
				
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			}
		});
		btnStart.setBackground(Color.WHITE);
		btnStart.setForeground(Color.RED);
		btnStart.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnStart.setBounds(212, 453, 125, 43);
		panel.add(btnStart);
		
		lblNewLabel_2 = new JLabel("");
		lblNewLabel_2.setVisible(false);
		lblNewLabel_2.setForeground(Color.WHITE);
		lblNewLabel_2.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_2.setBounds(317, 90, 125, 129);
		panel.add(lblNewLabel_2);
		
		lblNewLabel_3 = new JLabel("");
		lblNewLabel_3.setVisible(false);
		lblNewLabel_3.setForeground(Color.WHITE);
		lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_3.setBounds(215, 90, 300, 200);
		panel.add(lblNewLabel_3);
		
		lblNewLabel_4 = new JLabel("");
		lblNewLabel_4.addMouseListener(new MouseAdapter() {
			public void mouseReleased(MouseEvent e) {
				
			}
		});
		lblNewLabel_4.setVisible(false);
		lblNewLabel_4.setForeground(Color.WHITE);
		lblNewLabel_4.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_4.setBounds(121, 90, 103, 129);
		panel.add(lblNewLabel_4);
				
		textField = new JTextField();
		textField.setHorizontalAlignment(SwingConstants.RIGHT);
		textField.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField.setVisible(false);
		textField.setBounds(121, 261, 324, 49);
		panel.add(textField);
		textField.setColumns(10);
		
		textField1 = new JTextField();
		textField1.setHorizontalAlignment(SwingConstants.RIGHT);
		textField1.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField1.setVisible(false);
		textField1.setBounds(121, 261, 324, 49);
		panel.add(textField1);
		textField1.setColumns(10);
		
		returnButton = new JButton("Return");
		returnButton.setVisible(false);
		returnButton.setFont(new Font("Tahoma", Font.BOLD, 20));
		returnButton.setForeground(Color.RED);
		returnButton.setBackground(Color.WHITE);
		returnButton.setBounds(225, 363, 126, 43);
		panel.add(returnButton);
		
		
		returnButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel.setVisible(true);
				rdbtnEasy.setVisible(true);
				rdbtnAverage.setVisible(true);
				rdbtnDifficult.setVisible(true);
				lblNewLabel_1_2_3.setVisible(true);
				lblNewLabel_1_2_1.setVisible(true);
				lblNewLabel_1_2_2.setVisible(true);
				lblNewLabel_1_1.setVisible(true);
				lblNewLabel_1.setVisible(true);
				lblNewLabel_1_2.setVisible(true);
				lblNewLabel_1_2_4.setVisible(true);
				btnStart.setVisible(true);
				returnButton.setVisible(false);
				lblNewLabel_3.setVisible(false);
				lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
			}

		
			
			
		});
		
		btnNewButton_1 = new JButton("SUBMIT");
		btnNewButton_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				
				
				double result = getResult(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
				
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
				
			}
		});
		btnNewButton_1.setVisible(false);
		btnNewButton_1.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_1.setForeground(Color.RED);
		btnNewButton_1.setBackground(Color.WHITE);
		btnNewButton_1.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_1);
		
		//Button 2
		btnNewButton_2 = new JButton("SUBMIT");
		btnNewButton_2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				double result = getResultAverage(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
			
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
			}
		});
		btnNewButton_2.setVisible(false);
		btnNewButton_2.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_2.setForeground(Color.RED);
		btnNewButton_2.setBackground(Color.WHITE);
		btnNewButton_2.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_2);
		
		
		textField2 = new JTextField();
		textField2.setHorizontalAlignment(SwingConstants.RIGHT);
		textField2.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField2.setVisible(false);
		textField2.setBounds(121, 261, 324, 49);
		panel.add(textField2);
		textField2.setColumns(10);
		
		btnNewButton_3 = new JButton("SUBMIT");
		btnNewButton_3.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel_2.setVisible(false);
				
				textField.setVisible(false);
				textField1.setVisible(false);
				btnNewButton_1.setVisible(false);
				btnNewButton_2.setVisible(false);
				
				textField2.setVisible(false);
				btnNewButton_3.setVisible(false);
				
				
				
			}
		});
		btnNewButton_3.setVisible(false);
		btnNewButton_3.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_3.setForeground(Color.RED);
		btnNewButton_3.setBackground(Color.WHITE);
		btnNewButton_3.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_3);
		
		
	}
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.internal.core.manipulation.dom.ASTResolving.createQuickFixAST(ASTResolving.java:1052)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:131)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:111)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jface.text 4 0 2023-04-30 17:33:36.578
!MESSAGE Unexpected runtime error while computing a text hover
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.internal.core.manipulation.dom.ASTResolving.createQuickFixAST(ASTResolving.java:1052)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:131)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:111)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-30 17:33:37.901
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import java.awt.Color;
import java.awt.Toolkit;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

import java.awt.Font;
import javax.swing.JRadioButton;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Arrays;
import java.util.Random;


public class Main extends JFrame {

	private JPanel contentPane;
	private JLabel lblNewLabel_1_2;
	private JLabel lblNewLabel_1;
	private JLabel lblNewLabel_1_1; 
	private JLabel lblNewLabel_1_2_1;
	private JLabel lblNewLabel_1_2_2;
	private JLabel lblNewLabel_1_2_3;
	private JLabel lblNewLabel_1_2_4;
	private JRadioButton rdbtnEasy;
	private JRadioButton rdbtnAverage;
	private JRadioButton rdbtnDifficult;
	private JButton btnStart; 
	private JLabel lblNewLabel;
	private JLabel lblNewLabel_2;
	private JLabel lblNewLabel_3;
	private JLabel lblNewLabel_4;
	private JTextField textField;
	private JButton btnNewButton_1;
	private JTextField textField1;
	private JButton btnNewButton_2;
	private JButton returnButton;

	private JTextField textField2;
	private JButton btnNewButton_3;
	int currentQuestionNumber = 1;
	int playerScore = 0;
	Random random = new Random();
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Main frame = new Main();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
	
	
	
	

	/**
	 * Create the frame.
	 */
	
	
	public int findIndex(char operand) {
		char[] operandOrder = {'-', '+', '/', '*'};
		int index = 0;
		
		for(int i = 0; i < operandOrder.length; i++) {
			if(operand == operandOrder[i]) index = i;
		}
		return index;
	}
	
	public double getResult(String question) {
		char[] questionData = question.toCharArray(); 
		
		char operand = questionData[1];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double result = 0;
		
		if(operand == '+') result = firstNumber + secondNumber;
		if(operand == '-') result = firstNumber - secondNumber;
		if(operand == '*') result = firstNumber * secondNumber;
		if(operand == '/') result = firstNumber / secondNumber;
		double roundedResult = Math.round(result);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	public double getResultAverage(String question) {
		char[] questionData = question.toCharArray(); 
		
		char firstOperand = questionData[1];
		char secondOperand = questionData[3];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double thirdNumber = Double.parseDouble(String.valueOf(questionData[4]));
		double result = 0;
		
		
		char[] operandOrder = {'-', '+', '/', '*'};
		int indexFirst = findIndex(firstOperand);
		int indexSecond = findIndex(secondOperand);
		double totalResult = 0;
		double initialResult = 0;
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+') initialResult = secondNumber + thirdNumber;
			if(secondOperand == '-') initialResult = secondNumber - thirdNumber;
			if(secondOperand == '*') initialResult = secondNumber * thirdNumber;
			if(secondOperand == '/') initialResult = secondNumber / thirdNumber;
			
			
		}
		else if (indexSecond < indexFirst) {
			if(firstOperand == '+') initialResult = firstNumber + secondNumber;
			if(firstOperand == '-') initialResult = firstNumber - secondNumber;
			if(firstOperand == '*') initialResult = firstNumber * secondNumber;
			if(firstOperand == '/') initialResult = firstNumber / secondNumber;
		}
		else {
			if(firstOperand == '+') totalResult = firstNumber + secondNumber + thirdNumber;
			if(firstOperand == '-') totalResult = firstNumber - secondNumber - thirdNumber;
			if(firstOperand == '*') totalResult = firstNumber * secondNumber * thirdNumber;
			if(firstOperand == '/') totalResult = firstNumber / secondNumber / thirdNumber;
		}
		
		
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+')  totalResult = firstNumber + thirdNumber;
			if(secondOperand == '-')  totalResult = firstNumber - thirdNumber;
			if(secondOperand == '*')  totalResult = firstNumber * thirdNumber;
			if(secondOperand == '/')  totalResult = firstNumber / thirdNumber;
			
			
		}
		
		else (indexSecond < indexFirst) {
			if(firstOperand == '+')  totalResult = initialResult + thirdNumber;
			if(firstOperand == '-')  totalResult = initialResult - thirdNumber;
			if(firstOperand == '*')  totalResult = initialResult * thirdNumber;
			if(firstOperand == '/')  totalResult = initialResult / thirdNumber;
		}
		
		
		
		
		
		double roundedResult = Math.round(totalResult);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	
	public String generateQuestion() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond];
		
		return question;
	}
	
	public String generateQuestionAverage() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexThird = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		int randomIndexOperand2 = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond] + operands[randomIndexOperand2] + numbers[randomIndexThird];
		System.out.println(question);
		return question;
	}
	
	
	public Main() {
		setIconImage(Toolkit.getDefaultToolkit().getImage("C:\\Users\\user\\Downloads\\quiz.png"));
		setTitle("QUIZ GAME");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(400, 100, 600, 600);
		contentPane = new JPanel();
		contentPane.setBackground(Color.WHITE);
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));

		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JPanel panel = new JPanel();
		panel.setBackground(Color.RED);
		panel.setBounds(10, 0, 564, 550);
		contentPane.add(panel);
		panel.setLayout(null);
		
		lblNewLabel_1_2_4 = new JLabel("quiz");
		lblNewLabel_1_2_4.setForeground(Color.WHITE);
		lblNewLabel_1_2_4.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_4.setBounds(140, 130, 561, 120);
		panel.add(lblNewLabel_1_2_4);
		
		lblNewLabel_1_2 = new JLabel("MATH");
		lblNewLabel_1_2.setForeground(Color.WHITE);
		lblNewLabel_1_2.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_2.setBounds(70, 50, 561, 120);
		panel.add(lblNewLabel_1_2);
		
		lblNewLabel_1 = new JLabel("MATH");
		lblNewLabel_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1.setForeground(Color.DARK_GRAY);
		lblNewLabel_1.setBounds(78, 50, 777, 120);
		panel.add(lblNewLabel_1);
		
		lblNewLabel_1_1 = new JLabel("MATH");
		lblNewLabel_1_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_1.setBounds(89, 50, 612, 120);
		panel.add(lblNewLabel_1_1);
		
		lblNewLabel_1_2_2 = new JLabel("quiz");
		lblNewLabel_1_2_2.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_2.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_2.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_2);
		
		lblNewLabel_1_2_1 = new JLabel("quiz");
		lblNewLabel_1_2_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_2_1.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_1.setBounds(159, 130, 561, 120);
		panel.add(lblNewLabel_1_2_1);
		
		lblNewLabel_1_2_3 = new JLabel("quiz");
		lblNewLabel_1_2_3.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_3.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_3.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_3);
		
		lblNewLabel = new JLabel("");
		lblNewLabel.setFont(new Font("Dialog", Font.BOLD, 9));
		lblNewLabel.setBounds(225, 428, 161, 14);
		panel.add(lblNewLabel);
		
		rdbtnEasy = new JRadioButton("EASY");
		rdbtnEasy.setForeground(Color.WHITE);
		rdbtnEasy.setBackground(Color.RED);
		rdbtnEasy.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnEasy.setBounds(215, 232, 269, 78);
		panel.add(rdbtnEasy);
		
		rdbtnAverage = new JRadioButton("AVERAGE");
		rdbtnAverage.setForeground(Color.WHITE);
		rdbtnAverage.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnAverage.setBackground(Color.RED);
		rdbtnAverage.setBounds(188, 290, 269, 73);
		panel.add(rdbtnAverage);
		
		rdbtnDifficult = new JRadioButton("DIFFICULT");
		rdbtnDifficult.setForeground(Color.WHITE);
		rdbtnDifficult.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnDifficult.setBackground(Color.RED);
		rdbtnDifficult.setBounds(176, 342, 269, 68);
		panel.add(rdbtnDifficult);
		
		ButtonGroup difficulty = new ButtonGroup();
		difficulty.add(rdbtnEasy);
		difficulty.add(rdbtnAverage);
		difficulty.add(rdbtnDifficult);
		
		btnStart = new JButton("START");
		
		
	
		
		btnStart.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
			if(rdbtnEasy.isSelected()){
				///////////
				
 				lblNewLabel_3.setText(generateQuestion());
 				
 				
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_1.setVisible(true);
				
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnAverage.isSelected()){
				
				lblNewLabel_3.setText(generateQuestionAverage());
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_2.setVisible(true);
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnDifficult.isSelected()){
				
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			}
		});
		btnStart.setBackground(Color.WHITE);
		btnStart.setForeground(Color.RED);
		btnStart.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnStart.setBounds(212, 453, 125, 43);
		panel.add(btnStart);
		
		lblNewLabel_2 = new JLabel("");
		lblNewLabel_2.setVisible(false);
		lblNewLabel_2.setForeground(Color.WHITE);
		lblNewLabel_2.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_2.setBounds(317, 90, 125, 129);
		panel.add(lblNewLabel_2);
		
		lblNewLabel_3 = new JLabel("");
		lblNewLabel_3.setVisible(false);
		lblNewLabel_3.setForeground(Color.WHITE);
		lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_3.setBounds(215, 90, 300, 200);
		panel.add(lblNewLabel_3);
		
		lblNewLabel_4 = new JLabel("");
		lblNewLabel_4.addMouseListener(new MouseAdapter() {
			public void mouseReleased(MouseEvent e) {
				
			}
		});
		lblNewLabel_4.setVisible(false);
		lblNewLabel_4.setForeground(Color.WHITE);
		lblNewLabel_4.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_4.setBounds(121, 90, 103, 129);
		panel.add(lblNewLabel_4);
				
		textField = new JTextField();
		textField.setHorizontalAlignment(SwingConstants.RIGHT);
		textField.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField.setVisible(false);
		textField.setBounds(121, 261, 324, 49);
		panel.add(textField);
		textField.setColumns(10);
		
		textField1 = new JTextField();
		textField1.setHorizontalAlignment(SwingConstants.RIGHT);
		textField1.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField1.setVisible(false);
		textField1.setBounds(121, 261, 324, 49);
		panel.add(textField1);
		textField1.setColumns(10);
		
		returnButton = new JButton("Return");
		returnButton.setVisible(false);
		returnButton.setFont(new Font("Tahoma", Font.BOLD, 20));
		returnButton.setForeground(Color.RED);
		returnButton.setBackground(Color.WHITE);
		returnButton.setBounds(225, 363, 126, 43);
		panel.add(returnButton);
		
		
		returnButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel.setVisible(true);
				rdbtnEasy.setVisible(true);
				rdbtnAverage.setVisible(true);
				rdbtnDifficult.setVisible(true);
				lblNewLabel_1_2_3.setVisible(true);
				lblNewLabel_1_2_1.setVisible(true);
				lblNewLabel_1_2_2.setVisible(true);
				lblNewLabel_1_1.setVisible(true);
				lblNewLabel_1.setVisible(true);
				lblNewLabel_1_2.setVisible(true);
				lblNewLabel_1_2_4.setVisible(true);
				btnStart.setVisible(true);
				returnButton.setVisible(false);
				lblNewLabel_3.setVisible(false);
				lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
			}

		
			
			
		});
		
		btnNewButton_1 = new JButton("SUBMIT");
		btnNewButton_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				
				
				double result = getResult(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
				
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
				
			}
		});
		btnNewButton_1.setVisible(false);
		btnNewButton_1.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_1.setForeground(Color.RED);
		btnNewButton_1.setBackground(Color.WHITE);
		btnNewButton_1.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_1);
		
		//Button 2
		btnNewButton_2 = new JButton("SUBMIT");
		btnNewButton_2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				double result = getResultAverage(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
			
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
			}
		});
		btnNewButton_2.setVisible(false);
		btnNewButton_2.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_2.setForeground(Color.RED);
		btnNewButton_2.setBackground(Color.WHITE);
		btnNewButton_2.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_2);
		
		
		textField2 = new JTextField();
		textField2.setHorizontalAlignment(SwingConstants.RIGHT);
		textField2.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField2.setVisible(false);
		textField2.setBounds(121, 261, 324, 49);
		panel.add(textField2);
		textField2.setColumns(10);
		
		btnNewButton_3 = new JButton("SUBMIT");
		btnNewButton_3.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel_2.setVisible(false);
				
				textField.setVisible(false);
				textField1.setVisible(false);
				btnNewButton_1.setVisible(false);
				btnNewButton_2.setVisible(false);
				
				textField2.setVisible(false);
				btnNewButton_3.setVisible(false);
				
				
				
			}
		});
		btnNewButton_3.setVisible(false);
		btnNewButton_3.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_3.setForeground(Color.RED);
		btnNewButton_3.setBackground(Color.WHITE);
		btnNewButton_3.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_3);
		
		
	}
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-04-30 17:33:37.902
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-04-30 17:33:37.903
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-30 17:33:38.182
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import java.awt.Color;
import java.awt.Toolkit;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

import java.awt.Font;
import javax.swing.JRadioButton;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Arrays;
import java.util.Random;


public class Main extends JFrame {

	private JPanel contentPane;
	private JLabel lblNewLabel_1_2;
	private JLabel lblNewLabel_1;
	private JLabel lblNewLabel_1_1; 
	private JLabel lblNewLabel_1_2_1;
	private JLabel lblNewLabel_1_2_2;
	private JLabel lblNewLabel_1_2_3;
	private JLabel lblNewLabel_1_2_4;
	private JRadioButton rdbtnEasy;
	private JRadioButton rdbtnAverage;
	private JRadioButton rdbtnDifficult;
	private JButton btnStart; 
	private JLabel lblNewLabel;
	private JLabel lblNewLabel_2;
	private JLabel lblNewLabel_3;
	private JLabel lblNewLabel_4;
	private JTextField textField;
	private JButton btnNewButton_1;
	private JTextField textField1;
	private JButton btnNewButton_2;
	private JButton returnButton;

	private JTextField textField2;
	private JButton btnNewButton_3;
	int currentQuestionNumber = 1;
	int playerScore = 0;
	Random random = new Random();
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Main frame = new Main();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
	
	
	
	

	/**
	 * Create the frame.
	 */
	
	
	public int findIndex(char operand) {
		char[] operandOrder = {'-', '+', '/', '*'};
		int index = 0;
		
		for(int i = 0; i < operandOrder.length; i++) {
			if(operand == operandOrder[i]) index = i;
		}
		return index;
	}
	
	public double getResult(String question) {
		char[] questionData = question.toCharArray(); 
		
		char operand = questionData[1];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double result = 0;
		
		if(operand == '+') result = firstNumber + secondNumber;
		if(operand == '-') result = firstNumber - secondNumber;
		if(operand == '*') result = firstNumber * secondNumber;
		if(operand == '/') result = firstNumber / secondNumber;
		double roundedResult = Math.round(result);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	public double getResultAverage(String question) {
		char[] questionData = question.toCharArray(); 
		
		char firstOperand = questionData[1];
		char secondOperand = questionData[3];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double thirdNumber = Double.parseDouble(String.valueOf(questionData[4]));
		double result = 0;
		
		
		char[] operandOrder = {'-', '+', '/', '*'};
		int indexFirst = findIndex(firstOperand);
		int indexSecond = findIndex(secondOperand);
		double totalResult = 0;
		double initialResult = 0;
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+') initialResult = secondNumber + thirdNumber;
			if(secondOperand == '-') initialResult = secondNumber - thirdNumber;
			if(secondOperand == '*') initialResult = secondNumber * thirdNumber;
			if(secondOperand == '/') initialResult = secondNumber / thirdNumber;
			
			
		}
		else if (indexSecond < indexFirst) {
			if(firstOperand == '+') initialResult = firstNumber + secondNumber;
			if(firstOperand == '-') initialResult = firstNumber - secondNumber;
			if(firstOperand == '*') initialResult = firstNumber * secondNumber;
			if(firstOperand == '/') initialResult = firstNumber / secondNumber;
		}
		else {
			if(firstOperand == '+') totalResult = firstNumber + secondNumber + thirdNumber;
			if(firstOperand == '-') totalResult = firstNumber - secondNumber - thirdNumber;
			if(firstOperand == '*') totalResult = firstNumber * secondNumber * thirdNumber;
			if(firstOperand == '/') totalResult = firstNumber / secondNumber / thirdNumber;
		}
		
		
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+')  totalResult = firstNumber + thirdNumber;
			if(secondOperand == '-')  totalResult = firstNumber - thirdNumber;
			if(secondOperand == '*')  totalResult = firstNumber * thirdNumber;
			if(secondOperand == '/')  totalResult = firstNumber / thirdNumber;
			
			
		}
		
		else (indexSecond < indexFirst) {
			if(firstOperand == '+')  totalResult = initialResult + thirdNumber;
			if(firstOperand == '-')  totalResult = initialResult - thirdNumber;
			if(firstOperand == '*')  totalResult = initialResult * thirdNumber;
			if(firstOperand == '/')  totalResult = initialResult / thirdNumber;
		}
		
		
		
		
		
		double roundedResult = Math.round(totalResult);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	
	public String generateQuestion() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond];
		
		return question;
	}
	
	public String generateQuestionAverage() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexThird = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		int randomIndexOperand2 = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond] + operands[randomIndexOperand2] + numbers[randomIndexThird];
		System.out.println(question);
		return question;
	}
	
	
	public Main() {
		setIconImage(Toolkit.getDefaultToolkit().getImage("C:\\Users\\user\\Downloads\\quiz.png"));
		setTitle("QUIZ GAME");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(400, 100, 600, 600);
		contentPane = new JPanel();
		contentPane.setBackground(Color.WHITE);
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));

		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JPanel panel = new JPanel();
		panel.setBackground(Color.RED);
		panel.setBounds(10, 0, 564, 550);
		contentPane.add(panel);
		panel.setLayout(null);
		
		lblNewLabel_1_2_4 = new JLabel("quiz");
		lblNewLabel_1_2_4.setForeground(Color.WHITE);
		lblNewLabel_1_2_4.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_4.setBounds(140, 130, 561, 120);
		panel.add(lblNewLabel_1_2_4);
		
		lblNewLabel_1_2 = new JLabel("MATH");
		lblNewLabel_1_2.setForeground(Color.WHITE);
		lblNewLabel_1_2.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_2.setBounds(70, 50, 561, 120);
		panel.add(lblNewLabel_1_2);
		
		lblNewLabel_1 = new JLabel("MATH");
		lblNewLabel_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1.setForeground(Color.DARK_GRAY);
		lblNewLabel_1.setBounds(78, 50, 777, 120);
		panel.add(lblNewLabel_1);
		
		lblNewLabel_1_1 = new JLabel("MATH");
		lblNewLabel_1_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_1.setBounds(89, 50, 612, 120);
		panel.add(lblNewLabel_1_1);
		
		lblNewLabel_1_2_2 = new JLabel("quiz");
		lblNewLabel_1_2_2.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_2.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_2.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_2);
		
		lblNewLabel_1_2_1 = new JLabel("quiz");
		lblNewLabel_1_2_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_2_1.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_1.setBounds(159, 130, 561, 120);
		panel.add(lblNewLabel_1_2_1);
		
		lblNewLabel_1_2_3 = new JLabel("quiz");
		lblNewLabel_1_2_3.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_3.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_3.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_3);
		
		lblNewLabel = new JLabel("");
		lblNewLabel.setFont(new Font("Dialog", Font.BOLD, 9));
		lblNewLabel.setBounds(225, 428, 161, 14);
		panel.add(lblNewLabel);
		
		rdbtnEasy = new JRadioButton("EASY");
		rdbtnEasy.setForeground(Color.WHITE);
		rdbtnEasy.setBackground(Color.RED);
		rdbtnEasy.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnEasy.setBounds(215, 232, 269, 78);
		panel.add(rdbtnEasy);
		
		rdbtnAverage = new JRadioButton("AVERAGE");
		rdbtnAverage.setForeground(Color.WHITE);
		rdbtnAverage.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnAverage.setBackground(Color.RED);
		rdbtnAverage.setBounds(188, 290, 269, 73);
		panel.add(rdbtnAverage);
		
		rdbtnDifficult = new JRadioButton("DIFFICULT");
		rdbtnDifficult.setForeground(Color.WHITE);
		rdbtnDifficult.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnDifficult.setBackground(Color.RED);
		rdbtnDifficult.setBounds(176, 342, 269, 68);
		panel.add(rdbtnDifficult);
		
		ButtonGroup difficulty = new ButtonGroup();
		difficulty.add(rdbtnEasy);
		difficulty.add(rdbtnAverage);
		difficulty.add(rdbtnDifficult);
		
		btnStart = new JButton("START");
		
		
	
		
		btnStart.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
			if(rdbtnEasy.isSelected()){
				///////////
				
 				lblNewLabel_3.setText(generateQuestion());
 				
 				
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_1.setVisible(true);
				
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnAverage.isSelected()){
				
				lblNewLabel_3.setText(generateQuestionAverage());
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_2.setVisible(true);
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnDifficult.isSelected()){
				
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			}
		});
		btnStart.setBackground(Color.WHITE);
		btnStart.setForeground(Color.RED);
		btnStart.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnStart.setBounds(212, 453, 125, 43);
		panel.add(btnStart);
		
		lblNewLabel_2 = new JLabel("");
		lblNewLabel_2.setVisible(false);
		lblNewLabel_2.setForeground(Color.WHITE);
		lblNewLabel_2.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_2.setBounds(317, 90, 125, 129);
		panel.add(lblNewLabel_2);
		
		lblNewLabel_3 = new JLabel("");
		lblNewLabel_3.setVisible(false);
		lblNewLabel_3.setForeground(Color.WHITE);
		lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_3.setBounds(215, 90, 300, 200);
		panel.add(lblNewLabel_3);
		
		lblNewLabel_4 = new JLabel("");
		lblNewLabel_4.addMouseListener(new MouseAdapter() {
			public void mouseReleased(MouseEvent e) {
				
			}
		});
		lblNewLabel_4.setVisible(false);
		lblNewLabel_4.setForeground(Color.WHITE);
		lblNewLabel_4.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_4.setBounds(121, 90, 103, 129);
		panel.add(lblNewLabel_4);
				
		textField = new JTextField();
		textField.setHorizontalAlignment(SwingConstants.RIGHT);
		textField.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField.setVisible(false);
		textField.setBounds(121, 261, 324, 49);
		panel.add(textField);
		textField.setColumns(10);
		
		textField1 = new JTextField();
		textField1.setHorizontalAlignment(SwingConstants.RIGHT);
		textField1.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField1.setVisible(false);
		textField1.setBounds(121, 261, 324, 49);
		panel.add(textField1);
		textField1.setColumns(10);
		
		returnButton = new JButton("Return");
		returnButton.setVisible(false);
		returnButton.setFont(new Font("Tahoma", Font.BOLD, 20));
		returnButton.setForeground(Color.RED);
		returnButton.setBackground(Color.WHITE);
		returnButton.setBounds(225, 363, 126, 43);
		panel.add(returnButton);
		
		
		returnButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel.setVisible(true);
				rdbtnEasy.setVisible(true);
				rdbtnAverage.setVisible(true);
				rdbtnDifficult.setVisible(true);
				lblNewLabel_1_2_3.setVisible(true);
				lblNewLabel_1_2_1.setVisible(true);
				lblNewLabel_1_2_2.setVisible(true);
				lblNewLabel_1_1.setVisible(true);
				lblNewLabel_1.setVisible(true);
				lblNewLabel_1_2.setVisible(true);
				lblNewLabel_1_2_4.setVisible(true);
				btnStart.setVisible(true);
				returnButton.setVisible(false);
				lblNewLabel_3.setVisible(false);
				lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
			}

		
			
			
		});
		
		btnNewButton_1 = new JButton("SUBMIT");
		btnNewButton_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				
				
				double result = getResult(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
				
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
				
			}
		});
		btnNewButton_1.setVisible(false);
		btnNewButton_1.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_1.setForeground(Color.RED);
		btnNewButton_1.setBackground(Color.WHITE);
		btnNewButton_1.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_1);
		
		//Button 2
		btnNewButton_2 = new JButton("SUBMIT");
		btnNewButton_2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				double result = getResultAverage(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
			
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
			}
		});
		btnNewButton_2.setVisible(false);
		btnNewButton_2.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_2.setForeground(Color.RED);
		btnNewButton_2.setBackground(Color.WHITE);
		btnNewButton_2.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_2);
		
		
		textField2 = new JTextField();
		textField2.setHorizontalAlignment(SwingConstants.RIGHT);
		textField2.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField2.setVisible(false);
		textField2.setBounds(121, 261, 324, 49);
		panel.add(textField2);
		textField2.setColumns(10);
		
		btnNewButton_3 = new JButton("SUBMIT");
		btnNewButton_3.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel_2.setVisible(false);
				
				textField.setVisible(false);
				textField1.setVisible(false);
				btnNewButton_1.setVisible(false);
				btnNewButton_2.setVisible(false);
				
				textField2.setVisible(false);
				btnNewButton_3.setVisible(false);
				
				
				
			}
		});
		btnNewButton_3.setVisible(false);
		btnNewButton_3.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_3.setForeground(Color.RED);
		btnNewButton_3.setBackground(Color.WHITE);
		btnNewButton_3.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_3);
		
		
	}
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:111)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-04-30 17:33:38.182
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:111)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-04-30 17:33:38.183
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:111)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-30 17:33:38.193
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import java.awt.Color;
import java.awt.Toolkit;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

import java.awt.Font;
import javax.swing.JRadioButton;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Arrays;
import java.util.Random;


public class Main extends JFrame {

	private JPanel contentPane;
	private JLabel lblNewLabel_1_2;
	private JLabel lblNewLabel_1;
	private JLabel lblNewLabel_1_1; 
	private JLabel lblNewLabel_1_2_1;
	private JLabel lblNewLabel_1_2_2;
	private JLabel lblNewLabel_1_2_3;
	private JLabel lblNewLabel_1_2_4;
	private JRadioButton rdbtnEasy;
	private JRadioButton rdbtnAverage;
	private JRadioButton rdbtnDifficult;
	private JButton btnStart; 
	private JLabel lblNewLabel;
	private JLabel lblNewLabel_2;
	private JLabel lblNewLabel_3;
	private JLabel lblNewLabel_4;
	private JTextField textField;
	private JButton btnNewButton_1;
	private JTextField textField1;
	private JButton btnNewButton_2;
	private JButton returnButton;

	private JTextField textField2;
	private JButton btnNewButton_3;
	int currentQuestionNumber = 1;
	int playerScore = 0;
	Random random = new Random();
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Main frame = new Main();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
	
	
	
	

	/**
	 * Create the frame.
	 */
	
	
	public int findIndex(char operand) {
		char[] operandOrder = {'-', '+', '/', '*'};
		int index = 0;
		
		for(int i = 0; i < operandOrder.length; i++) {
			if(operand == operandOrder[i]) index = i;
		}
		return index;
	}
	
	public double getResult(String question) {
		char[] questionData = question.toCharArray(); 
		
		char operand = questionData[1];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double result = 0;
		
		if(operand == '+') result = firstNumber + secondNumber;
		if(operand == '-') result = firstNumber - secondNumber;
		if(operand == '*') result = firstNumber * secondNumber;
		if(operand == '/') result = firstNumber / secondNumber;
		double roundedResult = Math.round(result);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	public double getResultAverage(String question) {
		char[] questionData = question.toCharArray(); 
		
		char firstOperand = questionData[1];
		char secondOperand = questionData[3];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double thirdNumber = Double.parseDouble(String.valueOf(questionData[4]));
		double result = 0;
		
		
		char[] operandOrder = {'-', '+', '/', '*'};
		int indexFirst = findIndex(firstOperand);
		int indexSecond = findIndex(secondOperand);
		double totalResult = 0;
		double initialResult = 0;
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+') initialResult = secondNumber + thirdNumber;
			if(secondOperand == '-') initialResult = secondNumber - thirdNumber;
			if(secondOperand == '*') initialResult = secondNumber * thirdNumber;
			if(secondOperand == '/') initialResult = secondNumber / thirdNumber;
			
			
		}
		else if (indexSecond < indexFirst) {
			if(firstOperand == '+') initialResult = firstNumber + secondNumber;
			if(firstOperand == '-') initialResult = firstNumber - secondNumber;
			if(firstOperand == '*') initialResult = firstNumber * secondNumber;
			if(firstOperand == '/') initialResult = firstNumber / secondNumber;
		}
		else {
			if(firstOperand == '+') totalResult = firstNumber + secondNumber + thirdNumber;
			if(firstOperand == '-') totalResult = firstNumber - secondNumber - thirdNumber;
			if(firstOperand == '*') totalResult = firstNumber * secondNumber * thirdNumber;
			if(firstOperand == '/') totalResult = firstNumber / secondNumber / thirdNumber;
		}
		
		
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+')  totalResult = firstNumber + thirdNumber;
			if(secondOperand == '-')  totalResult = firstNumber - thirdNumber;
			if(secondOperand == '*')  totalResult = firstNumber * thirdNumber;
			if(secondOperand == '/')  totalResult = firstNumber / thirdNumber;
			
			
		}
		
		else (indexSecond < indexFirst) {
			if(firstOperand == '+')  totalResult = initialResult + thirdNumber;
			if(firstOperand == '-')  totalResult = initialResult - thirdNumber;
			if(firstOperand == '*')  totalResult = initialResult * thirdNumber;
			if(firstOperand == '/')  totalResult = initialResult / thirdNumber;
		}
		
		
		
		
		
		double roundedResult = Math.round(totalResult);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	
	public String generateQuestion() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond];
		
		return question;
	}
	
	public String generateQuestionAverage() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexThird = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		int randomIndexOperand2 = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond] + operands[randomIndexOperand2] + numbers[randomIndexThird];
		System.out.println(question);
		return question;
	}
	
	
	public Main() {
		setIconImage(Toolkit.getDefaultToolkit().getImage("C:\\Users\\user\\Downloads\\quiz.png"));
		setTitle("QUIZ GAME");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(400, 100, 600, 600);
		contentPane = new JPanel();
		contentPane.setBackground(Color.WHITE);
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));

		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JPanel panel = new JPanel();
		panel.setBackground(Color.RED);
		panel.setBounds(10, 0, 564, 550);
		contentPane.add(panel);
		panel.setLayout(null);
		
		lblNewLabel_1_2_4 = new JLabel("quiz");
		lblNewLabel_1_2_4.setForeground(Color.WHITE);
		lblNewLabel_1_2_4.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_4.setBounds(140, 130, 561, 120);
		panel.add(lblNewLabel_1_2_4);
		
		lblNewLabel_1_2 = new JLabel("MATH");
		lblNewLabel_1_2.setForeground(Color.WHITE);
		lblNewLabel_1_2.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_2.setBounds(70, 50, 561, 120);
		panel.add(lblNewLabel_1_2);
		
		lblNewLabel_1 = new JLabel("MATH");
		lblNewLabel_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1.setForeground(Color.DARK_GRAY);
		lblNewLabel_1.setBounds(78, 50, 777, 120);
		panel.add(lblNewLabel_1);
		
		lblNewLabel_1_1 = new JLabel("MATH");
		lblNewLabel_1_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_1.setBounds(89, 50, 612, 120);
		panel.add(lblNewLabel_1_1);
		
		lblNewLabel_1_2_2 = new JLabel("quiz");
		lblNewLabel_1_2_2.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_2.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_2.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_2);
		
		lblNewLabel_1_2_1 = new JLabel("quiz");
		lblNewLabel_1_2_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_2_1.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_1.setBounds(159, 130, 561, 120);
		panel.add(lblNewLabel_1_2_1);
		
		lblNewLabel_1_2_3 = new JLabel("quiz");
		lblNewLabel_1_2_3.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_3.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_3.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_3);
		
		lblNewLabel = new JLabel("");
		lblNewLabel.setFont(new Font("Dialog", Font.BOLD, 9));
		lblNewLabel.setBounds(225, 428, 161, 14);
		panel.add(lblNewLabel);
		
		rdbtnEasy = new JRadioButton("EASY");
		rdbtnEasy.setForeground(Color.WHITE);
		rdbtnEasy.setBackground(Color.RED);
		rdbtnEasy.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnEasy.setBounds(215, 232, 269, 78);
		panel.add(rdbtnEasy);
		
		rdbtnAverage = new JRadioButton("AVERAGE");
		rdbtnAverage.setForeground(Color.WHITE);
		rdbtnAverage.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnAverage.setBackground(Color.RED);
		rdbtnAverage.setBounds(188, 290, 269, 73);
		panel.add(rdbtnAverage);
		
		rdbtnDifficult = new JRadioButton("DIFFICULT");
		rdbtnDifficult.setForeground(Color.WHITE);
		rdbtnDifficult.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnDifficult.setBackground(Color.RED);
		rdbtnDifficult.setBounds(176, 342, 269, 68);
		panel.add(rdbtnDifficult);
		
		ButtonGroup difficulty = new ButtonGroup();
		difficulty.add(rdbtnEasy);
		difficulty.add(rdbtnAverage);
		difficulty.add(rdbtnDifficult);
		
		btnStart = new JButton("START");
		
		
	
		
		btnStart.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
			if(rdbtnEasy.isSelected()){
				///////////
				
 				lblNewLabel_3.setText(generateQuestion());
 				
 				
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_1.setVisible(true);
				
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnAverage.isSelected()){
				
				lblNewLabel_3.setText(generateQuestionAverage());
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_2.setVisible(true);
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnDifficult.isSelected()){
				
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			}
		});
		btnStart.setBackground(Color.WHITE);
		btnStart.setForeground(Color.RED);
		btnStart.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnStart.setBounds(212, 453, 125, 43);
		panel.add(btnStart);
		
		lblNewLabel_2 = new JLabel("");
		lblNewLabel_2.setVisible(false);
		lblNewLabel_2.setForeground(Color.WHITE);
		lblNewLabel_2.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_2.setBounds(317, 90, 125, 129);
		panel.add(lblNewLabel_2);
		
		lblNewLabel_3 = new JLabel("");
		lblNewLabel_3.setVisible(false);
		lblNewLabel_3.setForeground(Color.WHITE);
		lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_3.setBounds(215, 90, 300, 200);
		panel.add(lblNewLabel_3);
		
		lblNewLabel_4 = new JLabel("");
		lblNewLabel_4.addMouseListener(new MouseAdapter() {
			public void mouseReleased(MouseEvent e) {
				
			}
		});
		lblNewLabel_4.setVisible(false);
		lblNewLabel_4.setForeground(Color.WHITE);
		lblNewLabel_4.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_4.setBounds(121, 90, 103, 129);
		panel.add(lblNewLabel_4);
				
		textField = new JTextField();
		textField.setHorizontalAlignment(SwingConstants.RIGHT);
		textField.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField.setVisible(false);
		textField.setBounds(121, 261, 324, 49);
		panel.add(textField);
		textField.setColumns(10);
		
		textField1 = new JTextField();
		textField1.setHorizontalAlignment(SwingConstants.RIGHT);
		textField1.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField1.setVisible(false);
		textField1.setBounds(121, 261, 324, 49);
		panel.add(textField1);
		textField1.setColumns(10);
		
		returnButton = new JButton("Return");
		returnButton.setVisible(false);
		returnButton.setFont(new Font("Tahoma", Font.BOLD, 20));
		returnButton.setForeground(Color.RED);
		returnButton.setBackground(Color.WHITE);
		returnButton.setBounds(225, 363, 126, 43);
		panel.add(returnButton);
		
		
		returnButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel.setVisible(true);
				rdbtnEasy.setVisible(true);
				rdbtnAverage.setVisible(true);
				rdbtnDifficult.setVisible(true);
				lblNewLabel_1_2_3.setVisible(true);
				lblNewLabel_1_2_1.setVisible(true);
				lblNewLabel_1_2_2.setVisible(true);
				lblNewLabel_1_1.setVisible(true);
				lblNewLabel_1.setVisible(true);
				lblNewLabel_1_2.setVisible(true);
				lblNewLabel_1_2_4.setVisible(true);
				btnStart.setVisible(true);
				returnButton.setVisible(false);
				lblNewLabel_3.setVisible(false);
				lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
			}

		
			
			
		});
		
		btnNewButton_1 = new JButton("SUBMIT");
		btnNewButton_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				
				
				double result = getResult(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
				
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
				
			}
		});
		btnNewButton_1.setVisible(false);
		btnNewButton_1.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_1.setForeground(Color.RED);
		btnNewButton_1.setBackground(Color.WHITE);
		btnNewButton_1.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_1);
		
		//Button 2
		btnNewButton_2 = new JButton("SUBMIT");
		btnNewButton_2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				double result = getResultAverage(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
			
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
			}
		});
		btnNewButton_2.setVisible(false);
		btnNewButton_2.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_2.setForeground(Color.RED);
		btnNewButton_2.setBackground(Color.WHITE);
		btnNewButton_2.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_2);
		
		
		textField2 = new JTextField();
		textField2.setHorizontalAlignment(SwingConstants.RIGHT);
		textField2.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField2.setVisible(false);
		textField2.setBounds(121, 261, 324, 49);
		panel.add(textField2);
		textField2.setColumns(10);
		
		btnNewButton_3 = new JButton("SUBMIT");
		btnNewButton_3.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel_2.setVisible(false);
				
				textField.setVisible(false);
				textField1.setVisible(false);
				btnNewButton_1.setVisible(false);
				btnNewButton_2.setVisible(false);
				
				textField2.setVisible(false);
				btnNewButton_3.setVisible(false);
				
				
				
			}
		});
		btnNewButton_3.setVisible(false);
		btnNewButton_3.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_3.setForeground(Color.RED);
		btnNewButton_3.setBackground(Color.WHITE);
		btnNewButton_3.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_3);
		
		
	}
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.internal.core.manipulation.dom.ASTResolving.createQuickFixAST(ASTResolving.java:1052)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:131)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:111)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jface.text 4 0 2023-04-30 17:33:38.194
!MESSAGE Unexpected runtime error while computing a text hover
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.internal.core.manipulation.dom.ASTResolving.createQuickFixAST(ASTResolving.java:1052)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:131)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:111)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-30 17:33:40.779
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import java.awt.Color;
import java.awt.Toolkit;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

import java.awt.Font;
import javax.swing.JRadioButton;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Arrays;
import java.util.Random;


public class Main extends JFrame {

	private JPanel contentPane;
	private JLabel lblNewLabel_1_2;
	private JLabel lblNewLabel_1;
	private JLabel lblNewLabel_1_1; 
	private JLabel lblNewLabel_1_2_1;
	private JLabel lblNewLabel_1_2_2;
	private JLabel lblNewLabel_1_2_3;
	private JLabel lblNewLabel_1_2_4;
	private JRadioButton rdbtnEasy;
	private JRadioButton rdbtnAverage;
	private JRadioButton rdbtnDifficult;
	private JButton btnStart; 
	private JLabel lblNewLabel;
	private JLabel lblNewLabel_2;
	private JLabel lblNewLabel_3;
	private JLabel lblNewLabel_4;
	private JTextField textField;
	private JButton btnNewButton_1;
	private JTextField textField1;
	private JButton btnNewButton_2;
	private JButton returnButton;

	private JTextField textField2;
	private JButton btnNewButton_3;
	int currentQuestionNumber = 1;
	int playerScore = 0;
	Random random = new Random();
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Main frame = new Main();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
	
	
	
	

	/**
	 * Create the frame.
	 */
	
	
	public int findIndex(char operand) {
		char[] operandOrder = {'-', '+', '/', '*'};
		int index = 0;
		
		for(int i = 0; i < operandOrder.length; i++) {
			if(operand == operandOrder[i]) index = i;
		}
		return index;
	}
	
	public double getResult(String question) {
		char[] questionData = question.toCharArray(); 
		
		char operand = questionData[1];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double result = 0;
		
		if(operand == '+') result = firstNumber + secondNumber;
		if(operand == '-') result = firstNumber - secondNumber;
		if(operand == '*') result = firstNumber * secondNumber;
		if(operand == '/') result = firstNumber / secondNumber;
		double roundedResult = Math.round(result);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	public double getResultAverage(String question) {
		char[] questionData = question.toCharArray(); 
		
		char firstOperand = questionData[1];
		char secondOperand = questionData[3];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double thirdNumber = Double.parseDouble(String.valueOf(questionData[4]));
		double result = 0;
		
		
		char[] operandOrder = {'-', '+', '/', '*'};
		int indexFirst = findIndex(firstOperand);
		int indexSecond = findIndex(secondOperand);
		double totalResult = 0;
		double initialResult = 0;
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+') initialResult = secondNumber + thirdNumber;
			if(secondOperand == '-') initialResult = secondNumber - thirdNumber;
			if(secondOperand == '*') initialResult = secondNumber * thirdNumber;
			if(secondOperand == '/') initialResult = secondNumber / thirdNumber;
			
			
		}
		else if (indexSecond < indexFirst) {
			if(firstOperand == '+') initialResult = firstNumber + secondNumber;
			if(firstOperand == '-') initialResult = firstNumber - secondNumber;
			if(firstOperand == '*') initialResult = firstNumber * secondNumber;
			if(firstOperand == '/') initialResult = firstNumber / secondNumber;
		}
		else {
			if(firstOperand == '+') totalResult = firstNumber + secondNumber + thirdNumber;
			if(firstOperand == '-') totalResult = firstNumber - secondNumber - thirdNumber;
			if(firstOperand == '*') totalResult = firstNumber * secondNumber * thirdNumber;
			if(firstOperand == '/') totalResult = firstNumber / secondNumber / thirdNumber;
		}
		
		
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+')  totalResult = firstNumber + thirdNumber;
			if(secondOperand == '-')  totalResult = firstNumber - thirdNumber;
			if(secondOperand == '*')  totalResult = firstNumber * thirdNumber;
			if(secondOperand == '/')  totalResult = firstNumber / thirdNumber;
			
			
		}
		
		else (indexSecond < indexFirst) {
			if(firstOperand == '+')  totalResult = initialResult + thirdNumber;
			if(firstOperand == '-')  totalResult = initialResult - thirdNumber;
			if(firstOperand == '*')  totalResult = initialResult * thirdNumber;
			if(firstOperand == '/')  totalResult = initialResult / thirdNumber;
		}
		
		
		
		
		
		double roundedResult = Math.round(totalResult);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	
	public String generateQuestion() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond];
		
		return question;
	}
	
	public String generateQuestionAverage() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexThird = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		int randomIndexOperand2 = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond] + operands[randomIndexOperand2] + numbers[randomIndexThird];
		System.out.println(question);
		return question;
	}
	
	
	public Main() {
		setIconImage(Toolkit.getDefaultToolkit().getImage("C:\\Users\\user\\Downloads\\quiz.png"));
		setTitle("QUIZ GAME");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(400, 100, 600, 600);
		contentPane = new JPanel();
		contentPane.setBackground(Color.WHITE);
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));

		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JPanel panel = new JPanel();
		panel.setBackground(Color.RED);
		panel.setBounds(10, 0, 564, 550);
		contentPane.add(panel);
		panel.setLayout(null);
		
		lblNewLabel_1_2_4 = new JLabel("quiz");
		lblNewLabel_1_2_4.setForeground(Color.WHITE);
		lblNewLabel_1_2_4.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_4.setBounds(140, 130, 561, 120);
		panel.add(lblNewLabel_1_2_4);
		
		lblNewLabel_1_2 = new JLabel("MATH");
		lblNewLabel_1_2.setForeground(Color.WHITE);
		lblNewLabel_1_2.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_2.setBounds(70, 50, 561, 120);
		panel.add(lblNewLabel_1_2);
		
		lblNewLabel_1 = new JLabel("MATH");
		lblNewLabel_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1.setForeground(Color.DARK_GRAY);
		lblNewLabel_1.setBounds(78, 50, 777, 120);
		panel.add(lblNewLabel_1);
		
		lblNewLabel_1_1 = new JLabel("MATH");
		lblNewLabel_1_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_1.setBounds(89, 50, 612, 120);
		panel.add(lblNewLabel_1_1);
		
		lblNewLabel_1_2_2 = new JLabel("quiz");
		lblNewLabel_1_2_2.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_2.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_2.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_2);
		
		lblNewLabel_1_2_1 = new JLabel("quiz");
		lblNewLabel_1_2_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_2_1.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_1.setBounds(159, 130, 561, 120);
		panel.add(lblNewLabel_1_2_1);
		
		lblNewLabel_1_2_3 = new JLabel("quiz");
		lblNewLabel_1_2_3.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_3.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_3.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_3);
		
		lblNewLabel = new JLabel("");
		lblNewLabel.setFont(new Font("Dialog", Font.BOLD, 9));
		lblNewLabel.setBounds(225, 428, 161, 14);
		panel.add(lblNewLabel);
		
		rdbtnEasy = new JRadioButton("EASY");
		rdbtnEasy.setForeground(Color.WHITE);
		rdbtnEasy.setBackground(Color.RED);
		rdbtnEasy.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnEasy.setBounds(215, 232, 269, 78);
		panel.add(rdbtnEasy);
		
		rdbtnAverage = new JRadioButton("AVERAGE");
		rdbtnAverage.setForeground(Color.WHITE);
		rdbtnAverage.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnAverage.setBackground(Color.RED);
		rdbtnAverage.setBounds(188, 290, 269, 73);
		panel.add(rdbtnAverage);
		
		rdbtnDifficult = new JRadioButton("DIFFICULT");
		rdbtnDifficult.setForeground(Color.WHITE);
		rdbtnDifficult.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnDifficult.setBackground(Color.RED);
		rdbtnDifficult.setBounds(176, 342, 269, 68);
		panel.add(rdbtnDifficult);
		
		ButtonGroup difficulty = new ButtonGroup();
		difficulty.add(rdbtnEasy);
		difficulty.add(rdbtnAverage);
		difficulty.add(rdbtnDifficult);
		
		btnStart = new JButton("START");
		
		
	
		
		btnStart.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
			if(rdbtnEasy.isSelected()){
				///////////
				
 				lblNewLabel_3.setText(generateQuestion());
 				
 				
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_1.setVisible(true);
				
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnAverage.isSelected()){
				
				lblNewLabel_3.setText(generateQuestionAverage());
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_2.setVisible(true);
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnDifficult.isSelected()){
				
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			}
		});
		btnStart.setBackground(Color.WHITE);
		btnStart.setForeground(Color.RED);
		btnStart.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnStart.setBounds(212, 453, 125, 43);
		panel.add(btnStart);
		
		lblNewLabel_2 = new JLabel("");
		lblNewLabel_2.setVisible(false);
		lblNewLabel_2.setForeground(Color.WHITE);
		lblNewLabel_2.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_2.setBounds(317, 90, 125, 129);
		panel.add(lblNewLabel_2);
		
		lblNewLabel_3 = new JLabel("");
		lblNewLabel_3.setVisible(false);
		lblNewLabel_3.setForeground(Color.WHITE);
		lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_3.setBounds(215, 90, 300, 200);
		panel.add(lblNewLabel_3);
		
		lblNewLabel_4 = new JLabel("");
		lblNewLabel_4.addMouseListener(new MouseAdapter() {
			public void mouseReleased(MouseEvent e) {
				
			}
		});
		lblNewLabel_4.setVisible(false);
		lblNewLabel_4.setForeground(Color.WHITE);
		lblNewLabel_4.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_4.setBounds(121, 90, 103, 129);
		panel.add(lblNewLabel_4);
				
		textField = new JTextField();
		textField.setHorizontalAlignment(SwingConstants.RIGHT);
		textField.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField.setVisible(false);
		textField.setBounds(121, 261, 324, 49);
		panel.add(textField);
		textField.setColumns(10);
		
		textField1 = new JTextField();
		textField1.setHorizontalAlignment(SwingConstants.RIGHT);
		textField1.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField1.setVisible(false);
		textField1.setBounds(121, 261, 324, 49);
		panel.add(textField1);
		textField1.setColumns(10);
		
		returnButton = new JButton("Return");
		returnButton.setVisible(false);
		returnButton.setFont(new Font("Tahoma", Font.BOLD, 20));
		returnButton.setForeground(Color.RED);
		returnButton.setBackground(Color.WHITE);
		returnButton.setBounds(225, 363, 126, 43);
		panel.add(returnButton);
		
		
		returnButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel.setVisible(true);
				rdbtnEasy.setVisible(true);
				rdbtnAverage.setVisible(true);
				rdbtnDifficult.setVisible(true);
				lblNewLabel_1_2_3.setVisible(true);
				lblNewLabel_1_2_1.setVisible(true);
				lblNewLabel_1_2_2.setVisible(true);
				lblNewLabel_1_1.setVisible(true);
				lblNewLabel_1.setVisible(true);
				lblNewLabel_1_2.setVisible(true);
				lblNewLabel_1_2_4.setVisible(true);
				btnStart.setVisible(true);
				returnButton.setVisible(false);
				lblNewLabel_3.setVisible(false);
				lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
			}

		
			
			
		});
		
		btnNewButton_1 = new JButton("SUBMIT");
		btnNewButton_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				
				
				double result = getResult(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
				
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
				
			}
		});
		btnNewButton_1.setVisible(false);
		btnNewButton_1.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_1.setForeground(Color.RED);
		btnNewButton_1.setBackground(Color.WHITE);
		btnNewButton_1.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_1);
		
		//Button 2
		btnNewButton_2 = new JButton("SUBMIT");
		btnNewButton_2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				double result = getResultAverage(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
			
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
			}
		});
		btnNewButton_2.setVisible(false);
		btnNewButton_2.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_2.setForeground(Color.RED);
		btnNewButton_2.setBackground(Color.WHITE);
		btnNewButton_2.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_2);
		
		
		textField2 = new JTextField();
		textField2.setHorizontalAlignment(SwingConstants.RIGHT);
		textField2.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField2.setVisible(false);
		textField2.setBounds(121, 261, 324, 49);
		panel.add(textField2);
		textField2.setColumns(10);
		
		btnNewButton_3 = new JButton("SUBMIT");
		btnNewButton_3.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel_2.setVisible(false);
				
				textField.setVisible(false);
				textField1.setVisible(false);
				btnNewButton_1.setVisible(false);
				btnNewButton_2.setVisible(false);
				
				textField2.setVisible(false);
				btnNewButton_3.setVisible(false);
				
				
				
			}
		});
		btnNewButton_3.setVisible(false);
		btnNewButton_3.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_3.setForeground(Color.RED);
		btnNewButton_3.setBackground(Color.WHITE);
		btnNewButton_3.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_3);
		
		
	}
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.getClipboardData(ClipboardOperationAction.java:479)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.doCutCopyWithImportsOperation(ClipboardOperationAction.java:406)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.internalDoOperation(ClipboardOperationAction.java:365)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:74)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.run(ClipboardOperationAction.java:286)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:474)
	at org.eclipse.jface.commands.ActionHandler.execute(ActionHandler.java:121)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at jdk.internal.reflect.GeneratedMethodAccessor49.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:251)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:485)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:647)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1262)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1065)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1090)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1075)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1117)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1113)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1542)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4868)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4746)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5026)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3643)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-04-30 17:33:40.780
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.getClipboardData(ClipboardOperationAction.java:479)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.doCutCopyWithImportsOperation(ClipboardOperationAction.java:406)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.internalDoOperation(ClipboardOperationAction.java:365)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:74)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.run(ClipboardOperationAction.java:286)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:474)
	at org.eclipse.jface.commands.ActionHandler.execute(ActionHandler.java:121)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at jdk.internal.reflect.GeneratedMethodAccessor49.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:251)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:485)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:647)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1262)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1065)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1090)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1075)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1117)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1113)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1542)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4868)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4746)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5026)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3643)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-04-30 17:33:40.781
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.getClipboardData(ClipboardOperationAction.java:479)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.doCutCopyWithImportsOperation(ClipboardOperationAction.java:406)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.internalDoOperation(ClipboardOperationAction.java:365)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:74)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.run(ClipboardOperationAction.java:286)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:474)
	at org.eclipse.jface.commands.ActionHandler.execute(ActionHandler.java:121)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at jdk.internal.reflect.GeneratedMethodAccessor49.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:251)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:485)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:647)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1262)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1065)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1090)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1075)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1117)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1113)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1542)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4868)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4746)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5026)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3643)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-30 17:33:44.266
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import java.awt.Color;
import java.awt.Toolkit;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

import java.awt.Font;
import javax.swing.JRadioButton;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Arrays;
import java.util.Random;


public class Main extends JFrame {

	private JPanel contentPane;
	private JLabel lblNewLabel_1_2;
	private JLabel lblNewLabel_1;
	private JLabel lblNewLabel_1_1; 
	private JLabel lblNewLabel_1_2_1;
	private JLabel lblNewLabel_1_2_2;
	private JLabel lblNewLabel_1_2_3;
	private JLabel lblNewLabel_1_2_4;
	private JRadioButton rdbtnEasy;
	private JRadioButton rdbtnAverage;
	private JRadioButton rdbtnDifficult;
	private JButton btnStart; 
	private JLabel lblNewLabel;
	private JLabel lblNewLabel_2;
	private JLabel lblNewLabel_3;
	private JLabel lblNewLabel_4;
	private JTextField textField;
	private JButton btnNewButton_1;
	private JTextField textField1;
	private JButton btnNewButton_2;
	private JButton returnButton;

	private JTextField textField2;
	private JButton btnNewButton_3;
	int currentQuestionNumber = 1;
	int playerScore = 0;
	Random random = new Random();
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Main frame = new Main();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
	
	
	
	

	/**
	 * Create the frame.
	 */
	
	
	public int findIndex(char operand) {
		char[] operandOrder = {'-', '+', '/', '*'};
		int index = 0;
		
		for(int i = 0; i < operandOrder.length; i++) {
			if(operand == operandOrder[i]) index = i;
		}
		return index;
	}
	
	public double getResult(String question) {
		char[] questionData = question.toCharArray(); 
		
		char operand = questionData[1];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double result = 0;
		
		if(operand == '+') result = firstNumber + secondNumber;
		if(operand == '-') result = firstNumber - secondNumber;
		if(operand == '*') result = firstNumber * secondNumber;
		if(operand == '/') result = firstNumber / secondNumber;
		double roundedResult = Math.round(result);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	public double getResultAverage(String question) {
		char[] questionData = question.toCharArray(); 
		
		char firstOperand = questionData[1];
		char secondOperand = questionData[3];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double thirdNumber = Double.parseDouble(String.valueOf(questionData[4]));
		double result = 0;
		
		
		char[] operandOrder = {'-', '+', '/', '*'};
		int indexFirst = findIndex(firstOperand);
		int indexSecond = findIndex(secondOperand);
		double totalResult = 0;
		double initialResult = 0;
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+') initialResult = secondNumber + thirdNumber;
			if(secondOperand == '-') initialResult = secondNumber - thirdNumber;
			if(secondOperand == '*') initialResult = secondNumber * thirdNumber;
			if(secondOperand == '/') initialResult = secondNumber / thirdNumber;
			
			
		}
		else if (indexSecond < indexFirst) {
			if(firstOperand == '+') initialResult = firstNumber + secondNumber;
			if(firstOperand == '-') initialResult = firstNumber - secondNumber;
			if(firstOperand == '*') initialResult = firstNumber * secondNumber;
			if(firstOperand == '/') initialResult = firstNumber / secondNumber;
		}
		else {
			if(firstOperand == '+') totalResult = firstNumber + secondNumber + thirdNumber;
			if(firstOperand == '-') totalResult = firstNumber - secondNumber - thirdNumber;
			if(firstOperand == '*') totalResult = firstNumber * secondNumber * thirdNumber;
			if(firstOperand == '/') totalResult = firstNumber / secondNumber / thirdNumber;
		}
		
		
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+')  totalResult = firstNumber + thirdNumber;
			if(secondOperand == '-')  totalResult = firstNumber - thirdNumber;
			if(secondOperand == '*')  totalResult = firstNumber * thirdNumber;
			if(secondOperand == '/')  totalResult = firstNumber / thirdNumber;
			
			
		}
		
		else (indexSecond < indexFirst) {
			if(firstOperand == '+')  totalResult = initialResult + thirdNumber;
			if(firstOperand == '-')  totalResult = initialResult - thirdNumber;
			if(firstOperand == '*')  totalResult = initialResult * thirdNumber;
			if(firstOperand == '/')  totalResult = initialResult / thirdNumber;
		}
		
		
		
		
		
		double roundedResult = Math.round(totalResult);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	
	public String generateQuestion() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond];
		
		return question;
	}
	
	public String generateQuestionAverage() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexThird = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		int randomIndexOperand2 = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond] + operands[randomIndexOperand2] + numbers[randomIndexThird];
		System.out.println(question);
		return question;
	}
	
	
	public Main() {
		setIconImage(Toolkit.getDefaultToolkit().getImage("C:\\Users\\user\\Downloads\\quiz.png"));
		setTitle("QUIZ GAME");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(400, 100, 600, 600);
		contentPane = new JPanel();
		contentPane.setBackground(Color.WHITE);
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));

		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JPanel panel = new JPanel();
		panel.setBackground(Color.RED);
		panel.setBounds(10, 0, 564, 550);
		contentPane.add(panel);
		panel.setLayout(null);
		
		lblNewLabel_1_2_4 = new JLabel("quiz");
		lblNewLabel_1_2_4.setForeground(Color.WHITE);
		lblNewLabel_1_2_4.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_4.setBounds(140, 130, 561, 120);
		panel.add(lblNewLabel_1_2_4);
		
		lblNewLabel_1_2 = new JLabel("MATH");
		lblNewLabel_1_2.setForeground(Color.WHITE);
		lblNewLabel_1_2.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_2.setBounds(70, 50, 561, 120);
		panel.add(lblNewLabel_1_2);
		
		lblNewLabel_1 = new JLabel("MATH");
		lblNewLabel_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1.setForeground(Color.DARK_GRAY);
		lblNewLabel_1.setBounds(78, 50, 777, 120);
		panel.add(lblNewLabel_1);
		
		lblNewLabel_1_1 = new JLabel("MATH");
		lblNewLabel_1_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_1.setBounds(89, 50, 612, 120);
		panel.add(lblNewLabel_1_1);
		
		lblNewLabel_1_2_2 = new JLabel("quiz");
		lblNewLabel_1_2_2.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_2.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_2.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_2);
		
		lblNewLabel_1_2_1 = new JLabel("quiz");
		lblNewLabel_1_2_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_2_1.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_1.setBounds(159, 130, 561, 120);
		panel.add(lblNewLabel_1_2_1);
		
		lblNewLabel_1_2_3 = new JLabel("quiz");
		lblNewLabel_1_2_3.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_3.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_3.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_3);
		
		lblNewLabel = new JLabel("");
		lblNewLabel.setFont(new Font("Dialog", Font.BOLD, 9));
		lblNewLabel.setBounds(225, 428, 161, 14);
		panel.add(lblNewLabel);
		
		rdbtnEasy = new JRadioButton("EASY");
		rdbtnEasy.setForeground(Color.WHITE);
		rdbtnEasy.setBackground(Color.RED);
		rdbtnEasy.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnEasy.setBounds(215, 232, 269, 78);
		panel.add(rdbtnEasy);
		
		rdbtnAverage = new JRadioButton("AVERAGE");
		rdbtnAverage.setForeground(Color.WHITE);
		rdbtnAverage.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnAverage.setBackground(Color.RED);
		rdbtnAverage.setBounds(188, 290, 269, 73);
		panel.add(rdbtnAverage);
		
		rdbtnDifficult = new JRadioButton("DIFFICULT");
		rdbtnDifficult.setForeground(Color.WHITE);
		rdbtnDifficult.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnDifficult.setBackground(Color.RED);
		rdbtnDifficult.setBounds(176, 342, 269, 68);
		panel.add(rdbtnDifficult);
		
		ButtonGroup difficulty = new ButtonGroup();
		difficulty.add(rdbtnEasy);
		difficulty.add(rdbtnAverage);
		difficulty.add(rdbtnDifficult);
		
		btnStart = new JButton("START");
		
		
	
		
		btnStart.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
			if(rdbtnEasy.isSelected()){
				///////////
				
 				lblNewLabel_3.setText(generateQuestion());
 				
 				
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_1.setVisible(true);
				
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnAverage.isSelected()){
				
				lblNewLabel_3.setText(generateQuestionAverage());
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_2.setVisible(true);
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnDifficult.isSelected()){
				
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			}
		});
		btnStart.setBackground(Color.WHITE);
		btnStart.setForeground(Color.RED);
		btnStart.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnStart.setBounds(212, 453, 125, 43);
		panel.add(btnStart);
		
		lblNewLabel_2 = new JLabel("");
		lblNewLabel_2.setVisible(false);
		lblNewLabel_2.setForeground(Color.WHITE);
		lblNewLabel_2.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_2.setBounds(317, 90, 125, 129);
		panel.add(lblNewLabel_2);
		
		lblNewLabel_3 = new JLabel("");
		lblNewLabel_3.setVisible(false);
		lblNewLabel_3.setForeground(Color.WHITE);
		lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_3.setBounds(215, 90, 300, 200);
		panel.add(lblNewLabel_3);
		
		lblNewLabel_4 = new JLabel("");
		lblNewLabel_4.addMouseListener(new MouseAdapter() {
			public void mouseReleased(MouseEvent e) {
				
			}
		});
		lblNewLabel_4.setVisible(false);
		lblNewLabel_4.setForeground(Color.WHITE);
		lblNewLabel_4.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_4.setBounds(121, 90, 103, 129);
		panel.add(lblNewLabel_4);
				
		textField = new JTextField();
		textField.setHorizontalAlignment(SwingConstants.RIGHT);
		textField.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField.setVisible(false);
		textField.setBounds(121, 261, 324, 49);
		panel.add(textField);
		textField.setColumns(10);
		
		textField1 = new JTextField();
		textField1.setHorizontalAlignment(SwingConstants.RIGHT);
		textField1.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField1.setVisible(false);
		textField1.setBounds(121, 261, 324, 49);
		panel.add(textField1);
		textField1.setColumns(10);
		
		returnButton = new JButton("Return");
		returnButton.setVisible(false);
		returnButton.setFont(new Font("Tahoma", Font.BOLD, 20));
		returnButton.setForeground(Color.RED);
		returnButton.setBackground(Color.WHITE);
		returnButton.setBounds(225, 363, 126, 43);
		panel.add(returnButton);
		
		
		returnButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel.setVisible(true);
				rdbtnEasy.setVisible(true);
				rdbtnAverage.setVisible(true);
				rdbtnDifficult.setVisible(true);
				lblNewLabel_1_2_3.setVisible(true);
				lblNewLabel_1_2_1.setVisible(true);
				lblNewLabel_1_2_2.setVisible(true);
				lblNewLabel_1_1.setVisible(true);
				lblNewLabel_1.setVisible(true);
				lblNewLabel_1_2.setVisible(true);
				lblNewLabel_1_2_4.setVisible(true);
				btnStart.setVisible(true);
				returnButton.setVisible(false);
				lblNewLabel_3.setVisible(false);
				lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
			}

		
			
			
		});
		
		btnNewButton_1 = new JButton("SUBMIT");
		btnNewButton_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				
				
				double result = getResult(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
				
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
				
			}
		});
		btnNewButton_1.setVisible(false);
		btnNewButton_1.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_1.setForeground(Color.RED);
		btnNewButton_1.setBackground(Color.WHITE);
		btnNewButton_1.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_1);
		
		//Button 2
		btnNewButton_2 = new JButton("SUBMIT");
		btnNewButton_2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				double result = getResultAverage(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
			
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
			}
		});
		btnNewButton_2.setVisible(false);
		btnNewButton_2.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_2.setForeground(Color.RED);
		btnNewButton_2.setBackground(Color.WHITE);
		btnNewButton_2.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_2);
		
		
		textField2 = new JTextField();
		textField2.setHorizontalAlignment(SwingConstants.RIGHT);
		textField2.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField2.setVisible(false);
		textField2.setBounds(121, 261, 324, 49);
		panel.add(textField2);
		textField2.setColumns(10);
		
		btnNewButton_3 = new JButton("SUBMIT");
		btnNewButton_3.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel_2.setVisible(false);
				
				textField.setVisible(false);
				textField1.setVisible(false);
				btnNewButton_1.setVisible(false);
				btnNewButton_2.setVisible(false);
				
				textField2.setVisible(false);
				btnNewButton_3.setVisible(false);
				
				
				
			}
		});
		btnNewButton_3.setVisible(false);
		btnNewButton_3.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_3.setForeground(Color.RED);
		btnNewButton_3.setBackground(Color.WHITE);
		btnNewButton_3.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_3);
		
		
	}
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-04-30 17:33:44.267
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-04-30 17:33:44.268
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
