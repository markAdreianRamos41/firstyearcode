!SESSION 2023-04-30 15:23:57.425 -----------------------------------------------
eclipse.buildId=4.24.0.I20220607-0700
java.version=17.0.4
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_PH
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

This is a continuation of log file C:\Users\Admin\Documents\School\2nd Sem\CCS103 - Computer Programming\SchoolWorkspace\.metadata\.bak_1.log
Created Time: 2023-04-30 17:33:44.779

!ENTRY org.eclipse.jdt.core 4 4 2023-04-30 17:33:44.780
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import java.awt.Color;
import java.awt.Toolkit;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

import java.awt.Font;
import javax.swing.JRadioButton;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Arrays;
import java.util.Random;


public class Main extends JFrame {

	private JPanel contentPane;
	private JLabel lblNewLabel_1_2;
	private JLabel lblNewLabel_1;
	private JLabel lblNewLabel_1_1; 
	private JLabel lblNewLabel_1_2_1;
	private JLabel lblNewLabel_1_2_2;
	private JLabel lblNewLabel_1_2_3;
	private JLabel lblNewLabel_1_2_4;
	private JRadioButton rdbtnEasy;
	private JRadioButton rdbtnAverage;
	private JRadioButton rdbtnDifficult;
	private JButton btnStart; 
	private JLabel lblNewLabel;
	private JLabel lblNewLabel_2;
	private JLabel lblNewLabel_3;
	private JLabel lblNewLabel_4;
	private JTextField textField;
	private JButton btnNewButton_1;
	private JTextField textField1;
	private JButton btnNewButton_2;
	private JButton returnButton;

	private JTextField textField2;
	private JButton btnNewButton_3;
	int currentQuestionNumber = 1;
	int playerScore = 0;
	Random random = new Random();
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Main frame = new Main();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
	
	
	
	

	/**
	 * Create the frame.
	 */
	
	
	public int findIndex(char operand) {
		char[] operandOrder = {'-', '+', '/', '*'};
		int index = 0;
		
		for(int i = 0; i < operandOrder.length; i++) {
			if(operand == operandOrder[i]) index = i;
		}
		return index;
	}
	
	public double getResult(String question) {
		char[] questionData = question.toCharArray(); 
		
		char operand = questionData[1];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double result = 0;
		
		if(operand == '+') result = firstNumber + secondNumber;
		if(operand == '-') result = firstNumber - secondNumber;
		if(operand == '*') result = firstNumber * secondNumber;
		if(operand == '/') result = firstNumber / secondNumber;
		double roundedResult = Math.round(result);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	public double getResultAverage(String question) {
		char[] questionData = question.toCharArray(); 
		
		char firstOperand = questionData[1];
		char secondOperand = questionData[3];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double thirdNumber = Double.parseDouble(String.valueOf(questionData[4]));
		double result = 0;
		
		
		char[] operandOrder = {'-', '+', '/', '*'};
		int indexFirst = findIndex(firstOperand);
		int indexSecond = findIndex(secondOperand);
		double totalResult = 0;
		double initialResult = 0;
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+') initialResult = secondNumber + thirdNumber;
			if(secondOperand == '-') initialResult = secondNumber - thirdNumber;
			if(secondOperand == '*') initialResult = secondNumber * thirdNumber;
			if(secondOperand == '/') initialResult = secondNumber / thirdNumber;
			
			
		}
		else if (indexSecond < indexFirst) {
			if(firstOperand == '+') initialResult = firstNumber + secondNumber;
			if(firstOperand == '-') initialResult = firstNumber - secondNumber;
			if(firstOperand == '*') initialResult = firstNumber * secondNumber;
			if(firstOperand == '/') initialResult = firstNumber / secondNumber;
		}
		else {
			if(firstOperand == '+') totalResult = firstNumber + secondNumber + thirdNumber;
			if(firstOperand == '-') totalResult = firstNumber - secondNumber - thirdNumber;
			if(firstOperand == '*') totalResult = firstNumber * secondNumber * thirdNumber;
			if(firstOperand == '/') totalResult = firstNumber / secondNumber / thirdNumber;
		}
		
		
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+')  totalResult = firstNumber + thirdNumber;
			if(secondOperand == '-')  totalResult = firstNumber - thirdNumber;
			if(secondOperand == '*')  totalResult = firstNumber * thirdNumber;
			if(secondOperand == '/')  totalResult = firstNumber / thirdNumber;
			
			
		}
		
		else (indexSecond < indexFirst) {
			if(firstOperand == '+')  totalResult = initialResult + thirdNumber;
			if(firstOperand == '-')  totalResult = initialResult - thirdNumber;
			if(firstOperand == '*')  totalResult = initialResult * thirdNumber;
			if(firstOperand == '/')  totalResult = initialResult / thirdNumber;
		}
		
		
		
		
		
		double roundedResult = Math.round(totalResult);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	
	public String generateQuestion() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond];
		
		return question;
	}
	
	public String generateQuestionAverage() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexThird = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		int randomIndexOperand2 = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond] + operands[randomIndexOperand2] + numbers[randomIndexThird];
		System.out.println(question);
		return question;
	}
	
	
	public Main() {
		setIconImage(Toolkit.getDefaultToolkit().getImage("C:\\Users\\user\\Downloads\\quiz.png"));
		setTitle("QUIZ GAME");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(400, 100, 600, 600);
		contentPane = new JPanel();
		contentPane.setBackground(Color.WHITE);
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));

		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JPanel panel = new JPanel();
		panel.setBackground(Color.RED);
		panel.setBounds(10, 0, 564, 550);
		contentPane.add(panel);
		panel.setLayout(null);
		
		lblNewLabel_1_2_4 = new JLabel("quiz");
		lblNewLabel_1_2_4.setForeground(Color.WHITE);
		lblNewLabel_1_2_4.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_4.setBounds(140, 130, 561, 120);
		panel.add(lblNewLabel_1_2_4);
		
		lblNewLabel_1_2 = new JLabel("MATH");
		lblNewLabel_1_2.setForeground(Color.WHITE);
		lblNewLabel_1_2.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_2.setBounds(70, 50, 561, 120);
		panel.add(lblNewLabel_1_2);
		
		lblNewLabel_1 = new JLabel("MATH");
		lblNewLabel_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1.setForeground(Color.DARK_GRAY);
		lblNewLabel_1.setBounds(78, 50, 777, 120);
		panel.add(lblNewLabel_1);
		
		lblNewLabel_1_1 = new JLabel("MATH");
		lblNewLabel_1_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_1.setBounds(89, 50, 612, 120);
		panel.add(lblNewLabel_1_1);
		
		lblNewLabel_1_2_2 = new JLabel("quiz");
		lblNewLabel_1_2_2.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_2.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_2.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_2);
		
		lblNewLabel_1_2_1 = new JLabel("quiz");
		lblNewLabel_1_2_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_2_1.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_1.setBounds(159, 130, 561, 120);
		panel.add(lblNewLabel_1_2_1);
		
		lblNewLabel_1_2_3 = new JLabel("quiz");
		lblNewLabel_1_2_3.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_3.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_3.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_3);
		
		lblNewLabel = new JLabel("");
		lblNewLabel.setFont(new Font("Dialog", Font.BOLD, 9));
		lblNewLabel.setBounds(225, 428, 161, 14);
		panel.add(lblNewLabel);
		
		rdbtnEasy = new JRadioButton("EASY");
		rdbtnEasy.setForeground(Color.WHITE);
		rdbtnEasy.setBackground(Color.RED);
		rdbtnEasy.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnEasy.setBounds(215, 232, 269, 78);
		panel.add(rdbtnEasy);
		
		rdbtnAverage = new JRadioButton("AVERAGE");
		rdbtnAverage.setForeground(Color.WHITE);
		rdbtnAverage.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnAverage.setBackground(Color.RED);
		rdbtnAverage.setBounds(188, 290, 269, 73);
		panel.add(rdbtnAverage);
		
		rdbtnDifficult = new JRadioButton("DIFFICULT");
		rdbtnDifficult.setForeground(Color.WHITE);
		rdbtnDifficult.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnDifficult.setBackground(Color.RED);
		rdbtnDifficult.setBounds(176, 342, 269, 68);
		panel.add(rdbtnDifficult);
		
		ButtonGroup difficulty = new ButtonGroup();
		difficulty.add(rdbtnEasy);
		difficulty.add(rdbtnAverage);
		difficulty.add(rdbtnDifficult);
		
		btnStart = new JButton("START");
		
		
	
		
		btnStart.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
			if(rdbtnEasy.isSelected()){
				///////////
				
 				lblNewLabel_3.setText(generateQuestion());
 				
 				
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_1.setVisible(true);
				
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnAverage.isSelected()){
				
				lblNewLabel_3.setText(generateQuestionAverage());
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_2.setVisible(true);
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnDifficult.isSelected()){
				
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			}
		});
		btnStart.setBackground(Color.WHITE);
		btnStart.setForeground(Color.RED);
		btnStart.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnStart.setBounds(212, 453, 125, 43);
		panel.add(btnStart);
		
		lblNewLabel_2 = new JLabel("");
		lblNewLabel_2.setVisible(false);
		lblNewLabel_2.setForeground(Color.WHITE);
		lblNewLabel_2.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_2.setBounds(317, 90, 125, 129);
		panel.add(lblNewLabel_2);
		
		lblNewLabel_3 = new JLabel("");
		lblNewLabel_3.setVisible(false);
		lblNewLabel_3.setForeground(Color.WHITE);
		lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_3.setBounds(215, 90, 300, 200);
		panel.add(lblNewLabel_3);
		
		lblNewLabel_4 = new JLabel("");
		lblNewLabel_4.addMouseListener(new MouseAdapter() {
			public void mouseReleased(MouseEvent e) {
				
			}
		});
		lblNewLabel_4.setVisible(false);
		lblNewLabel_4.setForeground(Color.WHITE);
		lblNewLabel_4.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_4.setBounds(121, 90, 103, 129);
		panel.add(lblNewLabel_4);
				
		textField = new JTextField();
		textField.setHorizontalAlignment(SwingConstants.RIGHT);
		textField.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField.setVisible(false);
		textField.setBounds(121, 261, 324, 49);
		panel.add(textField);
		textField.setColumns(10);
		
		textField1 = new JTextField();
		textField1.setHorizontalAlignment(SwingConstants.RIGHT);
		textField1.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField1.setVisible(false);
		textField1.setBounds(121, 261, 324, 49);
		panel.add(textField1);
		textField1.setColumns(10);
		
		returnButton = new JButton("Return");
		returnButton.setVisible(false);
		returnButton.setFont(new Font("Tahoma", Font.BOLD, 20));
		returnButton.setForeground(Color.RED);
		returnButton.setBackground(Color.WHITE);
		returnButton.setBounds(225, 363, 126, 43);
		panel.add(returnButton);
		
		
		returnButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel.setVisible(true);
				rdbtnEasy.setVisible(true);
				rdbtnAverage.setVisible(true);
				rdbtnDifficult.setVisible(true);
				lblNewLabel_1_2_3.setVisible(true);
				lblNewLabel_1_2_1.setVisible(true);
				lblNewLabel_1_2_2.setVisible(true);
				lblNewLabel_1_1.setVisible(true);
				lblNewLabel_1.setVisible(true);
				lblNewLabel_1_2.setVisible(true);
				lblNewLabel_1_2_4.setVisible(true);
				btnStart.setVisible(true);
				returnButton.setVisible(false);
				lblNewLabel_3.setVisible(false);
				lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
			}

		
			
			
		});
		
		btnNewButton_1 = new JButton("SUBMIT");
		btnNewButton_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				
				
				double result = getResult(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
				
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
				
			}
		});
		btnNewButton_1.setVisible(false);
		btnNewButton_1.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_1.setForeground(Color.RED);
		btnNewButton_1.setBackground(Color.WHITE);
		btnNewButton_1.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_1);
		
		//Button 2
		btnNewButton_2 = new JButton("SUBMIT");
		btnNewButton_2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				double result = getResultAverage(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
			
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
			}
		});
		btnNewButton_2.setVisible(false);
		btnNewButton_2.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_2.setForeground(Color.RED);
		btnNewButton_2.setBackground(Color.WHITE);
		btnNewButton_2.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_2);
		
		
		textField2 = new JTextField();
		textField2.setHorizontalAlignment(SwingConstants.RIGHT);
		textField2.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField2.setVisible(false);
		textField2.setBounds(121, 261, 324, 49);
		panel.add(textField2);
		textField2.setColumns(10);
		
		btnNewButton_3 = new JButton("SUBMIT");
		btnNewButton_3.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel_2.setVisible(false);
				
				textField.setVisible(false);
				textField1.setVisible(false);
				btnNewButton_1.setVisible(false);
				btnNewButton_2.setVisible(false);
				
				textField2.setVisible(false);
				btnNewButton_3.setVisible(false);
				
				
				
			}
		});
		btnNewButton_3.setVisible(false);
		btnNewButton_3.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_3.setForeground(Color.RED);
		btnNewButton_3.setBackground(Color.WHITE);
		btnNewButton_3.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_3);
		
		
	}
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-04-30 17:33:44.782
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-04-30 17:33:44.782
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-30 17:33:46.488
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import java.awt.Color;
import java.awt.Toolkit;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

import java.awt.Font;
import javax.swing.JRadioButton;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Arrays;
import java.util.Random;


public class Main extends JFrame {

	private JPanel contentPane;
	private JLabel lblNewLabel_1_2;
	private JLabel lblNewLabel_1;
	private JLabel lblNewLabel_1_1; 
	private JLabel lblNewLabel_1_2_1;
	private JLabel lblNewLabel_1_2_2;
	private JLabel lblNewLabel_1_2_3;
	private JLabel lblNewLabel_1_2_4;
	private JRadioButton rdbtnEasy;
	private JRadioButton rdbtnAverage;
	private JRadioButton rdbtnDifficult;
	private JButton btnStart; 
	private JLabel lblNewLabel;
	private JLabel lblNewLabel_2;
	private JLabel lblNewLabel_3;
	private JLabel lblNewLabel_4;
	private JTextField textField;
	private JButton btnNewButton_1;
	private JTextField textField1;
	private JButton btnNewButton_2;
	private JButton returnButton;

	private JTextField textField2;
	private JButton btnNewButton_3;
	int currentQuestionNumber = 1;
	int playerScore = 0;
	Random random = new Random();
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Main frame = new Main();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
	
	
	
	

	/**
	 * Create the frame.
	 */
	
	
	public int findIndex(char operand) {
		char[] operandOrder = {'-', '+', '/', '*'};
		int index = 0;
		
		for(int i = 0; i < operandOrder.length; i++) {
			if(operand == operandOrder[i]) index = i;
		}
		return index;
	}
	
	public double getResult(String question) {
		char[] questionData = question.toCharArray(); 
		
		char operand = questionData[1];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double result = 0;
		
		if(operand == '+') result = firstNumber + secondNumber;
		if(operand == '-') result = firstNumber - secondNumber;
		if(operand == '*') result = firstNumber * secondNumber;
		if(operand == '/') result = firstNumber / secondNumber;
		double roundedResult = Math.round(result);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	public double getResultAverage(String question) {
		char[] questionData = question.toCharArray(); 
		
		char firstOperand = questionData[1];
		char secondOperand = questionData[3];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double thirdNumber = Double.parseDouble(String.valueOf(questionData[4]));
		double result = 0;
		
		
		char[] operandOrder = {'-', '+', '/', '*'};
		int indexFirst = findIndex(firstOperand);
		int indexSecond = findIndex(secondOperand);
		double totalResult = 0;
		double initialResult = 0;
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+') initialResult = secondNumber + thirdNumber;
			if(secondOperand == '-') initialResult = secondNumber - thirdNumber;
			if(secondOperand == '*') initialResult = secondNumber * thirdNumber;
			if(secondOperand == '/') initialResult = secondNumber / thirdNumber;
			
			
		}
		else if (indexSecond < indexFirst) {
			if(firstOperand == '+') initialResult = firstNumber + secondNumber;
			if(firstOperand == '-') initialResult = firstNumber - secondNumber;
			if(firstOperand == '*') initialResult = firstNumber * secondNumber;
			if(firstOperand == '/') initialResult = firstNumber / secondNumber;
		}
		else {
			if(firstOperand == '+') totalResult = firstNumber + secondNumber + thirdNumber;
			if(firstOperand == '-') totalResult = firstNumber - secondNumber - thirdNumber;
			if(firstOperand == '*') totalResult = firstNumber * secondNumber * thirdNumber;
			if(firstOperand == '/') totalResult = firstNumber / secondNumber / thirdNumber;
		}
		
		
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+')  totalResult = firstNumber + thirdNumber;
			if(secondOperand == '-')  totalResult = firstNumber - thirdNumber;
			if(secondOperand == '*')  totalResult = firstNumber * thirdNumber;
			if(secondOperand == '/')  totalResult = firstNumber / thirdNumber;
			
			
		}
		
		else (indexSecond < indexFirst) {
			if(firstOperand == '+')  totalResult = initialResult + thirdNumber;
			if(firstOperand == '-')  totalResult = initialResult - thirdNumber;
			if(firstOperand == '*')  totalResult = initialResult * thirdNumber;
			if(firstOperand == '/')  totalResult = initialResult / thirdNumber;
		}
		
		
		
		
		
		double roundedResult = Math.round(totalResult);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	
	public String generateQuestion() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond];
		
		return question;
	}
	
	public String generateQuestionAverage() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexThird = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		int randomIndexOperand2 = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond] + operands[randomIndexOperand2] + numbers[randomIndexThird];
		System.out.println(question);
		return question;
	}
	
	
	public Main() {
		setIconImage(Toolkit.getDefaultToolkit().getImage("C:\\Users\\user\\Downloads\\quiz.png"));
		setTitle("QUIZ GAME");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(400, 100, 600, 600);
		contentPane = new JPanel();
		contentPane.setBackground(Color.WHITE);
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));

		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JPanel panel = new JPanel();
		panel.setBackground(Color.RED);
		panel.setBounds(10, 0, 564, 550);
		contentPane.add(panel);
		panel.setLayout(null);
		
		lblNewLabel_1_2_4 = new JLabel("quiz");
		lblNewLabel_1_2_4.setForeground(Color.WHITE);
		lblNewLabel_1_2_4.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_4.setBounds(140, 130, 561, 120);
		panel.add(lblNewLabel_1_2_4);
		
		lblNewLabel_1_2 = new JLabel("MATH");
		lblNewLabel_1_2.setForeground(Color.WHITE);
		lblNewLabel_1_2.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_2.setBounds(70, 50, 561, 120);
		panel.add(lblNewLabel_1_2);
		
		lblNewLabel_1 = new JLabel("MATH");
		lblNewLabel_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1.setForeground(Color.DARK_GRAY);
		lblNewLabel_1.setBounds(78, 50, 777, 120);
		panel.add(lblNewLabel_1);
		
		lblNewLabel_1_1 = new JLabel("MATH");
		lblNewLabel_1_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_1.setBounds(89, 50, 612, 120);
		panel.add(lblNewLabel_1_1);
		
		lblNewLabel_1_2_2 = new JLabel("quiz");
		lblNewLabel_1_2_2.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_2.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_2.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_2);
		
		lblNewLabel_1_2_1 = new JLabel("quiz");
		lblNewLabel_1_2_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_2_1.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_1.setBounds(159, 130, 561, 120);
		panel.add(lblNewLabel_1_2_1);
		
		lblNewLabel_1_2_3 = new JLabel("quiz");
		lblNewLabel_1_2_3.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_3.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_3.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_3);
		
		lblNewLabel = new JLabel("");
		lblNewLabel.setFont(new Font("Dialog", Font.BOLD, 9));
		lblNewLabel.setBounds(225, 428, 161, 14);
		panel.add(lblNewLabel);
		
		rdbtnEasy = new JRadioButton("EASY");
		rdbtnEasy.setForeground(Color.WHITE);
		rdbtnEasy.setBackground(Color.RED);
		rdbtnEasy.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnEasy.setBounds(215, 232, 269, 78);
		panel.add(rdbtnEasy);
		
		rdbtnAverage = new JRadioButton("AVERAGE");
		rdbtnAverage.setForeground(Color.WHITE);
		rdbtnAverage.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnAverage.setBackground(Color.RED);
		rdbtnAverage.setBounds(188, 290, 269, 73);
		panel.add(rdbtnAverage);
		
		rdbtnDifficult = new JRadioButton("DIFFICULT");
		rdbtnDifficult.setForeground(Color.WHITE);
		rdbtnDifficult.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnDifficult.setBackground(Color.RED);
		rdbtnDifficult.setBounds(176, 342, 269, 68);
		panel.add(rdbtnDifficult);
		
		ButtonGroup difficulty = new ButtonGroup();
		difficulty.add(rdbtnEasy);
		difficulty.add(rdbtnAverage);
		difficulty.add(rdbtnDifficult);
		
		btnStart = new JButton("START");
		
		
	
		
		btnStart.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
			if(rdbtnEasy.isSelected()){
				///////////
				
 				lblNewLabel_3.setText(generateQuestion());
 				
 				
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_1.setVisible(true);
				
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnAverage.isSelected()){
				
				lblNewLabel_3.setText(generateQuestionAverage());
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_2.setVisible(true);
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnDifficult.isSelected()){
				
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			}
		});
		btnStart.setBackground(Color.WHITE);
		btnStart.setForeground(Color.RED);
		btnStart.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnStart.setBounds(212, 453, 125, 43);
		panel.add(btnStart);
		
		lblNewLabel_2 = new JLabel("");
		lblNewLabel_2.setVisible(false);
		lblNewLabel_2.setForeground(Color.WHITE);
		lblNewLabel_2.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_2.setBounds(317, 90, 125, 129);
		panel.add(lblNewLabel_2);
		
		lblNewLabel_3 = new JLabel("");
		lblNewLabel_3.setVisible(false);
		lblNewLabel_3.setForeground(Color.WHITE);
		lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_3.setBounds(215, 90, 300, 200);
		panel.add(lblNewLabel_3);
		
		lblNewLabel_4 = new JLabel("");
		lblNewLabel_4.addMouseListener(new MouseAdapter() {
			public void mouseReleased(MouseEvent e) {
				
			}
		});
		lblNewLabel_4.setVisible(false);
		lblNewLabel_4.setForeground(Color.WHITE);
		lblNewLabel_4.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_4.setBounds(121, 90, 103, 129);
		panel.add(lblNewLabel_4);
				
		textField = new JTextField();
		textField.setHorizontalAlignment(SwingConstants.RIGHT);
		textField.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField.setVisible(false);
		textField.setBounds(121, 261, 324, 49);
		panel.add(textField);
		textField.setColumns(10);
		
		textField1 = new JTextField();
		textField1.setHorizontalAlignment(SwingConstants.RIGHT);
		textField1.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField1.setVisible(false);
		textField1.setBounds(121, 261, 324, 49);
		panel.add(textField1);
		textField1.setColumns(10);
		
		returnButton = new JButton("Return");
		returnButton.setVisible(false);
		returnButton.setFont(new Font("Tahoma", Font.BOLD, 20));
		returnButton.setForeground(Color.RED);
		returnButton.setBackground(Color.WHITE);
		returnButton.setBounds(225, 363, 126, 43);
		panel.add(returnButton);
		
		
		returnButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel.setVisible(true);
				rdbtnEasy.setVisible(true);
				rdbtnAverage.setVisible(true);
				rdbtnDifficult.setVisible(true);
				lblNewLabel_1_2_3.setVisible(true);
				lblNewLabel_1_2_1.setVisible(true);
				lblNewLabel_1_2_2.setVisible(true);
				lblNewLabel_1_1.setVisible(true);
				lblNewLabel_1.setVisible(true);
				lblNewLabel_1_2.setVisible(true);
				lblNewLabel_1_2_4.setVisible(true);
				btnStart.setVisible(true);
				returnButton.setVisible(false);
				lblNewLabel_3.setVisible(false);
				lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
			}

		
			
			
		});
		
		btnNewButton_1 = new JButton("SUBMIT");
		btnNewButton_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				
				
				double result = getResult(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
				
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
				
			}
		});
		btnNewButton_1.setVisible(false);
		btnNewButton_1.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_1.setForeground(Color.RED);
		btnNewButton_1.setBackground(Color.WHITE);
		btnNewButton_1.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_1);
		
		//Button 2
		btnNewButton_2 = new JButton("SUBMIT");
		btnNewButton_2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				double result = getResultAverage(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
			
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
			}
		});
		btnNewButton_2.setVisible(false);
		btnNewButton_2.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_2.setForeground(Color.RED);
		btnNewButton_2.setBackground(Color.WHITE);
		btnNewButton_2.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_2);
		
		
		textField2 = new JTextField();
		textField2.setHorizontalAlignment(SwingConstants.RIGHT);
		textField2.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField2.setVisible(false);
		textField2.setBounds(121, 261, 324, 49);
		panel.add(textField2);
		textField2.setColumns(10);
		
		btnNewButton_3 = new JButton("SUBMIT");
		btnNewButton_3.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel_2.setVisible(false);
				
				textField.setVisible(false);
				textField1.setVisible(false);
				btnNewButton_1.setVisible(false);
				btnNewButton_2.setVisible(false);
				
				textField2.setVisible(false);
				btnNewButton_3.setVisible(false);
				
				
				
			}
		});
		btnNewButton_3.setVisible(false);
		btnNewButton_3.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_3.setForeground(Color.RED);
		btnNewButton_3.setBackground(Color.WHITE);
		btnNewButton_3.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_3);
		
		
	}
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-04-30 17:33:46.489
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-04-30 17:33:46.489
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-30 17:33:48.708
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import java.awt.Color;
import java.awt.Toolkit;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

import java.awt.Font;
import javax.swing.JRadioButton;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Arrays;
import java.util.Random;


public class Main extends JFrame {

	private JPanel contentPane;
	private JLabel lblNewLabel_1_2;
	private JLabel lblNewLabel_1;
	private JLabel lblNewLabel_1_1; 
	private JLabel lblNewLabel_1_2_1;
	private JLabel lblNewLabel_1_2_2;
	private JLabel lblNewLabel_1_2_3;
	private JLabel lblNewLabel_1_2_4;
	private JRadioButton rdbtnEasy;
	private JRadioButton rdbtnAverage;
	private JRadioButton rdbtnDifficult;
	private JButton btnStart; 
	private JLabel lblNewLabel;
	private JLabel lblNewLabel_2;
	private JLabel lblNewLabel_3;
	private JLabel lblNewLabel_4;
	private JTextField textField;
	private JButton btnNewButton_1;
	private JTextField textField1;
	private JButton btnNewButton_2;
	private JButton returnButton;

	private JTextField textField2;
	private JButton btnNewButton_3;
	int currentQuestionNumber = 1;
	int playerScore = 0;
	Random random = new Random();
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Main frame = new Main();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
	
	
	
	

	/**
	 * Create the frame.
	 */
	
	
	public int findIndex(char operand) {
		char[] operandOrder = {'-', '+', '/', '*'};
		int index = 0;
		
		for(int i = 0; i < operandOrder.length; i++) {
			if(operand == operandOrder[i]) index = i;
		}
		return index;
	}
	
	public double getResult(String question) {
		char[] questionData = question.toCharArray(); 
		
		char operand = questionData[1];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double result = 0;
		
		if(operand == '+') result = firstNumber + secondNumber;
		if(operand == '-') result = firstNumber - secondNumber;
		if(operand == '*') result = firstNumber * secondNumber;
		if(operand == '/') result = firstNumber / secondNumber;
		double roundedResult = Math.round(result);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	public double getResultAverage(String question) {
		char[] questionData = question.toCharArray(); 
		
		char firstOperand = questionData[1];
		char secondOperand = questionData[3];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double thirdNumber = Double.parseDouble(String.valueOf(questionData[4]));
		double result = 0;
		
		
		char[] operandOrder = {'-', '+', '/', '*'};
		int indexFirst = findIndex(firstOperand);
		int indexSecond = findIndex(secondOperand);
		double totalResult = 0;
		double initialResult = 0;
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+') initialResult = secondNumber + thirdNumber;
			if(secondOperand == '-') initialResult = secondNumber - thirdNumber;
			if(secondOperand == '*') initialResult = secondNumber * thirdNumber;
			if(secondOperand == '/') initialResult = secondNumber / thirdNumber;
			
			
		}
		else if (indexSecond < indexFirst) {
			if(firstOperand == '+') initialResult = firstNumber + secondNumber;
			if(firstOperand == '-') initialResult = firstNumber - secondNumber;
			if(firstOperand == '*') initialResult = firstNumber * secondNumber;
			if(firstOperand == '/') initialResult = firstNumber / secondNumber;
		}
		else {
			if(firstOperand == '+') totalResult = firstNumber + secondNumber + thirdNumber;
			if(firstOperand == '-') totalResult = firstNumber - secondNumber - thirdNumber;
			if(firstOperand == '*') totalResult = firstNumber * secondNumber * thirdNumber;
			if(firstOperand == '/') totalResult = firstNumber / secondNumber / thirdNumber;
		}
		
		
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+')  totalResult = firstNumber + thirdNumber;
			if(secondOperand == '-')  totalResult = firstNumber - thirdNumber;
			if(secondOperand == '*')  totalResult = firstNumber * thirdNumber;
			if(secondOperand == '/')  totalResult = firstNumber / thirdNumber;
			
			
		}
		
		else (indexSecond < indexFirst) {
			if(firstOperand == '+')  totalResult = initialResult + thirdNumber;
			if(firstOperand == '-')  totalResult = initialResult - thirdNumber;
			if(firstOperand == '*')  totalResult = initialResult * thirdNumber;
			if(firstOperand == '/')  totalResult = initialResult / thirdNumber;
		}
		
		
		
		
		
		double roundedResult = Math.round(totalResult);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	
	public String generateQuestion() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond];
		
		return question;
	}
	
	public String generateQuestionAverage() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexThird = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		int randomIndexOperand2 = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond] + operands[randomIndexOperand2] + numbers[randomIndexThird];
		System.out.println(question);
		return question;
	}
	
	
	public Main() {
		setIconImage(Toolkit.getDefaultToolkit().getImage("C:\\Users\\user\\Downloads\\quiz.png"));
		setTitle("QUIZ GAME");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(400, 100, 600, 600);
		contentPane = new JPanel();
		contentPane.setBackground(Color.WHITE);
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));

		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JPanel panel = new JPanel();
		panel.setBackground(Color.RED);
		panel.setBounds(10, 0, 564, 550);
		contentPane.add(panel);
		panel.setLayout(null);
		
		lblNewLabel_1_2_4 = new JLabel("quiz");
		lblNewLabel_1_2_4.setForeground(Color.WHITE);
		lblNewLabel_1_2_4.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_4.setBounds(140, 130, 561, 120);
		panel.add(lblNewLabel_1_2_4);
		
		lblNewLabel_1_2 = new JLabel("MATH");
		lblNewLabel_1_2.setForeground(Color.WHITE);
		lblNewLabel_1_2.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_2.setBounds(70, 50, 561, 120);
		panel.add(lblNewLabel_1_2);
		
		lblNewLabel_1 = new JLabel("MATH");
		lblNewLabel_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1.setForeground(Color.DARK_GRAY);
		lblNewLabel_1.setBounds(78, 50, 777, 120);
		panel.add(lblNewLabel_1);
		
		lblNewLabel_1_1 = new JLabel("MATH");
		lblNewLabel_1_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_1.setBounds(89, 50, 612, 120);
		panel.add(lblNewLabel_1_1);
		
		lblNewLabel_1_2_2 = new JLabel("quiz");
		lblNewLabel_1_2_2.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_2.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_2.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_2);
		
		lblNewLabel_1_2_1 = new JLabel("quiz");
		lblNewLabel_1_2_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_2_1.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_1.setBounds(159, 130, 561, 120);
		panel.add(lblNewLabel_1_2_1);
		
		lblNewLabel_1_2_3 = new JLabel("quiz");
		lblNewLabel_1_2_3.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_3.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_3.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_3);
		
		lblNewLabel = new JLabel("");
		lblNewLabel.setFont(new Font("Dialog", Font.BOLD, 9));
		lblNewLabel.setBounds(225, 428, 161, 14);
		panel.add(lblNewLabel);
		
		rdbtnEasy = new JRadioButton("EASY");
		rdbtnEasy.setForeground(Color.WHITE);
		rdbtnEasy.setBackground(Color.RED);
		rdbtnEasy.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnEasy.setBounds(215, 232, 269, 78);
		panel.add(rdbtnEasy);
		
		rdbtnAverage = new JRadioButton("AVERAGE");
		rdbtnAverage.setForeground(Color.WHITE);
		rdbtnAverage.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnAverage.setBackground(Color.RED);
		rdbtnAverage.setBounds(188, 290, 269, 73);
		panel.add(rdbtnAverage);
		
		rdbtnDifficult = new JRadioButton("DIFFICULT");
		rdbtnDifficult.setForeground(Color.WHITE);
		rdbtnDifficult.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnDifficult.setBackground(Color.RED);
		rdbtnDifficult.setBounds(176, 342, 269, 68);
		panel.add(rdbtnDifficult);
		
		ButtonGroup difficulty = new ButtonGroup();
		difficulty.add(rdbtnEasy);
		difficulty.add(rdbtnAverage);
		difficulty.add(rdbtnDifficult);
		
		btnStart = new JButton("START");
		
		
	
		
		btnStart.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
			if(rdbtnEasy.isSelected()){
				///////////
				
 				lblNewLabel_3.setText(generateQuestion());
 				
 				
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_1.setVisible(true);
				
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnAverage.isSelected()){
				
				lblNewLabel_3.setText(generateQuestionAverage());
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_2.setVisible(true);
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnDifficult.isSelected()){
				
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			}
		});
		btnStart.setBackground(Color.WHITE);
		btnStart.setForeground(Color.RED);
		btnStart.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnStart.setBounds(212, 453, 125, 43);
		panel.add(btnStart);
		
		lblNewLabel_2 = new JLabel("");
		lblNewLabel_2.setVisible(false);
		lblNewLabel_2.setForeground(Color.WHITE);
		lblNewLabel_2.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_2.setBounds(317, 90, 125, 129);
		panel.add(lblNewLabel_2);
		
		lblNewLabel_3 = new JLabel("");
		lblNewLabel_3.setVisible(false);
		lblNewLabel_3.setForeground(Color.WHITE);
		lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_3.setBounds(215, 90, 300, 200);
		panel.add(lblNewLabel_3);
		
		lblNewLabel_4 = new JLabel("");
		lblNewLabel_4.addMouseListener(new MouseAdapter() {
			public void mouseReleased(MouseEvent e) {
				
			}
		});
		lblNewLabel_4.setVisible(false);
		lblNewLabel_4.setForeground(Color.WHITE);
		lblNewLabel_4.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_4.setBounds(121, 90, 103, 129);
		panel.add(lblNewLabel_4);
				
		textField = new JTextField();
		textField.setHorizontalAlignment(SwingConstants.RIGHT);
		textField.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField.setVisible(false);
		textField.setBounds(121, 261, 324, 49);
		panel.add(textField);
		textField.setColumns(10);
		
		textField1 = new JTextField();
		textField1.setHorizontalAlignment(SwingConstants.RIGHT);
		textField1.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField1.setVisible(false);
		textField1.setBounds(121, 261, 324, 49);
		panel.add(textField1);
		textField1.setColumns(10);
		
		returnButton = new JButton("Return");
		returnButton.setVisible(false);
		returnButton.setFont(new Font("Tahoma", Font.BOLD, 20));
		returnButton.setForeground(Color.RED);
		returnButton.setBackground(Color.WHITE);
		returnButton.setBounds(225, 363, 126, 43);
		panel.add(returnButton);
		
		
		returnButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel.setVisible(true);
				rdbtnEasy.setVisible(true);
				rdbtnAverage.setVisible(true);
				rdbtnDifficult.setVisible(true);
				lblNewLabel_1_2_3.setVisible(true);
				lblNewLabel_1_2_1.setVisible(true);
				lblNewLabel_1_2_2.setVisible(true);
				lblNewLabel_1_1.setVisible(true);
				lblNewLabel_1.setVisible(true);
				lblNewLabel_1_2.setVisible(true);
				lblNewLabel_1_2_4.setVisible(true);
				btnStart.setVisible(true);
				returnButton.setVisible(false);
				lblNewLabel_3.setVisible(false);
				lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
			}

		
			
			
		});
		
		btnNewButton_1 = new JButton("SUBMIT");
		btnNewButton_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				
				
				double result = getResult(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
				
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
				
			}
		});
		btnNewButton_1.setVisible(false);
		btnNewButton_1.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_1.setForeground(Color.RED);
		btnNewButton_1.setBackground(Color.WHITE);
		btnNewButton_1.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_1);
		
		//Button 2
		btnNewButton_2 = new JButton("SUBMIT");
		btnNewButton_2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				double result = getResultAverage(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
			
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
			}
		});
		btnNewButton_2.setVisible(false);
		btnNewButton_2.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_2.setForeground(Color.RED);
		btnNewButton_2.setBackground(Color.WHITE);
		btnNewButton_2.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_2);
		
		
		textField2 = new JTextField();
		textField2.setHorizontalAlignment(SwingConstants.RIGHT);
		textField2.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField2.setVisible(false);
		textField2.setBounds(121, 261, 324, 49);
		panel.add(textField2);
		textField2.setColumns(10);
		
		btnNewButton_3 = new JButton("SUBMIT");
		btnNewButton_3.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel_2.setVisible(false);
				
				textField.setVisible(false);
				textField1.setVisible(false);
				btnNewButton_1.setVisible(false);
				btnNewButton_2.setVisible(false);
				
				textField2.setVisible(false);
				btnNewButton_3.setVisible(false);
				
				
				
			}
		});
		btnNewButton_3.setVisible(false);
		btnNewButton_3.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_3.setForeground(Color.RED);
		btnNewButton_3.setBackground(Color.WHITE);
		btnNewButton_3.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_3);
		
		
	}
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-04-30 17:33:48.709
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-04-30 17:33:48.709
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-30 17:33:57.264
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import java.awt.Color;
import java.awt.Toolkit;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

import java.awt.Font;
import javax.swing.JRadioButton;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Arrays;
import java.util.Random;


public class Main extends JFrame {

	private JPanel contentPane;
	private JLabel lblNewLabel_1_2;
	private JLabel lblNewLabel_1;
	private JLabel lblNewLabel_1_1; 
	private JLabel lblNewLabel_1_2_1;
	private JLabel lblNewLabel_1_2_2;
	private JLabel lblNewLabel_1_2_3;
	private JLabel lblNewLabel_1_2_4;
	private JRadioButton rdbtnEasy;
	private JRadioButton rdbtnAverage;
	private JRadioButton rdbtnDifficult;
	private JButton btnStart; 
	private JLabel lblNewLabel;
	private JLabel lblNewLabel_2;
	private JLabel lblNewLabel_3;
	private JLabel lblNewLabel_4;
	private JTextField textField;
	private JButton btnNewButton_1;
	private JTextField textField1;
	private JButton btnNewButton_2;
	private JButton returnButton;

	private JTextField textField2;
	private JButton btnNewButton_3;
	int currentQuestionNumber = 1;
	int playerScore = 0;
	Random random = new Random();
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Main frame = new Main();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
	
	
	
	

	/**
	 * Create the frame.
	 */
	
	
	public int findIndex(char operand) {
		char[] operandOrder = {'-', '+', '/', '*'};
		int index = 0;
		
		for(int i = 0; i < operandOrder.length; i++) {
			if(operand == operandOrder[i]) index = i;
		}
		return index;
	}
	
	public double getResult(String question) {
		char[] questionData = question.toCharArray(); 
		
		char operand = questionData[1];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double result = 0;
		
		if(operand == '+') result = firstNumber + secondNumber;
		if(operand == '-') result = firstNumber - secondNumber;
		if(operand == '*') result = firstNumber * secondNumber;
		if(operand == '/') result = firstNumber / secondNumber;
		double roundedResult = Math.round(result);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	public double getResultAverage(String question) {
		char[] questionData = question.toCharArray(); 
		
		char firstOperand = questionData[1];
		char secondOperand = questionData[3];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double thirdNumber = Double.parseDouble(String.valueOf(questionData[4]));
		double result = 0;
		
		
		char[] operandOrder = {'-', '+', '/', '*'};
		int indexFirst = findIndex(firstOperand);
		int indexSecond = findIndex(secondOperand);
		double totalResult = 0;
		double initialResult = 0;
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+') initialResult = secondNumber + thirdNumber;
			if(secondOperand == '-') initialResult = secondNumber - thirdNumber;
			if(secondOperand == '*') initialResult = secondNumber * thirdNumber;
			if(secondOperand == '/') initialResult = secondNumber / thirdNumber;
			
			
		}
		else if (indexSecond < indexFirst) {
			if(firstOperand == '+') initialResult = firstNumber + secondNumber;
			if(firstOperand == '-') initialResult = firstNumber - secondNumber;
			if(firstOperand == '*') initialResult = firstNumber * secondNumber;
			if(firstOperand == '/') initialResult = firstNumber / secondNumber;
		}
		else {
			if(firstOperand == '+') totalResult = firstNumber + secondNumber + thirdNumber;
			if(firstOperand == '-') totalResult = firstNumber - secondNumber - thirdNumber;
			if(firstOperand == '*') totalResult = firstNumber * secondNumber * thirdNumber;
			if(firstOperand == '/') totalResult = firstNumber / secondNumber / thirdNumber;
		}
		
		
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+')  totalResult = firstNumber + thirdNumber;
			if(secondOperand == '-')  totalResult = firstNumber - thirdNumber;
			if(secondOperand == '*')  totalResult = firstNumber * thirdNumber;
			if(secondOperand == '/')  totalResult = firstNumber / thirdNumber;
			
			
		}
		
		else (indexSecond < indexFirst) {
			if(firstOperand == '+')  totalResult = initialResult + thirdNumber;
			if(firstOperand == '-')  totalResult = initialResult - thirdNumber;
			if(firstOperand == '*')  totalResult = initialResult * thirdNumber;
			if(firstOperand == '/')  totalResult = initialResult / thirdNumber;
		}
		
		
		
		
		
		double roundedResult = Math.round(totalResult);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	
	public String generateQuestion() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond];
		
		return question;
	}
	
	public String generateQuestionAverage() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexThird = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		int randomIndexOperand2 = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond] + operands[randomIndexOperand2] + numbers[randomIndexThird];
		System.out.println(question);
		return question;
	}
	
	
	public Main() {
		setIconImage(Toolkit.getDefaultToolkit().getImage("C:\\Users\\user\\Downloads\\quiz.png"));
		setTitle("QUIZ GAME");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(400, 100, 600, 600);
		contentPane = new JPanel();
		contentPane.setBackground(Color.WHITE);
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));

		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JPanel panel = new JPanel();
		panel.setBackground(Color.RED);
		panel.setBounds(10, 0, 564, 550);
		contentPane.add(panel);
		panel.setLayout(null);
		
		lblNewLabel_1_2_4 = new JLabel("quiz");
		lblNewLabel_1_2_4.setForeground(Color.WHITE);
		lblNewLabel_1_2_4.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_4.setBounds(140, 130, 561, 120);
		panel.add(lblNewLabel_1_2_4);
		
		lblNewLabel_1_2 = new JLabel("MATH");
		lblNewLabel_1_2.setForeground(Color.WHITE);
		lblNewLabel_1_2.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_2.setBounds(70, 50, 561, 120);
		panel.add(lblNewLabel_1_2);
		
		lblNewLabel_1 = new JLabel("MATH");
		lblNewLabel_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1.setForeground(Color.DARK_GRAY);
		lblNewLabel_1.setBounds(78, 50, 777, 120);
		panel.add(lblNewLabel_1);
		
		lblNewLabel_1_1 = new JLabel("MATH");
		lblNewLabel_1_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_1.setBounds(89, 50, 612, 120);
		panel.add(lblNewLabel_1_1);
		
		lblNewLabel_1_2_2 = new JLabel("quiz");
		lblNewLabel_1_2_2.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_2.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_2.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_2);
		
		lblNewLabel_1_2_1 = new JLabel("quiz");
		lblNewLabel_1_2_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_2_1.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_1.setBounds(159, 130, 561, 120);
		panel.add(lblNewLabel_1_2_1);
		
		lblNewLabel_1_2_3 = new JLabel("quiz");
		lblNewLabel_1_2_3.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_3.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_3.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_3);
		
		lblNewLabel = new JLabel("");
		lblNewLabel.setFont(new Font("Dialog", Font.BOLD, 9));
		lblNewLabel.setBounds(225, 428, 161, 14);
		panel.add(lblNewLabel);
		
		rdbtnEasy = new JRadioButton("EASY");
		rdbtnEasy.setForeground(Color.WHITE);
		rdbtnEasy.setBackground(Color.RED);
		rdbtnEasy.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnEasy.setBounds(215, 232, 269, 78);
		panel.add(rdbtnEasy);
		
		rdbtnAverage = new JRadioButton("AVERAGE");
		rdbtnAverage.setForeground(Color.WHITE);
		rdbtnAverage.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnAverage.setBackground(Color.RED);
		rdbtnAverage.setBounds(188, 290, 269, 73);
		panel.add(rdbtnAverage);
		
		rdbtnDifficult = new JRadioButton("DIFFICULT");
		rdbtnDifficult.setForeground(Color.WHITE);
		rdbtnDifficult.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnDifficult.setBackground(Color.RED);
		rdbtnDifficult.setBounds(176, 342, 269, 68);
		panel.add(rdbtnDifficult);
		
		ButtonGroup difficulty = new ButtonGroup();
		difficulty.add(rdbtnEasy);
		difficulty.add(rdbtnAverage);
		difficulty.add(rdbtnDifficult);
		
		btnStart = new JButton("START");
		
		
	
		
		btnStart.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
			if(rdbtnEasy.isSelected()){
				///////////
				
 				lblNewLabel_3.setText(generateQuestion());
 				
 				
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_1.setVisible(true);
				
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnAverage.isSelected()){
				
				lblNewLabel_3.setText(generateQuestionAverage());
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_2.setVisible(true);
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnDifficult.isSelected()){
				
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			}
		});
		btnStart.setBackground(Color.WHITE);
		btnStart.setForeground(Color.RED);
		btnStart.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnStart.setBounds(212, 453, 125, 43);
		panel.add(btnStart);
		
		lblNewLabel_2 = new JLabel("");
		lblNewLabel_2.setVisible(false);
		lblNewLabel_2.setForeground(Color.WHITE);
		lblNewLabel_2.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_2.setBounds(317, 90, 125, 129);
		panel.add(lblNewLabel_2);
		
		lblNewLabel_3 = new JLabel("");
		lblNewLabel_3.setVisible(false);
		lblNewLabel_3.setForeground(Color.WHITE);
		lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_3.setBounds(215, 90, 300, 200);
		panel.add(lblNewLabel_3);
		
		lblNewLabel_4 = new JLabel("");
		lblNewLabel_4.addMouseListener(new MouseAdapter() {
			public void mouseReleased(MouseEvent e) {
				
			}
		});
		lblNewLabel_4.setVisible(false);
		lblNewLabel_4.setForeground(Color.WHITE);
		lblNewLabel_4.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_4.setBounds(121, 90, 103, 129);
		panel.add(lblNewLabel_4);
				
		textField = new JTextField();
		textField.setHorizontalAlignment(SwingConstants.RIGHT);
		textField.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField.setVisible(false);
		textField.setBounds(121, 261, 324, 49);
		panel.add(textField);
		textField.setColumns(10);
		
		textField1 = new JTextField();
		textField1.setHorizontalAlignment(SwingConstants.RIGHT);
		textField1.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField1.setVisible(false);
		textField1.setBounds(121, 261, 324, 49);
		panel.add(textField1);
		textField1.setColumns(10);
		
		returnButton = new JButton("Return");
		returnButton.setVisible(false);
		returnButton.setFont(new Font("Tahoma", Font.BOLD, 20));
		returnButton.setForeground(Color.RED);
		returnButton.setBackground(Color.WHITE);
		returnButton.setBounds(225, 363, 126, 43);
		panel.add(returnButton);
		
		
		returnButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel.setVisible(true);
				rdbtnEasy.setVisible(true);
				rdbtnAverage.setVisible(true);
				rdbtnDifficult.setVisible(true);
				lblNewLabel_1_2_3.setVisible(true);
				lblNewLabel_1_2_1.setVisible(true);
				lblNewLabel_1_2_2.setVisible(true);
				lblNewLabel_1_1.setVisible(true);
				lblNewLabel_1.setVisible(true);
				lblNewLabel_1_2.setVisible(true);
				lblNewLabel_1_2_4.setVisible(true);
				btnStart.setVisible(true);
				returnButton.setVisible(false);
				lblNewLabel_3.setVisible(false);
				lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
			}

		
			
			
		});
		
		btnNewButton_1 = new JButton("SUBMIT");
		btnNewButton_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				
				
				double result = getResult(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
				
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
				
			}
		});
		btnNewButton_1.setVisible(false);
		btnNewButton_1.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_1.setForeground(Color.RED);
		btnNewButton_1.setBackground(Color.WHITE);
		btnNewButton_1.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_1);
		
		//Button 2
		btnNewButton_2 = new JButton("SUBMIT");
		btnNewButton_2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				double result = getResultAverage(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
			
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
			}
		});
		btnNewButton_2.setVisible(false);
		btnNewButton_2.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_2.setForeground(Color.RED);
		btnNewButton_2.setBackground(Color.WHITE);
		btnNewButton_2.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_2);
		
		
		textField2 = new JTextField();
		textField2.setHorizontalAlignment(SwingConstants.RIGHT);
		textField2.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField2.setVisible(false);
		textField2.setBounds(121, 261, 324, 49);
		panel.add(textField2);
		textField2.setColumns(10);
		
		btnNewButton_3 = new JButton("SUBMIT");
		btnNewButton_3.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel_2.setVisible(false);
				
				textField.setVisible(false);
				textField1.setVisible(false);
				btnNewButton_1.setVisible(false);
				btnNewButton_2.setVisible(false);
				
				textField2.setVisible(false);
				btnNewButton_3.setVisible(false);
				
				
				
			}
		});
		btnNewButton_3.setVisible(false);
		btnNewButton_3.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_3.setForeground(Color.RED);
		btnNewButton_3.setBackground(Color.WHITE);
		btnNewButton_3.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_3);
		
		
	}
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:111)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-04-30 17:33:57.265
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:111)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-04-30 17:33:57.265
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:111)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-30 17:33:57.275
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import java.awt.Color;
import java.awt.Toolkit;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

import java.awt.Font;
import javax.swing.JRadioButton;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Arrays;
import java.util.Random;


public class Main extends JFrame {

	private JPanel contentPane;
	private JLabel lblNewLabel_1_2;
	private JLabel lblNewLabel_1;
	private JLabel lblNewLabel_1_1; 
	private JLabel lblNewLabel_1_2_1;
	private JLabel lblNewLabel_1_2_2;
	private JLabel lblNewLabel_1_2_3;
	private JLabel lblNewLabel_1_2_4;
	private JRadioButton rdbtnEasy;
	private JRadioButton rdbtnAverage;
	private JRadioButton rdbtnDifficult;
	private JButton btnStart; 
	private JLabel lblNewLabel;
	private JLabel lblNewLabel_2;
	private JLabel lblNewLabel_3;
	private JLabel lblNewLabel_4;
	private JTextField textField;
	private JButton btnNewButton_1;
	private JTextField textField1;
	private JButton btnNewButton_2;
	private JButton returnButton;

	private JTextField textField2;
	private JButton btnNewButton_3;
	int currentQuestionNumber = 1;
	int playerScore = 0;
	Random random = new Random();
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Main frame = new Main();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
	
	
	
	

	/**
	 * Create the frame.
	 */
	
	
	public int findIndex(char operand) {
		char[] operandOrder = {'-', '+', '/', '*'};
		int index = 0;
		
		for(int i = 0; i < operandOrder.length; i++) {
			if(operand == operandOrder[i]) index = i;
		}
		return index;
	}
	
	public double getResult(String question) {
		char[] questionData = question.toCharArray(); 
		
		char operand = questionData[1];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double result = 0;
		
		if(operand == '+') result = firstNumber + secondNumber;
		if(operand == '-') result = firstNumber - secondNumber;
		if(operand == '*') result = firstNumber * secondNumber;
		if(operand == '/') result = firstNumber / secondNumber;
		double roundedResult = Math.round(result);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	public double getResultAverage(String question) {
		char[] questionData = question.toCharArray(); 
		
		char firstOperand = questionData[1];
		char secondOperand = questionData[3];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double thirdNumber = Double.parseDouble(String.valueOf(questionData[4]));
		double result = 0;
		
		
		char[] operandOrder = {'-', '+', '/', '*'};
		int indexFirst = findIndex(firstOperand);
		int indexSecond = findIndex(secondOperand);
		double totalResult = 0;
		double initialResult = 0;
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+') initialResult = secondNumber + thirdNumber;
			if(secondOperand == '-') initialResult = secondNumber - thirdNumber;
			if(secondOperand == '*') initialResult = secondNumber * thirdNumber;
			if(secondOperand == '/') initialResult = secondNumber / thirdNumber;
			
			
		}
		else if (indexSecond < indexFirst) {
			if(firstOperand == '+') initialResult = firstNumber + secondNumber;
			if(firstOperand == '-') initialResult = firstNumber - secondNumber;
			if(firstOperand == '*') initialResult = firstNumber * secondNumber;
			if(firstOperand == '/') initialResult = firstNumber / secondNumber;
		}
		else {
			if(firstOperand == '+') totalResult = firstNumber + secondNumber + thirdNumber;
			if(firstOperand == '-') totalResult = firstNumber - secondNumber - thirdNumber;
			if(firstOperand == '*') totalResult = firstNumber * secondNumber * thirdNumber;
			if(firstOperand == '/') totalResult = firstNumber / secondNumber / thirdNumber;
		}
		
		
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+')  totalResult = firstNumber + thirdNumber;
			if(secondOperand == '-')  totalResult = firstNumber - thirdNumber;
			if(secondOperand == '*')  totalResult = firstNumber * thirdNumber;
			if(secondOperand == '/')  totalResult = firstNumber / thirdNumber;
			
			
		}
		
		else (indexSecond < indexFirst) {
			if(firstOperand == '+')  totalResult = initialResult + thirdNumber;
			if(firstOperand == '-')  totalResult = initialResult - thirdNumber;
			if(firstOperand == '*')  totalResult = initialResult * thirdNumber;
			if(firstOperand == '/')  totalResult = initialResult / thirdNumber;
		}
		
		
		
		
		
		double roundedResult = Math.round(totalResult);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	
	public String generateQuestion() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond];
		
		return question;
	}
	
	public String generateQuestionAverage() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexThird = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		int randomIndexOperand2 = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond] + operands[randomIndexOperand2] + numbers[randomIndexThird];
		System.out.println(question);
		return question;
	}
	
	
	public Main() {
		setIconImage(Toolkit.getDefaultToolkit().getImage("C:\\Users\\user\\Downloads\\quiz.png"));
		setTitle("QUIZ GAME");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(400, 100, 600, 600);
		contentPane = new JPanel();
		contentPane.setBackground(Color.WHITE);
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));

		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JPanel panel = new JPanel();
		panel.setBackground(Color.RED);
		panel.setBounds(10, 0, 564, 550);
		contentPane.add(panel);
		panel.setLayout(null);
		
		lblNewLabel_1_2_4 = new JLabel("quiz");
		lblNewLabel_1_2_4.setForeground(Color.WHITE);
		lblNewLabel_1_2_4.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_4.setBounds(140, 130, 561, 120);
		panel.add(lblNewLabel_1_2_4);
		
		lblNewLabel_1_2 = new JLabel("MATH");
		lblNewLabel_1_2.setForeground(Color.WHITE);
		lblNewLabel_1_2.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_2.setBounds(70, 50, 561, 120);
		panel.add(lblNewLabel_1_2);
		
		lblNewLabel_1 = new JLabel("MATH");
		lblNewLabel_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1.setForeground(Color.DARK_GRAY);
		lblNewLabel_1.setBounds(78, 50, 777, 120);
		panel.add(lblNewLabel_1);
		
		lblNewLabel_1_1 = new JLabel("MATH");
		lblNewLabel_1_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_1.setBounds(89, 50, 612, 120);
		panel.add(lblNewLabel_1_1);
		
		lblNewLabel_1_2_2 = new JLabel("quiz");
		lblNewLabel_1_2_2.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_2.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_2.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_2);
		
		lblNewLabel_1_2_1 = new JLabel("quiz");
		lblNewLabel_1_2_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_2_1.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_1.setBounds(159, 130, 561, 120);
		panel.add(lblNewLabel_1_2_1);
		
		lblNewLabel_1_2_3 = new JLabel("quiz");
		lblNewLabel_1_2_3.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_3.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_3.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_3);
		
		lblNewLabel = new JLabel("");
		lblNewLabel.setFont(new Font("Dialog", Font.BOLD, 9));
		lblNewLabel.setBounds(225, 428, 161, 14);
		panel.add(lblNewLabel);
		
		rdbtnEasy = new JRadioButton("EASY");
		rdbtnEasy.setForeground(Color.WHITE);
		rdbtnEasy.setBackground(Color.RED);
		rdbtnEasy.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnEasy.setBounds(215, 232, 269, 78);
		panel.add(rdbtnEasy);
		
		rdbtnAverage = new JRadioButton("AVERAGE");
		rdbtnAverage.setForeground(Color.WHITE);
		rdbtnAverage.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnAverage.setBackground(Color.RED);
		rdbtnAverage.setBounds(188, 290, 269, 73);
		panel.add(rdbtnAverage);
		
		rdbtnDifficult = new JRadioButton("DIFFICULT");
		rdbtnDifficult.setForeground(Color.WHITE);
		rdbtnDifficult.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnDifficult.setBackground(Color.RED);
		rdbtnDifficult.setBounds(176, 342, 269, 68);
		panel.add(rdbtnDifficult);
		
		ButtonGroup difficulty = new ButtonGroup();
		difficulty.add(rdbtnEasy);
		difficulty.add(rdbtnAverage);
		difficulty.add(rdbtnDifficult);
		
		btnStart = new JButton("START");
		
		
	
		
		btnStart.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
			if(rdbtnEasy.isSelected()){
				///////////
				
 				lblNewLabel_3.setText(generateQuestion());
 				
 				
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_1.setVisible(true);
				
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnAverage.isSelected()){
				
				lblNewLabel_3.setText(generateQuestionAverage());
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_2.setVisible(true);
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnDifficult.isSelected()){
				
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			}
		});
		btnStart.setBackground(Color.WHITE);
		btnStart.setForeground(Color.RED);
		btnStart.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnStart.setBounds(212, 453, 125, 43);
		panel.add(btnStart);
		
		lblNewLabel_2 = new JLabel("");
		lblNewLabel_2.setVisible(false);
		lblNewLabel_2.setForeground(Color.WHITE);
		lblNewLabel_2.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_2.setBounds(317, 90, 125, 129);
		panel.add(lblNewLabel_2);
		
		lblNewLabel_3 = new JLabel("");
		lblNewLabel_3.setVisible(false);
		lblNewLabel_3.setForeground(Color.WHITE);
		lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_3.setBounds(215, 90, 300, 200);
		panel.add(lblNewLabel_3);
		
		lblNewLabel_4 = new JLabel("");
		lblNewLabel_4.addMouseListener(new MouseAdapter() {
			public void mouseReleased(MouseEvent e) {
				
			}
		});
		lblNewLabel_4.setVisible(false);
		lblNewLabel_4.setForeground(Color.WHITE);
		lblNewLabel_4.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_4.setBounds(121, 90, 103, 129);
		panel.add(lblNewLabel_4);
				
		textField = new JTextField();
		textField.setHorizontalAlignment(SwingConstants.RIGHT);
		textField.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField.setVisible(false);
		textField.setBounds(121, 261, 324, 49);
		panel.add(textField);
		textField.setColumns(10);
		
		textField1 = new JTextField();
		textField1.setHorizontalAlignment(SwingConstants.RIGHT);
		textField1.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField1.setVisible(false);
		textField1.setBounds(121, 261, 324, 49);
		panel.add(textField1);
		textField1.setColumns(10);
		
		returnButton = new JButton("Return");
		returnButton.setVisible(false);
		returnButton.setFont(new Font("Tahoma", Font.BOLD, 20));
		returnButton.setForeground(Color.RED);
		returnButton.setBackground(Color.WHITE);
		returnButton.setBounds(225, 363, 126, 43);
		panel.add(returnButton);
		
		
		returnButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel.setVisible(true);
				rdbtnEasy.setVisible(true);
				rdbtnAverage.setVisible(true);
				rdbtnDifficult.setVisible(true);
				lblNewLabel_1_2_3.setVisible(true);
				lblNewLabel_1_2_1.setVisible(true);
				lblNewLabel_1_2_2.setVisible(true);
				lblNewLabel_1_1.setVisible(true);
				lblNewLabel_1.setVisible(true);
				lblNewLabel_1_2.setVisible(true);
				lblNewLabel_1_2_4.setVisible(true);
				btnStart.setVisible(true);
				returnButton.setVisible(false);
				lblNewLabel_3.setVisible(false);
				lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
			}

		
			
			
		});
		
		btnNewButton_1 = new JButton("SUBMIT");
		btnNewButton_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				
				
				double result = getResult(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
				
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
				
			}
		});
		btnNewButton_1.setVisible(false);
		btnNewButton_1.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_1.setForeground(Color.RED);
		btnNewButton_1.setBackground(Color.WHITE);
		btnNewButton_1.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_1);
		
		//Button 2
		btnNewButton_2 = new JButton("SUBMIT");
		btnNewButton_2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				double result = getResultAverage(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
			
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
			}
		});
		btnNewButton_2.setVisible(false);
		btnNewButton_2.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_2.setForeground(Color.RED);
		btnNewButton_2.setBackground(Color.WHITE);
		btnNewButton_2.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_2);
		
		
		textField2 = new JTextField();
		textField2.setHorizontalAlignment(SwingConstants.RIGHT);
		textField2.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField2.setVisible(false);
		textField2.setBounds(121, 261, 324, 49);
		panel.add(textField2);
		textField2.setColumns(10);
		
		btnNewButton_3 = new JButton("SUBMIT");
		btnNewButton_3.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel_2.setVisible(false);
				
				textField.setVisible(false);
				textField1.setVisible(false);
				btnNewButton_1.setVisible(false);
				btnNewButton_2.setVisible(false);
				
				textField2.setVisible(false);
				btnNewButton_3.setVisible(false);
				
				
				
			}
		});
		btnNewButton_3.setVisible(false);
		btnNewButton_3.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_3.setForeground(Color.RED);
		btnNewButton_3.setBackground(Color.WHITE);
		btnNewButton_3.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_3);
		
		
	}
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.internal.core.manipulation.dom.ASTResolving.createQuickFixAST(ASTResolving.java:1052)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:131)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:111)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jface.text 4 0 2023-04-30 17:33:57.276
!MESSAGE Unexpected runtime error while computing a text hover
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.internal.core.manipulation.dom.ASTResolving.createQuickFixAST(ASTResolving.java:1052)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:131)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:111)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-30 17:34:01.551
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import java.awt.Color;
import java.awt.Toolkit;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

import java.awt.Font;
import javax.swing.JRadioButton;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Arrays;
import java.util.Random;


public class Main extends JFrame {

	private JPanel contentPane;
	private JLabel lblNewLabel_1_2;
	private JLabel lblNewLabel_1;
	private JLabel lblNewLabel_1_1; 
	private JLabel lblNewLabel_1_2_1;
	private JLabel lblNewLabel_1_2_2;
	private JLabel lblNewLabel_1_2_3;
	private JLabel lblNewLabel_1_2_4;
	private JRadioButton rdbtnEasy;
	private JRadioButton rdbtnAverage;
	private JRadioButton rdbtnDifficult;
	private JButton btnStart; 
	private JLabel lblNewLabel;
	private JLabel lblNewLabel_2;
	private JLabel lblNewLabel_3;
	private JLabel lblNewLabel_4;
	private JTextField textField;
	private JButton btnNewButton_1;
	private JTextField textField1;
	private JButton btnNewButton_2;
	private JButton returnButton;

	private JTextField textField2;
	private JButton btnNewButton_3;
	int currentQuestionNumber = 1;
	int playerScore = 0;
	Random random = new Random();
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Main frame = new Main();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
	
	
	
	

	/**
	 * Create the frame.
	 */
	
	
	public int findIndex(char operand) {
		char[] operandOrder = {'-', '+', '/', '*'};
		int index = 0;
		
		for(int i = 0; i < operandOrder.length; i++) {
			if(operand == operandOrder[i]) index = i;
		}
		return index;
	}
	
	public double getResult(String question) {
		char[] questionData = question.toCharArray(); 
		
		char operand = questionData[1];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double result = 0;
		
		if(operand == '+') result = firstNumber + secondNumber;
		if(operand == '-') result = firstNumber - secondNumber;
		if(operand == '*') result = firstNumber * secondNumber;
		if(operand == '/') result = firstNumber / secondNumber;
		double roundedResult = Math.round(result);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	public double getResultAverage(String question) {
		char[] questionData = question.toCharArray(); 
		
		char firstOperand = questionData[1];
		char secondOperand = questionData[3];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double thirdNumber = Double.parseDouble(String.valueOf(questionData[4]));
		double result = 0;
		
		
		char[] operandOrder = {'-', '+', '/', '*'};
		int indexFirst = findIndex(firstOperand);
		int indexSecond = findIndex(secondOperand);
		double totalResult = 0;
		double initialResult = 0;
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+') initialResult = secondNumber + thirdNumber;
			if(secondOperand == '-') initialResult = secondNumber - thirdNumber;
			if(secondOperand == '*') initialResult = secondNumber * thirdNumber;
			if(secondOperand == '/') initialResult = secondNumber / thirdNumber;
			
			
		}
		else if (indexSecond < indexFirst) {
			if(firstOperand == '+') initialResult = firstNumber + secondNumber;
			if(firstOperand == '-') initialResult = firstNumber - secondNumber;
			if(firstOperand == '*') initialResult = firstNumber * secondNumber;
			if(firstOperand == '/') initialResult = firstNumber / secondNumber;
		}
		else {
			if(firstOperand == '+') totalResult = firstNumber + secondNumber + thirdNumber;
			if(firstOperand == '-') totalResult = firstNumber - secondNumber - thirdNumber;
			if(firstOperand == '*') totalResult = firstNumber * secondNumber * thirdNumber;
			if(firstOperand == '/') totalResult = firstNumber / secondNumber / thirdNumber;
		}
		
		
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+')  totalResult = firstNumber + thirdNumber;
			if(secondOperand == '-')  totalResult = firstNumber - thirdNumber;
			if(secondOperand == '*')  totalResult = firstNumber * thirdNumber;
			if(secondOperand == '/')  totalResult = firstNumber / thirdNumber;
			
			
		}
		
		else (indexSecond < indexFirst) {
			if(firstOperand == '+')  totalResult = initialResult + thirdNumber;
			if(firstOperand == '-')  totalResult = initialResult - thirdNumber;
			if(firstOperand == '*')  totalResult = initialResult * thirdNumber;
			if(firstOperand == '/')  totalResult = initialResult / thirdNumber;
		}
		
		
		
		
		
		double roundedResult = Math.round(totalResult);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	
	public String generateQuestion() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond];
		
		return question;
	}
	
	public String generateQuestionAverage() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexThird = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		int randomIndexOperand2 = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond] + operands[randomIndexOperand2] + numbers[randomIndexThird];
		System.out.println(question);
		return question;
	}
	
	
	public Main() {
		setIconImage(Toolkit.getDefaultToolkit().getImage("C:\\Users\\user\\Downloads\\quiz.png"));
		setTitle("QUIZ GAME");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(400, 100, 600, 600);
		contentPane = new JPanel();
		contentPane.setBackground(Color.WHITE);
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));

		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JPanel panel = new JPanel();
		panel.setBackground(Color.RED);
		panel.setBounds(10, 0, 564, 550);
		contentPane.add(panel);
		panel.setLayout(null);
		
		lblNewLabel_1_2_4 = new JLabel("quiz");
		lblNewLabel_1_2_4.setForeground(Color.WHITE);
		lblNewLabel_1_2_4.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_4.setBounds(140, 130, 561, 120);
		panel.add(lblNewLabel_1_2_4);
		
		lblNewLabel_1_2 = new JLabel("MATH");
		lblNewLabel_1_2.setForeground(Color.WHITE);
		lblNewLabel_1_2.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_2.setBounds(70, 50, 561, 120);
		panel.add(lblNewLabel_1_2);
		
		lblNewLabel_1 = new JLabel("MATH");
		lblNewLabel_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1.setForeground(Color.DARK_GRAY);
		lblNewLabel_1.setBounds(78, 50, 777, 120);
		panel.add(lblNewLabel_1);
		
		lblNewLabel_1_1 = new JLabel("MATH");
		lblNewLabel_1_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_1.setBounds(89, 50, 612, 120);
		panel.add(lblNewLabel_1_1);
		
		lblNewLabel_1_2_2 = new JLabel("quiz");
		lblNewLabel_1_2_2.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_2.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_2.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_2);
		
		lblNewLabel_1_2_1 = new JLabel("quiz");
		lblNewLabel_1_2_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_2_1.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_1.setBounds(159, 130, 561, 120);
		panel.add(lblNewLabel_1_2_1);
		
		lblNewLabel_1_2_3 = new JLabel("quiz");
		lblNewLabel_1_2_3.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_3.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_3.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_3);
		
		lblNewLabel = new JLabel("");
		lblNewLabel.setFont(new Font("Dialog", Font.BOLD, 9));
		lblNewLabel.setBounds(225, 428, 161, 14);
		panel.add(lblNewLabel);
		
		rdbtnEasy = new JRadioButton("EASY");
		rdbtnEasy.setForeground(Color.WHITE);
		rdbtnEasy.setBackground(Color.RED);
		rdbtnEasy.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnEasy.setBounds(215, 232, 269, 78);
		panel.add(rdbtnEasy);
		
		rdbtnAverage = new JRadioButton("AVERAGE");
		rdbtnAverage.setForeground(Color.WHITE);
		rdbtnAverage.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnAverage.setBackground(Color.RED);
		rdbtnAverage.setBounds(188, 290, 269, 73);
		panel.add(rdbtnAverage);
		
		rdbtnDifficult = new JRadioButton("DIFFICULT");
		rdbtnDifficult.setForeground(Color.WHITE);
		rdbtnDifficult.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnDifficult.setBackground(Color.RED);
		rdbtnDifficult.setBounds(176, 342, 269, 68);
		panel.add(rdbtnDifficult);
		
		ButtonGroup difficulty = new ButtonGroup();
		difficulty.add(rdbtnEasy);
		difficulty.add(rdbtnAverage);
		difficulty.add(rdbtnDifficult);
		
		btnStart = new JButton("START");
		
		
	
		
		btnStart.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
			if(rdbtnEasy.isSelected()){
				///////////
				
 				lblNewLabel_3.setText(generateQuestion());
 				
 				
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_1.setVisible(true);
				
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnAverage.isSelected()){
				
				lblNewLabel_3.setText(generateQuestionAverage());
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_2.setVisible(true);
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnDifficult.isSelected()){
				
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			}
		});
		btnStart.setBackground(Color.WHITE);
		btnStart.setForeground(Color.RED);
		btnStart.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnStart.setBounds(212, 453, 125, 43);
		panel.add(btnStart);
		
		lblNewLabel_2 = new JLabel("");
		lblNewLabel_2.setVisible(false);
		lblNewLabel_2.setForeground(Color.WHITE);
		lblNewLabel_2.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_2.setBounds(317, 90, 125, 129);
		panel.add(lblNewLabel_2);
		
		lblNewLabel_3 = new JLabel("");
		lblNewLabel_3.setVisible(false);
		lblNewLabel_3.setForeground(Color.WHITE);
		lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_3.setBounds(215, 90, 300, 200);
		panel.add(lblNewLabel_3);
		
		lblNewLabel_4 = new JLabel("");
		lblNewLabel_4.addMouseListener(new MouseAdapter() {
			public void mouseReleased(MouseEvent e) {
				
			}
		});
		lblNewLabel_4.setVisible(false);
		lblNewLabel_4.setForeground(Color.WHITE);
		lblNewLabel_4.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_4.setBounds(121, 90, 103, 129);
		panel.add(lblNewLabel_4);
				
		textField = new JTextField();
		textField.setHorizontalAlignment(SwingConstants.RIGHT);
		textField.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField.setVisible(false);
		textField.setBounds(121, 261, 324, 49);
		panel.add(textField);
		textField.setColumns(10);
		
		textField1 = new JTextField();
		textField1.setHorizontalAlignment(SwingConstants.RIGHT);
		textField1.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField1.setVisible(false);
		textField1.setBounds(121, 261, 324, 49);
		panel.add(textField1);
		textField1.setColumns(10);
		
		returnButton = new JButton("Return");
		returnButton.setVisible(false);
		returnButton.setFont(new Font("Tahoma", Font.BOLD, 20));
		returnButton.setForeground(Color.RED);
		returnButton.setBackground(Color.WHITE);
		returnButton.setBounds(225, 363, 126, 43);
		panel.add(returnButton);
		
		
		returnButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel.setVisible(true);
				rdbtnEasy.setVisible(true);
				rdbtnAverage.setVisible(true);
				rdbtnDifficult.setVisible(true);
				lblNewLabel_1_2_3.setVisible(true);
				lblNewLabel_1_2_1.setVisible(true);
				lblNewLabel_1_2_2.setVisible(true);
				lblNewLabel_1_1.setVisible(true);
				lblNewLabel_1.setVisible(true);
				lblNewLabel_1_2.setVisible(true);
				lblNewLabel_1_2_4.setVisible(true);
				btnStart.setVisible(true);
				returnButton.setVisible(false);
				lblNewLabel_3.setVisible(false);
				lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
			}

		
			
			
		});
		
		btnNewButton_1 = new JButton("SUBMIT");
		btnNewButton_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				
				
				double result = getResult(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
				
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
				
			}
		});
		btnNewButton_1.setVisible(false);
		btnNewButton_1.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_1.setForeground(Color.RED);
		btnNewButton_1.setBackground(Color.WHITE);
		btnNewButton_1.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_1);
		
		//Button 2
		btnNewButton_2 = new JButton("SUBMIT");
		btnNewButton_2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				double result = getResultAverage(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
			
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
			}
		});
		btnNewButton_2.setVisible(false);
		btnNewButton_2.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_2.setForeground(Color.RED);
		btnNewButton_2.setBackground(Color.WHITE);
		btnNewButton_2.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_2);
		
		
		textField2 = new JTextField();
		textField2.setHorizontalAlignment(SwingConstants.RIGHT);
		textField2.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField2.setVisible(false);
		textField2.setBounds(121, 261, 324, 49);
		panel.add(textField2);
		textField2.setColumns(10);
		
		btnNewButton_3 = new JButton("SUBMIT");
		btnNewButton_3.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel_2.setVisible(false);
				
				textField.setVisible(false);
				textField1.setVisible(false);
				btnNewButton_1.setVisible(false);
				btnNewButton_2.setVisible(false);
				
				textField2.setVisible(false);
				btnNewButton_3.setVisible(false);
				
				
				
			}
		});
		btnNewButton_3.setVisible(false);
		btnNewButton_3.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_3.setForeground(Color.RED);
		btnNewButton_3.setBackground(Color.WHITE);
		btnNewButton_3.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_3);
		
		
	}
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-04-30 17:34:01.552
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-04-30 17:34:01.552
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-30 17:34:01.989
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import java.awt.Color;
import java.awt.Toolkit;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

import java.awt.Font;
import javax.swing.JRadioButton;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Arrays;
import java.util.Random;


public class Main extends JFrame {

	private JPanel contentPane;
	private JLabel lblNewLabel_1_2;
	private JLabel lblNewLabel_1;
	private JLabel lblNewLabel_1_1; 
	private JLabel lblNewLabel_1_2_1;
	private JLabel lblNewLabel_1_2_2;
	private JLabel lblNewLabel_1_2_3;
	private JLabel lblNewLabel_1_2_4;
	private JRadioButton rdbtnEasy;
	private JRadioButton rdbtnAverage;
	private JRadioButton rdbtnDifficult;
	private JButton btnStart; 
	private JLabel lblNewLabel;
	private JLabel lblNewLabel_2;
	private JLabel lblNewLabel_3;
	private JLabel lblNewLabel_4;
	private JTextField textField;
	private JButton btnNewButton_1;
	private JTextField textField1;
	private JButton btnNewButton_2;
	private JButton returnButton;

	private JTextField textField2;
	private JButton btnNewButton_3;
	int currentQuestionNumber = 1;
	int playerScore = 0;
	Random random = new Random();
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Main frame = new Main();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
	
	
	
	

	/**
	 * Create the frame.
	 */
	
	
	public int findIndex(char operand) {
		char[] operandOrder = {'-', '+', '/', '*'};
		int index = 0;
		
		for(int i = 0; i < operandOrder.length; i++) {
			if(operand == operandOrder[i]) index = i;
		}
		return index;
	}
	
	public double getResult(String question) {
		char[] questionData = question.toCharArray(); 
		
		char operand = questionData[1];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double result = 0;
		
		if(operand == '+') result = firstNumber + secondNumber;
		if(operand == '-') result = firstNumber - secondNumber;
		if(operand == '*') result = firstNumber * secondNumber;
		if(operand == '/') result = firstNumber / secondNumber;
		double roundedResult = Math.round(result);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	public double getResultAverage(String question) {
		char[] questionData = question.toCharArray(); 
		
		char firstOperand = questionData[1];
		char secondOperand = questionData[3];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double thirdNumber = Double.parseDouble(String.valueOf(questionData[4]));
		double result = 0;
		
		
		char[] operandOrder = {'-', '+', '/', '*'};
		int indexFirst = findIndex(firstOperand);
		int indexSecond = findIndex(secondOperand);
		double totalResult = 0;
		double initialResult = 0;
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+') initialResult = secondNumber + thirdNumber;
			if(secondOperand == '-') initialResult = secondNumber - thirdNumber;
			if(secondOperand == '*') initialResult = secondNumber * thirdNumber;
			if(secondOperand == '/') initialResult = secondNumber / thirdNumber;
			
			
		}
		else if (indexSecond < indexFirst) {
			if(firstOperand == '+') initialResult = firstNumber + secondNumber;
			if(firstOperand == '-') initialResult = firstNumber - secondNumber;
			if(firstOperand == '*') initialResult = firstNumber * secondNumber;
			if(firstOperand == '/') initialResult = firstNumber / secondNumber;
		}
		else {
			if(firstOperand == '+') totalResult = firstNumber + secondNumber + thirdNumber;
			if(firstOperand == '-') totalResult = firstNumber - secondNumber - thirdNumber;
			if(firstOperand == '*') totalResult = firstNumber * secondNumber * thirdNumber;
			if(firstOperand == '/') totalResult = firstNumber / secondNumber / thirdNumber;
		}
		
		
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+')  totalResult = firstNumber + thirdNumber;
			if(secondOperand == '-')  totalResult = firstNumber - thirdNumber;
			if(secondOperand == '*')  totalResult = firstNumber * thirdNumber;
			if(secondOperand == '/')  totalResult = firstNumber / thirdNumber;
			
			
		}
		
		else (indexSecond < indexFirst) {
			if(firstOperand == '+')  totalResult = initialResult + thirdNumber;
			if(firstOperand == '-')  totalResult = initialResult - thirdNumber;
			if(firstOperand == '*')  totalResult = initialResult * thirdNumber;
			if(firstOperand == '/')  totalResult = initialResult / thirdNumber;
		}
		
		
		
		
		
		double roundedResult = Math.round(totalResult);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	
	public String generateQuestion() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond];
		
		return question;
	}
	
	public String generateQuestionAverage() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexThird = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		int randomIndexOperand2 = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond] + operands[randomIndexOperand2] + numbers[randomIndexThird];
		System.out.println(question);
		return question;
	}
	
	
	public Main() {
		setIconImage(Toolkit.getDefaultToolkit().getImage("C:\\Users\\user\\Downloads\\quiz.png"));
		setTitle("QUIZ GAME");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(400, 100, 600, 600);
		contentPane = new JPanel();
		contentPane.setBackground(Color.WHITE);
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));

		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JPanel panel = new JPanel();
		panel.setBackground(Color.RED);
		panel.setBounds(10, 0, 564, 550);
		contentPane.add(panel);
		panel.setLayout(null);
		
		lblNewLabel_1_2_4 = new JLabel("quiz");
		lblNewLabel_1_2_4.setForeground(Color.WHITE);
		lblNewLabel_1_2_4.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_4.setBounds(140, 130, 561, 120);
		panel.add(lblNewLabel_1_2_4);
		
		lblNewLabel_1_2 = new JLabel("MATH");
		lblNewLabel_1_2.setForeground(Color.WHITE);
		lblNewLabel_1_2.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_2.setBounds(70, 50, 561, 120);
		panel.add(lblNewLabel_1_2);
		
		lblNewLabel_1 = new JLabel("MATH");
		lblNewLabel_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1.setForeground(Color.DARK_GRAY);
		lblNewLabel_1.setBounds(78, 50, 777, 120);
		panel.add(lblNewLabel_1);
		
		lblNewLabel_1_1 = new JLabel("MATH");
		lblNewLabel_1_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_1.setBounds(89, 50, 612, 120);
		panel.add(lblNewLabel_1_1);
		
		lblNewLabel_1_2_2 = new JLabel("quiz");
		lblNewLabel_1_2_2.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_2.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_2.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_2);
		
		lblNewLabel_1_2_1 = new JLabel("quiz");
		lblNewLabel_1_2_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_2_1.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_1.setBounds(159, 130, 561, 120);
		panel.add(lblNewLabel_1_2_1);
		
		lblNewLabel_1_2_3 = new JLabel("quiz");
		lblNewLabel_1_2_3.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_3.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_3.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_3);
		
		lblNewLabel = new JLabel("");
		lblNewLabel.setFont(new Font("Dialog", Font.BOLD, 9));
		lblNewLabel.setBounds(225, 428, 161, 14);
		panel.add(lblNewLabel);
		
		rdbtnEasy = new JRadioButton("EASY");
		rdbtnEasy.setForeground(Color.WHITE);
		rdbtnEasy.setBackground(Color.RED);
		rdbtnEasy.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnEasy.setBounds(215, 232, 269, 78);
		panel.add(rdbtnEasy);
		
		rdbtnAverage = new JRadioButton("AVERAGE");
		rdbtnAverage.setForeground(Color.WHITE);
		rdbtnAverage.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnAverage.setBackground(Color.RED);
		rdbtnAverage.setBounds(188, 290, 269, 73);
		panel.add(rdbtnAverage);
		
		rdbtnDifficult = new JRadioButton("DIFFICULT");
		rdbtnDifficult.setForeground(Color.WHITE);
		rdbtnDifficult.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnDifficult.setBackground(Color.RED);
		rdbtnDifficult.setBounds(176, 342, 269, 68);
		panel.add(rdbtnDifficult);
		
		ButtonGroup difficulty = new ButtonGroup();
		difficulty.add(rdbtnEasy);
		difficulty.add(rdbtnAverage);
		difficulty.add(rdbtnDifficult);
		
		btnStart = new JButton("START");
		
		
	
		
		btnStart.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
			if(rdbtnEasy.isSelected()){
				///////////
				
 				lblNewLabel_3.setText(generateQuestion());
 				
 				
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_1.setVisible(true);
				
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnAverage.isSelected()){
				
				lblNewLabel_3.setText(generateQuestionAverage());
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_2.setVisible(true);
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnDifficult.isSelected()){
				
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			}
		});
		btnStart.setBackground(Color.WHITE);
		btnStart.setForeground(Color.RED);
		btnStart.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnStart.setBounds(212, 453, 125, 43);
		panel.add(btnStart);
		
		lblNewLabel_2 = new JLabel("");
		lblNewLabel_2.setVisible(false);
		lblNewLabel_2.setForeground(Color.WHITE);
		lblNewLabel_2.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_2.setBounds(317, 90, 125, 129);
		panel.add(lblNewLabel_2);
		
		lblNewLabel_3 = new JLabel("");
		lblNewLabel_3.setVisible(false);
		lblNewLabel_3.setForeground(Color.WHITE);
		lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_3.setBounds(215, 90, 300, 200);
		panel.add(lblNewLabel_3);
		
		lblNewLabel_4 = new JLabel("");
		lblNewLabel_4.addMouseListener(new MouseAdapter() {
			public void mouseReleased(MouseEvent e) {
				
			}
		});
		lblNewLabel_4.setVisible(false);
		lblNewLabel_4.setForeground(Color.WHITE);
		lblNewLabel_4.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_4.setBounds(121, 90, 103, 129);
		panel.add(lblNewLabel_4);
				
		textField = new JTextField();
		textField.setHorizontalAlignment(SwingConstants.RIGHT);
		textField.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField.setVisible(false);
		textField.setBounds(121, 261, 324, 49);
		panel.add(textField);
		textField.setColumns(10);
		
		textField1 = new JTextField();
		textField1.setHorizontalAlignment(SwingConstants.RIGHT);
		textField1.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField1.setVisible(false);
		textField1.setBounds(121, 261, 324, 49);
		panel.add(textField1);
		textField1.setColumns(10);
		
		returnButton = new JButton("Return");
		returnButton.setVisible(false);
		returnButton.setFont(new Font("Tahoma", Font.BOLD, 20));
		returnButton.setForeground(Color.RED);
		returnButton.setBackground(Color.WHITE);
		returnButton.setBounds(225, 363, 126, 43);
		panel.add(returnButton);
		
		
		returnButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel.setVisible(true);
				rdbtnEasy.setVisible(true);
				rdbtnAverage.setVisible(true);
				rdbtnDifficult.setVisible(true);
				lblNewLabel_1_2_3.setVisible(true);
				lblNewLabel_1_2_1.setVisible(true);
				lblNewLabel_1_2_2.setVisible(true);
				lblNewLabel_1_1.setVisible(true);
				lblNewLabel_1.setVisible(true);
				lblNewLabel_1_2.setVisible(true);
				lblNewLabel_1_2_4.setVisible(true);
				btnStart.setVisible(true);
				returnButton.setVisible(false);
				lblNewLabel_3.setVisible(false);
				lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
			}

		
			
			
		});
		
		btnNewButton_1 = new JButton("SUBMIT");
		btnNewButton_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				
				
				double result = getResult(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
				
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
				
			}
		});
		btnNewButton_1.setVisible(false);
		btnNewButton_1.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_1.setForeground(Color.RED);
		btnNewButton_1.setBackground(Color.WHITE);
		btnNewButton_1.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_1);
		
		//Button 2
		btnNewButton_2 = new JButton("SUBMIT");
		btnNewButton_2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				double result = getResultAverage(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
			
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
			}
		});
		btnNewButton_2.setVisible(false);
		btnNewButton_2.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_2.setForeground(Color.RED);
		btnNewButton_2.setBackground(Color.WHITE);
		btnNewButton_2.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_2);
		
		
		textField2 = new JTextField();
		textField2.setHorizontalAlignment(SwingConstants.RIGHT);
		textField2.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField2.setVisible(false);
		textField2.setBounds(121, 261, 324, 49);
		panel.add(textField2);
		textField2.setColumns(10);
		
		btnNewButton_3 = new JButton("SUBMIT");
		btnNewButton_3.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel_2.setVisible(false);
				
				textField.setVisible(false);
				textField1.setVisible(false);
				btnNewButton_1.setVisible(false);
				btnNewButton_2.setVisible(false);
				
				textField2.setVisible(false);
				btnNewButton_3.setVisible(false);
				
				
				
			}
		});
		btnNewButton_3.setVisible(false);
		btnNewButton_3.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_3.setForeground(Color.RED);
		btnNewButton_3.setBackground(Color.WHITE);
		btnNewButton_3.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_3);
		
		
	}
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-04-30 17:34:01.990
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-04-30 17:34:01.990
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-30 17:34:02.003
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import java.awt.Color;
import java.awt.Toolkit;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

import java.awt.Font;
import javax.swing.JRadioButton;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Arrays;
import java.util.Random;


public class Main extends JFrame {

	private JPanel contentPane;
	private JLabel lblNewLabel_1_2;
	private JLabel lblNewLabel_1;
	private JLabel lblNewLabel_1_1; 
	private JLabel lblNewLabel_1_2_1;
	private JLabel lblNewLabel_1_2_2;
	private JLabel lblNewLabel_1_2_3;
	private JLabel lblNewLabel_1_2_4;
	private JRadioButton rdbtnEasy;
	private JRadioButton rdbtnAverage;
	private JRadioButton rdbtnDifficult;
	private JButton btnStart; 
	private JLabel lblNewLabel;
	private JLabel lblNewLabel_2;
	private JLabel lblNewLabel_3;
	private JLabel lblNewLabel_4;
	private JTextField textField;
	private JButton btnNewButton_1;
	private JTextField textField1;
	private JButton btnNewButton_2;
	private JButton returnButton;

	private JTextField textField2;
	private JButton btnNewButton_3;
	int currentQuestionNumber = 1;
	int playerScore = 0;
	Random random = new Random();
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Main frame = new Main();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
	
	
	
	

	/**
	 * Create the frame.
	 */
	
	
	public int findIndex(char operand) {
		char[] operandOrder = {'-', '+', '/', '*'};
		int index = 0;
		
		for(int i = 0; i < operandOrder.length; i++) {
			if(operand == operandOrder[i]) index = i;
		}
		return index;
	}
	
	public double getResult(String question) {
		char[] questionData = question.toCharArray(); 
		
		char operand = questionData[1];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double result = 0;
		
		if(operand == '+') result = firstNumber + secondNumber;
		if(operand == '-') result = firstNumber - secondNumber;
		if(operand == '*') result = firstNumber * secondNumber;
		if(operand == '/') result = firstNumber / secondNumber;
		double roundedResult = Math.round(result);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	public double getResultAverage(String question) {
		char[] questionData = question.toCharArray(); 
		
		char firstOperand = questionData[1];
		char secondOperand = questionData[3];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double thirdNumber = Double.parseDouble(String.valueOf(questionData[4]));
		double result = 0;
		
		
		char[] operandOrder = {'-', '+', '/', '*'};
		int indexFirst = findIndex(firstOperand);
		int indexSecond = findIndex(secondOperand);
		double totalResult = 0;
		double initialResult = 0;
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+') initialResult = secondNumber + thirdNumber;
			if(secondOperand == '-') initialResult = secondNumber - thirdNumber;
			if(secondOperand == '*') initialResult = secondNumber * thirdNumber;
			if(secondOperand == '/') initialResult = secondNumber / thirdNumber;
			
			
		}
		else if (indexSecond < indexFirst) {
			if(firstOperand == '+') initialResult = firstNumber + secondNumber;
			if(firstOperand == '-') initialResult = firstNumber - secondNumber;
			if(firstOperand == '*') initialResult = firstNumber * secondNumber;
			if(firstOperand == '/') initialResult = firstNumber / secondNumber;
		}
		else {
			if(firstOperand == '+') totalResult = firstNumber + secondNumber + thirdNumber;
			if(firstOperand == '-') totalResult = firstNumber - secondNumber - thirdNumber;
			if(firstOperand == '*') totalResult = firstNumber * secondNumber * thirdNumber;
			if(firstOperand == '/') totalResult = firstNumber / secondNumber / thirdNumber;
		}
		
		
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+')  totalResult = firstNumber + thirdNumber;
			if(secondOperand == '-')  totalResult = firstNumber - thirdNumber;
			if(secondOperand == '*')  totalResult = firstNumber * thirdNumber;
			if(secondOperand == '/')  totalResult = firstNumber / thirdNumber;
			
			
		}
		
		else (indexSecond < indexFirst) {
			if(firstOperand == '+')  totalResult = initialResult + thirdNumber;
			if(firstOperand == '-')  totalResult = initialResult - thirdNumber;
			if(firstOperand == '*')  totalResult = initialResult * thirdNumber;
			if(firstOperand == '/')  totalResult = initialResult / thirdNumber;
		}
		
		
		
		
		
		double roundedResult = Math.round(totalResult);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	
	public String generateQuestion() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond];
		
		return question;
	}
	
	public String generateQuestionAverage() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexThird = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		int randomIndexOperand2 = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond] + operands[randomIndexOperand2] + numbers[randomIndexThird];
		System.out.println(question);
		return question;
	}
	
	
	public Main() {
		setIconImage(Toolkit.getDefaultToolkit().getImage("C:\\Users\\user\\Downloads\\quiz.png"));
		setTitle("QUIZ GAME");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(400, 100, 600, 600);
		contentPane = new JPanel();
		contentPane.setBackground(Color.WHITE);
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));

		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JPanel panel = new JPanel();
		panel.setBackground(Color.RED);
		panel.setBounds(10, 0, 564, 550);
		contentPane.add(panel);
		panel.setLayout(null);
		
		lblNewLabel_1_2_4 = new JLabel("quiz");
		lblNewLabel_1_2_4.setForeground(Color.WHITE);
		lblNewLabel_1_2_4.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_4.setBounds(140, 130, 561, 120);
		panel.add(lblNewLabel_1_2_4);
		
		lblNewLabel_1_2 = new JLabel("MATH");
		lblNewLabel_1_2.setForeground(Color.WHITE);
		lblNewLabel_1_2.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_2.setBounds(70, 50, 561, 120);
		panel.add(lblNewLabel_1_2);
		
		lblNewLabel_1 = new JLabel("MATH");
		lblNewLabel_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1.setForeground(Color.DARK_GRAY);
		lblNewLabel_1.setBounds(78, 50, 777, 120);
		panel.add(lblNewLabel_1);
		
		lblNewLabel_1_1 = new JLabel("MATH");
		lblNewLabel_1_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_1.setBounds(89, 50, 612, 120);
		panel.add(lblNewLabel_1_1);
		
		lblNewLabel_1_2_2 = new JLabel("quiz");
		lblNewLabel_1_2_2.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_2.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_2.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_2);
		
		lblNewLabel_1_2_1 = new JLabel("quiz");
		lblNewLabel_1_2_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_2_1.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_1.setBounds(159, 130, 561, 120);
		panel.add(lblNewLabel_1_2_1);
		
		lblNewLabel_1_2_3 = new JLabel("quiz");
		lblNewLabel_1_2_3.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_3.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_3.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_3);
		
		lblNewLabel = new JLabel("");
		lblNewLabel.setFont(new Font("Dialog", Font.BOLD, 9));
		lblNewLabel.setBounds(225, 428, 161, 14);
		panel.add(lblNewLabel);
		
		rdbtnEasy = new JRadioButton("EASY");
		rdbtnEasy.setForeground(Color.WHITE);
		rdbtnEasy.setBackground(Color.RED);
		rdbtnEasy.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnEasy.setBounds(215, 232, 269, 78);
		panel.add(rdbtnEasy);
		
		rdbtnAverage = new JRadioButton("AVERAGE");
		rdbtnAverage.setForeground(Color.WHITE);
		rdbtnAverage.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnAverage.setBackground(Color.RED);
		rdbtnAverage.setBounds(188, 290, 269, 73);
		panel.add(rdbtnAverage);
		
		rdbtnDifficult = new JRadioButton("DIFFICULT");
		rdbtnDifficult.setForeground(Color.WHITE);
		rdbtnDifficult.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnDifficult.setBackground(Color.RED);
		rdbtnDifficult.setBounds(176, 342, 269, 68);
		panel.add(rdbtnDifficult);
		
		ButtonGroup difficulty = new ButtonGroup();
		difficulty.add(rdbtnEasy);
		difficulty.add(rdbtnAverage);
		difficulty.add(rdbtnDifficult);
		
		btnStart = new JButton("START");
		
		
	
		
		btnStart.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
			if(rdbtnEasy.isSelected()){
				///////////
				
 				lblNewLabel_3.setText(generateQuestion());
 				
 				
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_1.setVisible(true);
				
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnAverage.isSelected()){
				
				lblNewLabel_3.setText(generateQuestionAverage());
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_2.setVisible(true);
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnDifficult.isSelected()){
				
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			}
		});
		btnStart.setBackground(Color.WHITE);
		btnStart.setForeground(Color.RED);
		btnStart.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnStart.setBounds(212, 453, 125, 43);
		panel.add(btnStart);
		
		lblNewLabel_2 = new JLabel("");
		lblNewLabel_2.setVisible(false);
		lblNewLabel_2.setForeground(Color.WHITE);
		lblNewLabel_2.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_2.setBounds(317, 90, 125, 129);
		panel.add(lblNewLabel_2);
		
		lblNewLabel_3 = new JLabel("");
		lblNewLabel_3.setVisible(false);
		lblNewLabel_3.setForeground(Color.WHITE);
		lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_3.setBounds(215, 90, 300, 200);
		panel.add(lblNewLabel_3);
		
		lblNewLabel_4 = new JLabel("");
		lblNewLabel_4.addMouseListener(new MouseAdapter() {
			public void mouseReleased(MouseEvent e) {
				
			}
		});
		lblNewLabel_4.setVisible(false);
		lblNewLabel_4.setForeground(Color.WHITE);
		lblNewLabel_4.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_4.setBounds(121, 90, 103, 129);
		panel.add(lblNewLabel_4);
				
		textField = new JTextField();
		textField.setHorizontalAlignment(SwingConstants.RIGHT);
		textField.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField.setVisible(false);
		textField.setBounds(121, 261, 324, 49);
		panel.add(textField);
		textField.setColumns(10);
		
		textField1 = new JTextField();
		textField1.setHorizontalAlignment(SwingConstants.RIGHT);
		textField1.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField1.setVisible(false);
		textField1.setBounds(121, 261, 324, 49);
		panel.add(textField1);
		textField1.setColumns(10);
		
		returnButton = new JButton("Return");
		returnButton.setVisible(false);
		returnButton.setFont(new Font("Tahoma", Font.BOLD, 20));
		returnButton.setForeground(Color.RED);
		returnButton.setBackground(Color.WHITE);
		returnButton.setBounds(225, 363, 126, 43);
		panel.add(returnButton);
		
		
		returnButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel.setVisible(true);
				rdbtnEasy.setVisible(true);
				rdbtnAverage.setVisible(true);
				rdbtnDifficult.setVisible(true);
				lblNewLabel_1_2_3.setVisible(true);
				lblNewLabel_1_2_1.setVisible(true);
				lblNewLabel_1_2_2.setVisible(true);
				lblNewLabel_1_1.setVisible(true);
				lblNewLabel_1.setVisible(true);
				lblNewLabel_1_2.setVisible(true);
				lblNewLabel_1_2_4.setVisible(true);
				btnStart.setVisible(true);
				returnButton.setVisible(false);
				lblNewLabel_3.setVisible(false);
				lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
			}

		
			
			
		});
		
		btnNewButton_1 = new JButton("SUBMIT");
		btnNewButton_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				
				
				double result = getResult(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
				
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
				
			}
		});
		btnNewButton_1.setVisible(false);
		btnNewButton_1.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_1.setForeground(Color.RED);
		btnNewButton_1.setBackground(Color.WHITE);
		btnNewButton_1.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_1);
		
		//Button 2
		btnNewButton_2 = new JButton("SUBMIT");
		btnNewButton_2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				double result = getResultAverage(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
			
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
			}
		});
		btnNewButton_2.setVisible(false);
		btnNewButton_2.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_2.setForeground(Color.RED);
		btnNewButton_2.setBackground(Color.WHITE);
		btnNewButton_2.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_2);
		
		
		textField2 = new JTextField();
		textField2.setHorizontalAlignment(SwingConstants.RIGHT);
		textField2.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField2.setVisible(false);
		textField2.setBounds(121, 261, 324, 49);
		panel.add(textField2);
		textField2.setColumns(10);
		
		btnNewButton_3 = new JButton("SUBMIT");
		btnNewButton_3.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel_2.setVisible(false);
				
				textField.setVisible(false);
				textField1.setVisible(false);
				btnNewButton_1.setVisible(false);
				btnNewButton_2.setVisible(false);
				
				textField2.setVisible(false);
				btnNewButton_3.setVisible(false);
				
				
				
			}
		});
		btnNewButton_3.setVisible(false);
		btnNewButton_3.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_3.setForeground(Color.RED);
		btnNewButton_3.setBackground(Color.WHITE);
		btnNewButton_3.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_3);
		
		
	}
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-04-30 17:34:02.004
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-04-30 17:34:02.004
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-30 17:34:05.498
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import java.awt.Color;
import java.awt.Toolkit;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

import java.awt.Font;
import javax.swing.JRadioButton;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Arrays;
import java.util.Random;


public class Main extends JFrame {

	private JPanel contentPane;
	private JLabel lblNewLabel_1_2;
	private JLabel lblNewLabel_1;
	private JLabel lblNewLabel_1_1; 
	private JLabel lblNewLabel_1_2_1;
	private JLabel lblNewLabel_1_2_2;
	private JLabel lblNewLabel_1_2_3;
	private JLabel lblNewLabel_1_2_4;
	private JRadioButton rdbtnEasy;
	private JRadioButton rdbtnAverage;
	private JRadioButton rdbtnDifficult;
	private JButton btnStart; 
	private JLabel lblNewLabel;
	private JLabel lblNewLabel_2;
	private JLabel lblNewLabel_3;
	private JLabel lblNewLabel_4;
	private JTextField textField;
	private JButton btnNewButton_1;
	private JTextField textField1;
	private JButton btnNewButton_2;
	private JButton returnButton;

	private JTextField textField2;
	private JButton btnNewButton_3;
	int currentQuestionNumber = 1;
	int playerScore = 0;
	Random random = new Random();
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Main frame = new Main();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
	
	
	
	

	/**
	 * Create the frame.
	 */
	
	
	public int findIndex(char operand) {
		char[] operandOrder = {'-', '+', '/', '*'};
		int index = 0;
		
		for(int i = 0; i < operandOrder.length; i++) {
			if(operand == operandOrder[i]) index = i;
		}
		return index;
	}
	
	public double getResult(String question) {
		char[] questionData = question.toCharArray(); 
		
		char operand = questionData[1];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double result = 0;
		
		if(operand == '+') result = firstNumber + secondNumber;
		if(operand == '-') result = firstNumber - secondNumber;
		if(operand == '*') result = firstNumber * secondNumber;
		if(operand == '/') result = firstNumber / secondNumber;
		double roundedResult = Math.round(result);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	public double getResultAverage(String question) {
		char[] questionData = question.toCharArray(); 
		
		char firstOperand = questionData[1];
		char secondOperand = questionData[3];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double thirdNumber = Double.parseDouble(String.valueOf(questionData[4]));
		double result = 0;
		
		
		char[] operandOrder = {'-', '+', '/', '*'};
		int indexFirst = findIndex(firstOperand);
		int indexSecond = findIndex(secondOperand);
		double totalResult = 0;
		double initialResult = 0;
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+') initialResult = secondNumber + thirdNumber;
			if(secondOperand == '-') initialResult = secondNumber - thirdNumber;
			if(secondOperand == '*') initialResult = secondNumber * thirdNumber;
			if(secondOperand == '/') initialResult = secondNumber / thirdNumber;
			
			
		}
		else if (indexSecond < indexFirst) {
			if(firstOperand == '+') initialResult = firstNumber + secondNumber;
			if(firstOperand == '-') initialResult = firstNumber - secondNumber;
			if(firstOperand == '*') initialResult = firstNumber * secondNumber;
			if(firstOperand == '/') initialResult = firstNumber / secondNumber;
		}
		else {
			if(firstOperand == '+') totalResult = firstNumber + secondNumber + thirdNumber;
			if(firstOperand == '-') totalResult = firstNumber - secondNumber - thirdNumber;
			if(firstOperand == '*') totalResult = firstNumber * secondNumber * thirdNumber;
			if(firstOperand == '/') totalResult = firstNumber / secondNumber / thirdNumber;
		}
		
		
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+')  totalResult = firstNumber + thirdNumber;
			if(secondOperand == '-')  totalResult = firstNumber - thirdNumber;
			if(secondOperand == '*')  totalResult = firstNumber * thirdNumber;
			if(secondOperand == '/')  totalResult = firstNumber / thirdNumber;
			
			
		}
		
		else (indexSecond < indexFirst) {
			if(firstOperand == '+')  totalResult = initialResult + thirdNumber;
			if(firstOperand == '-')  totalResult = initialResult - thirdNumber;
			if(firstOperand == '*')  totalResult = initialResult * thirdNumber;
			if(firstOperand == '/')  totalResult = initialResult / thirdNumber;
		}
		
		
		
		
		
		double roundedResult = Math.round(totalResult);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	
	public String generateQuestion() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond];
		
		return question;
	}
	
	public String generateQuestionAverage() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexThird = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		int randomIndexOperand2 = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond] + operands[randomIndexOperand2] + numbers[randomIndexThird];
		System.out.println(question);
		return question;
	}
	
	
	public Main() {
		setIconImage(Toolkit.getDefaultToolkit().getImage("C:\\Users\\user\\Downloads\\quiz.png"));
		setTitle("QUIZ GAME");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(400, 100, 600, 600);
		contentPane = new JPanel();
		contentPane.setBackground(Color.WHITE);
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));

		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JPanel panel = new JPanel();
		panel.setBackground(Color.RED);
		panel.setBounds(10, 0, 564, 550);
		contentPane.add(panel);
		panel.setLayout(null);
		
		lblNewLabel_1_2_4 = new JLabel("quiz");
		lblNewLabel_1_2_4.setForeground(Color.WHITE);
		lblNewLabel_1_2_4.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_4.setBounds(140, 130, 561, 120);
		panel.add(lblNewLabel_1_2_4);
		
		lblNewLabel_1_2 = new JLabel("MATH");
		lblNewLabel_1_2.setForeground(Color.WHITE);
		lblNewLabel_1_2.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_2.setBounds(70, 50, 561, 120);
		panel.add(lblNewLabel_1_2);
		
		lblNewLabel_1 = new JLabel("MATH");
		lblNewLabel_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1.setForeground(Color.DARK_GRAY);
		lblNewLabel_1.setBounds(78, 50, 777, 120);
		panel.add(lblNewLabel_1);
		
		lblNewLabel_1_1 = new JLabel("MATH");
		lblNewLabel_1_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_1.setBounds(89, 50, 612, 120);
		panel.add(lblNewLabel_1_1);
		
		lblNewLabel_1_2_2 = new JLabel("quiz");
		lblNewLabel_1_2_2.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_2.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_2.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_2);
		
		lblNewLabel_1_2_1 = new JLabel("quiz");
		lblNewLabel_1_2_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_2_1.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_1.setBounds(159, 130, 561, 120);
		panel.add(lblNewLabel_1_2_1);
		
		lblNewLabel_1_2_3 = new JLabel("quiz");
		lblNewLabel_1_2_3.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_3.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_3.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_3);
		
		lblNewLabel = new JLabel("");
		lblNewLabel.setFont(new Font("Dialog", Font.BOLD, 9));
		lblNewLabel.setBounds(225, 428, 161, 14);
		panel.add(lblNewLabel);
		
		rdbtnEasy = new JRadioButton("EASY");
		rdbtnEasy.setForeground(Color.WHITE);
		rdbtnEasy.setBackground(Color.RED);
		rdbtnEasy.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnEasy.setBounds(215, 232, 269, 78);
		panel.add(rdbtnEasy);
		
		rdbtnAverage = new JRadioButton("AVERAGE");
		rdbtnAverage.setForeground(Color.WHITE);
		rdbtnAverage.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnAverage.setBackground(Color.RED);
		rdbtnAverage.setBounds(188, 290, 269, 73);
		panel.add(rdbtnAverage);
		
		rdbtnDifficult = new JRadioButton("DIFFICULT");
		rdbtnDifficult.setForeground(Color.WHITE);
		rdbtnDifficult.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnDifficult.setBackground(Color.RED);
		rdbtnDifficult.setBounds(176, 342, 269, 68);
		panel.add(rdbtnDifficult);
		
		ButtonGroup difficulty = new ButtonGroup();
		difficulty.add(rdbtnEasy);
		difficulty.add(rdbtnAverage);
		difficulty.add(rdbtnDifficult);
		
		btnStart = new JButton("START");
		
		
	
		
		btnStart.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
			if(rdbtnEasy.isSelected()){
				///////////
				
 				lblNewLabel_3.setText(generateQuestion());
 				
 				
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_1.setVisible(true);
				
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnAverage.isSelected()){
				
				lblNewLabel_3.setText(generateQuestionAverage());
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_2.setVisible(true);
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnDifficult.isSelected()){
				
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			}
		});
		btnStart.setBackground(Color.WHITE);
		btnStart.setForeground(Color.RED);
		btnStart.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnStart.setBounds(212, 453, 125, 43);
		panel.add(btnStart);
		
		lblNewLabel_2 = new JLabel("");
		lblNewLabel_2.setVisible(false);
		lblNewLabel_2.setForeground(Color.WHITE);
		lblNewLabel_2.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_2.setBounds(317, 90, 125, 129);
		panel.add(lblNewLabel_2);
		
		lblNewLabel_3 = new JLabel("");
		lblNewLabel_3.setVisible(false);
		lblNewLabel_3.setForeground(Color.WHITE);
		lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_3.setBounds(215, 90, 300, 200);
		panel.add(lblNewLabel_3);
		
		lblNewLabel_4 = new JLabel("");
		lblNewLabel_4.addMouseListener(new MouseAdapter() {
			public void mouseReleased(MouseEvent e) {
				
			}
		});
		lblNewLabel_4.setVisible(false);
		lblNewLabel_4.setForeground(Color.WHITE);
		lblNewLabel_4.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_4.setBounds(121, 90, 103, 129);
		panel.add(lblNewLabel_4);
				
		textField = new JTextField();
		textField.setHorizontalAlignment(SwingConstants.RIGHT);
		textField.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField.setVisible(false);
		textField.setBounds(121, 261, 324, 49);
		panel.add(textField);
		textField.setColumns(10);
		
		textField1 = new JTextField();
		textField1.setHorizontalAlignment(SwingConstants.RIGHT);
		textField1.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField1.setVisible(false);
		textField1.setBounds(121, 261, 324, 49);
		panel.add(textField1);
		textField1.setColumns(10);
		
		returnButton = new JButton("Return");
		returnButton.setVisible(false);
		returnButton.setFont(new Font("Tahoma", Font.BOLD, 20));
		returnButton.setForeground(Color.RED);
		returnButton.setBackground(Color.WHITE);
		returnButton.setBounds(225, 363, 126, 43);
		panel.add(returnButton);
		
		
		returnButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel.setVisible(true);
				rdbtnEasy.setVisible(true);
				rdbtnAverage.setVisible(true);
				rdbtnDifficult.setVisible(true);
				lblNewLabel_1_2_3.setVisible(true);
				lblNewLabel_1_2_1.setVisible(true);
				lblNewLabel_1_2_2.setVisible(true);
				lblNewLabel_1_1.setVisible(true);
				lblNewLabel_1.setVisible(true);
				lblNewLabel_1_2.setVisible(true);
				lblNewLabel_1_2_4.setVisible(true);
				btnStart.setVisible(true);
				returnButton.setVisible(false);
				lblNewLabel_3.setVisible(false);
				lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
			}

		
			
			
		});
		
		btnNewButton_1 = new JButton("SUBMIT");
		btnNewButton_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				
				
				double result = getResult(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
				
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
				
			}
		});
		btnNewButton_1.setVisible(false);
		btnNewButton_1.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_1.setForeground(Color.RED);
		btnNewButton_1.setBackground(Color.WHITE);
		btnNewButton_1.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_1);
		
		//Button 2
		btnNewButton_2 = new JButton("SUBMIT");
		btnNewButton_2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				double result = getResultAverage(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
			
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
			}
		});
		btnNewButton_2.setVisible(false);
		btnNewButton_2.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_2.setForeground(Color.RED);
		btnNewButton_2.setBackground(Color.WHITE);
		btnNewButton_2.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_2);
		
		
		textField2 = new JTextField();
		textField2.setHorizontalAlignment(SwingConstants.RIGHT);
		textField2.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField2.setVisible(false);
		textField2.setBounds(121, 261, 324, 49);
		panel.add(textField2);
		textField2.setColumns(10);
		
		btnNewButton_3 = new JButton("SUBMIT");
		btnNewButton_3.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel_2.setVisible(false);
				
				textField.setVisible(false);
				textField1.setVisible(false);
				btnNewButton_1.setVisible(false);
				btnNewButton_2.setVisible(false);
				
				textField2.setVisible(false);
				btnNewButton_3.setVisible(false);
				
				
				
			}
		});
		btnNewButton_3.setVisible(false);
		btnNewButton_3.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_3.setForeground(Color.RED);
		btnNewButton_3.setBackground(Color.WHITE);
		btnNewButton_3.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_3);
		
		
	}
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-04-30 17:34:05.499
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-04-30 17:34:05.499
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-30 17:34:05.512
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import java.awt.Color;
import java.awt.Toolkit;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

import java.awt.Font;
import javax.swing.JRadioButton;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Arrays;
import java.util.Random;


public class Main extends JFrame {

	private JPanel contentPane;
	private JLabel lblNewLabel_1_2;
	private JLabel lblNewLabel_1;
	private JLabel lblNewLabel_1_1; 
	private JLabel lblNewLabel_1_2_1;
	private JLabel lblNewLabel_1_2_2;
	private JLabel lblNewLabel_1_2_3;
	private JLabel lblNewLabel_1_2_4;
	private JRadioButton rdbtnEasy;
	private JRadioButton rdbtnAverage;
	private JRadioButton rdbtnDifficult;
	private JButton btnStart; 
	private JLabel lblNewLabel;
	private JLabel lblNewLabel_2;
	private JLabel lblNewLabel_3;
	private JLabel lblNewLabel_4;
	private JTextField textField;
	private JButton btnNewButton_1;
	private JTextField textField1;
	private JButton btnNewButton_2;
	private JButton returnButton;

	private JTextField textField2;
	private JButton btnNewButton_3;
	int currentQuestionNumber = 1;
	int playerScore = 0;
	Random random = new Random();
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Main frame = new Main();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
	
	
	
	

	/**
	 * Create the frame.
	 */
	
	
	public int findIndex(char operand) {
		char[] operandOrder = {'-', '+', '/', '*'};
		int index = 0;
		
		for(int i = 0; i < operandOrder.length; i++) {
			if(operand == operandOrder[i]) index = i;
		}
		return index;
	}
	
	public double getResult(String question) {
		char[] questionData = question.toCharArray(); 
		
		char operand = questionData[1];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double result = 0;
		
		if(operand == '+') result = firstNumber + secondNumber;
		if(operand == '-') result = firstNumber - secondNumber;
		if(operand == '*') result = firstNumber * secondNumber;
		if(operand == '/') result = firstNumber / secondNumber;
		double roundedResult = Math.round(result);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	public double getResultAverage(String question) {
		char[] questionData = question.toCharArray(); 
		
		char firstOperand = questionData[1];
		char secondOperand = questionData[3];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double thirdNumber = Double.parseDouble(String.valueOf(questionData[4]));
		double result = 0;
		
		
		char[] operandOrder = {'-', '+', '/', '*'};
		int indexFirst = findIndex(firstOperand);
		int indexSecond = findIndex(secondOperand);
		double totalResult = 0;
		double initialResult = 0;
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+') initialResult = secondNumber + thirdNumber;
			if(secondOperand == '-') initialResult = secondNumber - thirdNumber;
			if(secondOperand == '*') initialResult = secondNumber * thirdNumber;
			if(secondOperand == '/') initialResult = secondNumber / thirdNumber;
			
			
		}
		else if (indexSecond < indexFirst) {
			if(firstOperand == '+') initialResult = firstNumber + secondNumber;
			if(firstOperand == '-') initialResult = firstNumber - secondNumber;
			if(firstOperand == '*') initialResult = firstNumber * secondNumber;
			if(firstOperand == '/') initialResult = firstNumber / secondNumber;
		}
		else {
			if(firstOperand == '+') totalResult = firstNumber + secondNumber + thirdNumber;
			if(firstOperand == '-') totalResult = firstNumber - secondNumber - thirdNumber;
			if(firstOperand == '*') totalResult = firstNumber * secondNumber * thirdNumber;
			if(firstOperand == '/') totalResult = firstNumber / secondNumber / thirdNumber;
		}
		
		
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+')  totalResult = firstNumber + thirdNumber;
			if(secondOperand == '-')  totalResult = firstNumber - thirdNumber;
			if(secondOperand == '*')  totalResult = firstNumber * thirdNumber;
			if(secondOperand == '/')  totalResult = firstNumber / thirdNumber;
			
			
		}
		
		else (indexSecond < indexFirst) {
			if(firstOperand == '+')  totalResult = initialResult + thirdNumber;
			if(firstOperand == '-')  totalResult = initialResult - thirdNumber;
			if(firstOperand == '*')  totalResult = initialResult * thirdNumber;
			if(firstOperand == '/')  totalResult = initialResult / thirdNumber;
		}
		
		
		
		
		
		double roundedResult = Math.round(totalResult);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	
	public String generateQuestion() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond];
		
		return question;
	}
	
	public String generateQuestionAverage() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexThird = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		int randomIndexOperand2 = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond] + operands[randomIndexOperand2] + numbers[randomIndexThird];
		System.out.println(question);
		return question;
	}
	
	
	public Main() {
		setIconImage(Toolkit.getDefaultToolkit().getImage("C:\\Users\\user\\Downloads\\quiz.png"));
		setTitle("QUIZ GAME");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(400, 100, 600, 600);
		contentPane = new JPanel();
		contentPane.setBackground(Color.WHITE);
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));

		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JPanel panel = new JPanel();
		panel.setBackground(Color.RED);
		panel.setBounds(10, 0, 564, 550);
		contentPane.add(panel);
		panel.setLayout(null);
		
		lblNewLabel_1_2_4 = new JLabel("quiz");
		lblNewLabel_1_2_4.setForeground(Color.WHITE);
		lblNewLabel_1_2_4.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_4.setBounds(140, 130, 561, 120);
		panel.add(lblNewLabel_1_2_4);
		
		lblNewLabel_1_2 = new JLabel("MATH");
		lblNewLabel_1_2.setForeground(Color.WHITE);
		lblNewLabel_1_2.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_2.setBounds(70, 50, 561, 120);
		panel.add(lblNewLabel_1_2);
		
		lblNewLabel_1 = new JLabel("MATH");
		lblNewLabel_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1.setForeground(Color.DARK_GRAY);
		lblNewLabel_1.setBounds(78, 50, 777, 120);
		panel.add(lblNewLabel_1);
		
		lblNewLabel_1_1 = new JLabel("MATH");
		lblNewLabel_1_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_1.setBounds(89, 50, 612, 120);
		panel.add(lblNewLabel_1_1);
		
		lblNewLabel_1_2_2 = new JLabel("quiz");
		lblNewLabel_1_2_2.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_2.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_2.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_2);
		
		lblNewLabel_1_2_1 = new JLabel("quiz");
		lblNewLabel_1_2_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_2_1.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_1.setBounds(159, 130, 561, 120);
		panel.add(lblNewLabel_1_2_1);
		
		lblNewLabel_1_2_3 = new JLabel("quiz");
		lblNewLabel_1_2_3.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_3.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_3.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_3);
		
		lblNewLabel = new JLabel("");
		lblNewLabel.setFont(new Font("Dialog", Font.BOLD, 9));
		lblNewLabel.setBounds(225, 428, 161, 14);
		panel.add(lblNewLabel);
		
		rdbtnEasy = new JRadioButton("EASY");
		rdbtnEasy.setForeground(Color.WHITE);
		rdbtnEasy.setBackground(Color.RED);
		rdbtnEasy.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnEasy.setBounds(215, 232, 269, 78);
		panel.add(rdbtnEasy);
		
		rdbtnAverage = new JRadioButton("AVERAGE");
		rdbtnAverage.setForeground(Color.WHITE);
		rdbtnAverage.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnAverage.setBackground(Color.RED);
		rdbtnAverage.setBounds(188, 290, 269, 73);
		panel.add(rdbtnAverage);
		
		rdbtnDifficult = new JRadioButton("DIFFICULT");
		rdbtnDifficult.setForeground(Color.WHITE);
		rdbtnDifficult.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnDifficult.setBackground(Color.RED);
		rdbtnDifficult.setBounds(176, 342, 269, 68);
		panel.add(rdbtnDifficult);
		
		ButtonGroup difficulty = new ButtonGroup();
		difficulty.add(rdbtnEasy);
		difficulty.add(rdbtnAverage);
		difficulty.add(rdbtnDifficult);
		
		btnStart = new JButton("START");
		
		
	
		
		btnStart.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
			if(rdbtnEasy.isSelected()){
				///////////
				
 				lblNewLabel_3.setText(generateQuestion());
 				
 				
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_1.setVisible(true);
				
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnAverage.isSelected()){
				
				lblNewLabel_3.setText(generateQuestionAverage());
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_2.setVisible(true);
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnDifficult.isSelected()){
				
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			}
		});
		btnStart.setBackground(Color.WHITE);
		btnStart.setForeground(Color.RED);
		btnStart.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnStart.setBounds(212, 453, 125, 43);
		panel.add(btnStart);
		
		lblNewLabel_2 = new JLabel("");
		lblNewLabel_2.setVisible(false);
		lblNewLabel_2.setForeground(Color.WHITE);
		lblNewLabel_2.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_2.setBounds(317, 90, 125, 129);
		panel.add(lblNewLabel_2);
		
		lblNewLabel_3 = new JLabel("");
		lblNewLabel_3.setVisible(false);
		lblNewLabel_3.setForeground(Color.WHITE);
		lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_3.setBounds(215, 90, 300, 200);
		panel.add(lblNewLabel_3);
		
		lblNewLabel_4 = new JLabel("");
		lblNewLabel_4.addMouseListener(new MouseAdapter() {
			public void mouseReleased(MouseEvent e) {
				
			}
		});
		lblNewLabel_4.setVisible(false);
		lblNewLabel_4.setForeground(Color.WHITE);
		lblNewLabel_4.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_4.setBounds(121, 90, 103, 129);
		panel.add(lblNewLabel_4);
				
		textField = new JTextField();
		textField.setHorizontalAlignment(SwingConstants.RIGHT);
		textField.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField.setVisible(false);
		textField.setBounds(121, 261, 324, 49);
		panel.add(textField);
		textField.setColumns(10);
		
		textField1 = new JTextField();
		textField1.setHorizontalAlignment(SwingConstants.RIGHT);
		textField1.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField1.setVisible(false);
		textField1.setBounds(121, 261, 324, 49);
		panel.add(textField1);
		textField1.setColumns(10);
		
		returnButton = new JButton("Return");
		returnButton.setVisible(false);
		returnButton.setFont(new Font("Tahoma", Font.BOLD, 20));
		returnButton.setForeground(Color.RED);
		returnButton.setBackground(Color.WHITE);
		returnButton.setBounds(225, 363, 126, 43);
		panel.add(returnButton);
		
		
		returnButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel.setVisible(true);
				rdbtnEasy.setVisible(true);
				rdbtnAverage.setVisible(true);
				rdbtnDifficult.setVisible(true);
				lblNewLabel_1_2_3.setVisible(true);
				lblNewLabel_1_2_1.setVisible(true);
				lblNewLabel_1_2_2.setVisible(true);
				lblNewLabel_1_1.setVisible(true);
				lblNewLabel_1.setVisible(true);
				lblNewLabel_1_2.setVisible(true);
				lblNewLabel_1_2_4.setVisible(true);
				btnStart.setVisible(true);
				returnButton.setVisible(false);
				lblNewLabel_3.setVisible(false);
				lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
			}

		
			
			
		});
		
		btnNewButton_1 = new JButton("SUBMIT");
		btnNewButton_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				
				
				double result = getResult(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
				
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
				
			}
		});
		btnNewButton_1.setVisible(false);
		btnNewButton_1.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_1.setForeground(Color.RED);
		btnNewButton_1.setBackground(Color.WHITE);
		btnNewButton_1.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_1);
		
		//Button 2
		btnNewButton_2 = new JButton("SUBMIT");
		btnNewButton_2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				double result = getResultAverage(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
			
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
			}
		});
		btnNewButton_2.setVisible(false);
		btnNewButton_2.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_2.setForeground(Color.RED);
		btnNewButton_2.setBackground(Color.WHITE);
		btnNewButton_2.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_2);
		
		
		textField2 = new JTextField();
		textField2.setHorizontalAlignment(SwingConstants.RIGHT);
		textField2.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField2.setVisible(false);
		textField2.setBounds(121, 261, 324, 49);
		panel.add(textField2);
		textField2.setColumns(10);
		
		btnNewButton_3 = new JButton("SUBMIT");
		btnNewButton_3.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel_2.setVisible(false);
				
				textField.setVisible(false);
				textField1.setVisible(false);
				btnNewButton_1.setVisible(false);
				btnNewButton_2.setVisible(false);
				
				textField2.setVisible(false);
				btnNewButton_3.setVisible(false);
				
				
				
			}
		});
		btnNewButton_3.setVisible(false);
		btnNewButton_3.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_3.setForeground(Color.RED);
		btnNewButton_3.setBackground(Color.WHITE);
		btnNewButton_3.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_3);
		
		
	}
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-04-30 17:34:05.512
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-04-30 17:34:05.513
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-30 17:34:08.495
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import java.awt.Color;
import java.awt.Toolkit;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

import java.awt.Font;
import javax.swing.JRadioButton;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Arrays;
import java.util.Random;


public class Main extends JFrame {

	private JPanel contentPane;
	private JLabel lblNewLabel_1_2;
	private JLabel lblNewLabel_1;
	private JLabel lblNewLabel_1_1; 
	private JLabel lblNewLabel_1_2_1;
	private JLabel lblNewLabel_1_2_2;
	private JLabel lblNewLabel_1_2_3;
	private JLabel lblNewLabel_1_2_4;
	private JRadioButton rdbtnEasy;
	private JRadioButton rdbtnAverage;
	private JRadioButton rdbtnDifficult;
	private JButton btnStart; 
	private JLabel lblNewLabel;
	private JLabel lblNewLabel_2;
	private JLabel lblNewLabel_3;
	private JLabel lblNewLabel_4;
	private JTextField textField;
	private JButton btnNewButton_1;
	private JTextField textField1;
	private JButton btnNewButton_2;
	private JButton returnButton;

	private JTextField textField2;
	private JButton btnNewButton_3;
	int currentQuestionNumber = 1;
	int playerScore = 0;
	Random random = new Random();
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Main frame = new Main();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
	
	
	
	

	/**
	 * Create the frame.
	 */
	
	
	public int findIndex(char operand) {
		char[] operandOrder = {'-', '+', '/', '*'};
		int index = 0;
		
		for(int i = 0; i < operandOrder.length; i++) {
			if(operand == operandOrder[i]) index = i;
		}
		return index;
	}
	
	public double getResult(String question) {
		char[] questionData = question.toCharArray(); 
		
		char operand = questionData[1];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double result = 0;
		
		if(operand == '+') result = firstNumber + secondNumber;
		if(operand == '-') result = firstNumber - secondNumber;
		if(operand == '*') result = firstNumber * secondNumber;
		if(operand == '/') result = firstNumber / secondNumber;
		double roundedResult = Math.round(result);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	public double getResultAverage(String question) {
		char[] questionData = question.toCharArray(); 
		
		char firstOperand = questionData[1];
		char secondOperand = questionData[3];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double thirdNumber = Double.parseDouble(String.valueOf(questionData[4]));
		double result = 0;
		
		
		char[] operandOrder = {'-', '+', '/', '*'};
		int indexFirst = findIndex(firstOperand);
		int indexSecond = findIndex(secondOperand);
		double totalResult = 0;
		double initialResult = 0;
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+') initialResult = secondNumber + thirdNumber;
			if(secondOperand == '-') initialResult = secondNumber - thirdNumber;
			if(secondOperand == '*') initialResult = secondNumber * thirdNumber;
			if(secondOperand == '/') initialResult = secondNumber / thirdNumber;
			
			
		}
		else if (indexSecond < indexFirst) {
			if(firstOperand == '+') initialResult = firstNumber + secondNumber;
			if(firstOperand == '-') initialResult = firstNumber - secondNumber;
			if(firstOperand == '*') initialResult = firstNumber * secondNumber;
			if(firstOperand == '/') initialResult = firstNumber / secondNumber;
		}
		else {
			if(firstOperand == '+') totalResult = firstNumber + secondNumber + thirdNumber;
			if(firstOperand == '-') totalResult = firstNumber - secondNumber - thirdNumber;
			if(firstOperand == '*') totalResult = firstNumber * secondNumber * thirdNumber;
			if(firstOperand == '/') totalResult = firstNumber / secondNumber / thirdNumber;
		}
		
		
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+')  totalResult = firstNumber + thirdNumber;
			if(secondOperand == '-')  totalResult = firstNumber - thirdNumber;
			if(secondOperand == '*')  totalResult = firstNumber * thirdNumber;
			if(secondOperand == '/')  totalResult = firstNumber / thirdNumber;
			
			
		}
		
		else (indexSecond < indexFirst) {
			if(firstOperand == '+')  totalResult = initialResult + thirdNumber;
			if(firstOperand == '-')  totalResult = initialResult - thirdNumber;
			if(firstOperand == '*')  totalResult = initialResult * thirdNumber;
			if(firstOperand == '/')  totalResult = initialResult / thirdNumber;
		}
		
		
		
		
		
		double roundedResult = Math.round(totalResult);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	
	public String generateQuestion() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond];
		
		return question;
	}
	
	public String generateQuestionAverage() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexThird = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		int randomIndexOperand2 = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond] + operands[randomIndexOperand2] + numbers[randomIndexThird];
		System.out.println(question);
		return question;
	}
	
	
	public Main() {
		setIconImage(Toolkit.getDefaultToolkit().getImage("C:\\Users\\user\\Downloads\\quiz.png"));
		setTitle("QUIZ GAME");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(400, 100, 600, 600);
		contentPane = new JPanel();
		contentPane.setBackground(Color.WHITE);
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));

		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JPanel panel = new JPanel();
		panel.setBackground(Color.RED);
		panel.setBounds(10, 0, 564, 550);
		contentPane.add(panel);
		panel.setLayout(null);
		
		lblNewLabel_1_2_4 = new JLabel("quiz");
		lblNewLabel_1_2_4.setForeground(Color.WHITE);
		lblNewLabel_1_2_4.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_4.setBounds(140, 130, 561, 120);
		panel.add(lblNewLabel_1_2_4);
		
		lblNewLabel_1_2 = new JLabel("MATH");
		lblNewLabel_1_2.setForeground(Color.WHITE);
		lblNewLabel_1_2.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_2.setBounds(70, 50, 561, 120);
		panel.add(lblNewLabel_1_2);
		
		lblNewLabel_1 = new JLabel("MATH");
		lblNewLabel_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1.setForeground(Color.DARK_GRAY);
		lblNewLabel_1.setBounds(78, 50, 777, 120);
		panel.add(lblNewLabel_1);
		
		lblNewLabel_1_1 = new JLabel("MATH");
		lblNewLabel_1_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_1.setBounds(89, 50, 612, 120);
		panel.add(lblNewLabel_1_1);
		
		lblNewLabel_1_2_2 = new JLabel("quiz");
		lblNewLabel_1_2_2.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_2.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_2.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_2);
		
		lblNewLabel_1_2_1 = new JLabel("quiz");
		lblNewLabel_1_2_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_2_1.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_1.setBounds(159, 130, 561, 120);
		panel.add(lblNewLabel_1_2_1);
		
		lblNewLabel_1_2_3 = new JLabel("quiz");
		lblNewLabel_1_2_3.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_3.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_3.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_3);
		
		lblNewLabel = new JLabel("");
		lblNewLabel.setFont(new Font("Dialog", Font.BOLD, 9));
		lblNewLabel.setBounds(225, 428, 161, 14);
		panel.add(lblNewLabel);
		
		rdbtnEasy = new JRadioButton("EASY");
		rdbtnEasy.setForeground(Color.WHITE);
		rdbtnEasy.setBackground(Color.RED);
		rdbtnEasy.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnEasy.setBounds(215, 232, 269, 78);
		panel.add(rdbtnEasy);
		
		rdbtnAverage = new JRadioButton("AVERAGE");
		rdbtnAverage.setForeground(Color.WHITE);
		rdbtnAverage.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnAverage.setBackground(Color.RED);
		rdbtnAverage.setBounds(188, 290, 269, 73);
		panel.add(rdbtnAverage);
		
		rdbtnDifficult = new JRadioButton("DIFFICULT");
		rdbtnDifficult.setForeground(Color.WHITE);
		rdbtnDifficult.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnDifficult.setBackground(Color.RED);
		rdbtnDifficult.setBounds(176, 342, 269, 68);
		panel.add(rdbtnDifficult);
		
		ButtonGroup difficulty = new ButtonGroup();
		difficulty.add(rdbtnEasy);
		difficulty.add(rdbtnAverage);
		difficulty.add(rdbtnDifficult);
		
		btnStart = new JButton("START");
		
		
	
		
		btnStart.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
			if(rdbtnEasy.isSelected()){
				///////////
				
 				lblNewLabel_3.setText(generateQuestion());
 				
 				
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_1.setVisible(true);
				
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnAverage.isSelected()){
				
				lblNewLabel_3.setText(generateQuestionAverage());
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_2.setVisible(true);
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnDifficult.isSelected()){
				
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			}
		});
		btnStart.setBackground(Color.WHITE);
		btnStart.setForeground(Color.RED);
		btnStart.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnStart.setBounds(212, 453, 125, 43);
		panel.add(btnStart);
		
		lblNewLabel_2 = new JLabel("");
		lblNewLabel_2.setVisible(false);
		lblNewLabel_2.setForeground(Color.WHITE);
		lblNewLabel_2.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_2.setBounds(317, 90, 125, 129);
		panel.add(lblNewLabel_2);
		
		lblNewLabel_3 = new JLabel("");
		lblNewLabel_3.setVisible(false);
		lblNewLabel_3.setForeground(Color.WHITE);
		lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_3.setBounds(215, 90, 300, 200);
		panel.add(lblNewLabel_3);
		
		lblNewLabel_4 = new JLabel("");
		lblNewLabel_4.addMouseListener(new MouseAdapter() {
			public void mouseReleased(MouseEvent e) {
				
			}
		});
		lblNewLabel_4.setVisible(false);
		lblNewLabel_4.setForeground(Color.WHITE);
		lblNewLabel_4.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_4.setBounds(121, 90, 103, 129);
		panel.add(lblNewLabel_4);
				
		textField = new JTextField();
		textField.setHorizontalAlignment(SwingConstants.RIGHT);
		textField.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField.setVisible(false);
		textField.setBounds(121, 261, 324, 49);
		panel.add(textField);
		textField.setColumns(10);
		
		textField1 = new JTextField();
		textField1.setHorizontalAlignment(SwingConstants.RIGHT);
		textField1.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField1.setVisible(false);
		textField1.setBounds(121, 261, 324, 49);
		panel.add(textField1);
		textField1.setColumns(10);
		
		returnButton = new JButton("Return");
		returnButton.setVisible(false);
		returnButton.setFont(new Font("Tahoma", Font.BOLD, 20));
		returnButton.setForeground(Color.RED);
		returnButton.setBackground(Color.WHITE);
		returnButton.setBounds(225, 363, 126, 43);
		panel.add(returnButton);
		
		
		returnButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel.setVisible(true);
				rdbtnEasy.setVisible(true);
				rdbtnAverage.setVisible(true);
				rdbtnDifficult.setVisible(true);
				lblNewLabel_1_2_3.setVisible(true);
				lblNewLabel_1_2_1.setVisible(true);
				lblNewLabel_1_2_2.setVisible(true);
				lblNewLabel_1_1.setVisible(true);
				lblNewLabel_1.setVisible(true);
				lblNewLabel_1_2.setVisible(true);
				lblNewLabel_1_2_4.setVisible(true);
				btnStart.setVisible(true);
				returnButton.setVisible(false);
				lblNewLabel_3.setVisible(false);
				lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
			}

		
			
			
		});
		
		btnNewButton_1 = new JButton("SUBMIT");
		btnNewButton_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				
				
				double result = getResult(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
				
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
				
			}
		});
		btnNewButton_1.setVisible(false);
		btnNewButton_1.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_1.setForeground(Color.RED);
		btnNewButton_1.setBackground(Color.WHITE);
		btnNewButton_1.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_1);
		
		//Button 2
		btnNewButton_2 = new JButton("SUBMIT");
		btnNewButton_2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				double result = getResultAverage(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
			
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
			}
		});
		btnNewButton_2.setVisible(false);
		btnNewButton_2.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_2.setForeground(Color.RED);
		btnNewButton_2.setBackground(Color.WHITE);
		btnNewButton_2.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_2);
		
		
		textField2 = new JTextField();
		textField2.setHorizontalAlignment(SwingConstants.RIGHT);
		textField2.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField2.setVisible(false);
		textField2.setBounds(121, 261, 324, 49);
		panel.add(textField2);
		textField2.setColumns(10);
		
		btnNewButton_3 = new JButton("SUBMIT");
		btnNewButton_3.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel_2.setVisible(false);
				
				textField.setVisible(false);
				textField1.setVisible(false);
				btnNewButton_1.setVisible(false);
				btnNewButton_2.setVisible(false);
				
				textField2.setVisible(false);
				btnNewButton_3.setVisible(false);
				
				
				
			}
		});
		btnNewButton_3.setVisible(false);
		btnNewButton_3.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_3.setForeground(Color.RED);
		btnNewButton_3.setBackground(Color.WHITE);
		btnNewButton_3.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_3);
		
		
	}
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-04-30 17:34:08.496
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-04-30 17:34:08.496
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-30 17:34:19.597
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import java.awt.Color;
import java.awt.Toolkit;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

import java.awt.Font;
import javax.swing.JRadioButton;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Arrays;
import java.util.Random;


public class Main extends JFrame {

	private JPanel contentPane;
	private JLabel lblNewLabel_1_2;
	private JLabel lblNewLabel_1;
	private JLabel lblNewLabel_1_1; 
	private JLabel lblNewLabel_1_2_1;
	private JLabel lblNewLabel_1_2_2;
	private JLabel lblNewLabel_1_2_3;
	private JLabel lblNewLabel_1_2_4;
	private JRadioButton rdbtnEasy;
	private JRadioButton rdbtnAverage;
	private JRadioButton rdbtnDifficult;
	private JButton btnStart; 
	private JLabel lblNewLabel;
	private JLabel lblNewLabel_2;
	private JLabel lblNewLabel_3;
	private JLabel lblNewLabel_4;
	private JTextField textField;
	private JButton btnNewButton_1;
	private JTextField textField1;
	private JButton btnNewButton_2;
	private JButton returnButton;

	private JTextField textField2;
	private JButton btnNewButton_3;
	int currentQuestionNumber = 1;
	int playerScore = 0;
	Random random = new Random();
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Main frame = new Main();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
	
	
	
	

	/**
	 * Create the frame.
	 */
	
	
	public int findIndex(char operand) {
		char[] operandOrder = {'-', '+', '/', '*'};
		int index = 0;
		
		for(int i = 0; i < operandOrder.length; i++) {
			if(operand == operandOrder[i]) index = i;
		}
		return index;
	}
	
	public double getResult(String question) {
		char[] questionData = question.toCharArray(); 
		
		char operand = questionData[1];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double result = 0;
		
		if(operand == '+') result = firstNumber + secondNumber;
		if(operand == '-') result = firstNumber - secondNumber;
		if(operand == '*') result = firstNumber * secondNumber;
		if(operand == '/') result = firstNumber / secondNumber;
		double roundedResult = Math.round(result);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	public double getResultAverage(String question) {
		char[] questionData = question.toCharArray(); 
		
		char firstOperand = questionData[1];
		char secondOperand = questionData[3];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double thirdNumber = Double.parseDouble(String.valueOf(questionData[4]));
		double result = 0;
		
		
		char[] operandOrder = {'-', '+', '/', '*'};
		int indexFirst = findIndex(firstOperand);
		int indexSecond = findIndex(secondOperand);
		double totalResult = 0;
		double initialResult = 0;
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+') initialResult = secondNumber + thirdNumber;
			if(secondOperand == '-') initialResult = secondNumber - thirdNumber;
			if(secondOperand == '*') initialResult = secondNumber * thirdNumber;
			if(secondOperand == '/') initialResult = secondNumber / thirdNumber;
			
			
		}
		else if (indexSecond < indexFirst) {
			if(firstOperand == '+') initialResult = firstNumber + secondNumber;
			if(firstOperand == '-') initialResult = firstNumber - secondNumber;
			if(firstOperand == '*') initialResult = firstNumber * secondNumber;
			if(firstOperand == '/') initialResult = firstNumber / secondNumber;
		}
		else {
			if(firstOperand == '+') totalResult = firstNumber + secondNumber + thirdNumber;
			if(firstOperand == '-') totalResult = firstNumber - secondNumber - thirdNumber;
			if(firstOperand == '*') totalResult = firstNumber * secondNumber * thirdNumber;
			if(firstOperand == '/') totalResult = firstNumber / secondNumber / thirdNumber;
		}
		
		
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+')  totalResult = firstNumber + thirdNumber;
			if(secondOperand == '-')  totalResult = firstNumber - thirdNumber;
			if(secondOperand == '*')  totalResult = firstNumber * thirdNumber;
			if(secondOperand == '/')  totalResult = firstNumber / thirdNumber;
			
			
		}
		
		else (indexSecond < indexFirst) {
			if(firstOperand == '+')  totalResult = initialResult + thirdNumber;
			if(firstOperand == '-')  totalResult = initialResult - thirdNumber;
			if(firstOperand == '*')  totalResult = initialResult * thirdNumber;
			if(firstOperand == '/')  totalResult = initialResult / thirdNumber;
		}
		
		
		
		
		
		double roundedResult = Math.round(totalResult);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	
	public String generateQuestion() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond];
		
		return question;
	}
	
	public String generateQuestionAverage() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexThird = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		int randomIndexOperand2 = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond] + operands[randomIndexOperand2] + numbers[randomIndexThird];
		System.out.println(question);
		return question;
	}
	
	
	public Main() {
		setIconImage(Toolkit.getDefaultToolkit().getImage("C:\\Users\\user\\Downloads\\quiz.png"));
		setTitle("QUIZ GAME");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(400, 100, 600, 600);
		contentPane = new JPanel();
		contentPane.setBackground(Color.WHITE);
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));

		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JPanel panel = new JPanel();
		panel.setBackground(Color.RED);
		panel.setBounds(10, 0, 564, 550);
		contentPane.add(panel);
		panel.setLayout(null);
		
		lblNewLabel_1_2_4 = new JLabel("quiz");
		lblNewLabel_1_2_4.setForeground(Color.WHITE);
		lblNewLabel_1_2_4.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_4.setBounds(140, 130, 561, 120);
		panel.add(lblNewLabel_1_2_4);
		
		lblNewLabel_1_2 = new JLabel("MATH");
		lblNewLabel_1_2.setForeground(Color.WHITE);
		lblNewLabel_1_2.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_2.setBounds(70, 50, 561, 120);
		panel.add(lblNewLabel_1_2);
		
		lblNewLabel_1 = new JLabel("MATH");
		lblNewLabel_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1.setForeground(Color.DARK_GRAY);
		lblNewLabel_1.setBounds(78, 50, 777, 120);
		panel.add(lblNewLabel_1);
		
		lblNewLabel_1_1 = new JLabel("MATH");
		lblNewLabel_1_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_1.setBounds(89, 50, 612, 120);
		panel.add(lblNewLabel_1_1);
		
		lblNewLabel_1_2_2 = new JLabel("quiz");
		lblNewLabel_1_2_2.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_2.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_2.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_2);
		
		lblNewLabel_1_2_1 = new JLabel("quiz");
		lblNewLabel_1_2_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_2_1.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_1.setBounds(159, 130, 561, 120);
		panel.add(lblNewLabel_1_2_1);
		
		lblNewLabel_1_2_3 = new JLabel("quiz");
		lblNewLabel_1_2_3.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_3.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_3.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_3);
		
		lblNewLabel = new JLabel("");
		lblNewLabel.setFont(new Font("Dialog", Font.BOLD, 9));
		lblNewLabel.setBounds(225, 428, 161, 14);
		panel.add(lblNewLabel);
		
		rdbtnEasy = new JRadioButton("EASY");
		rdbtnEasy.setForeground(Color.WHITE);
		rdbtnEasy.setBackground(Color.RED);
		rdbtnEasy.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnEasy.setBounds(215, 232, 269, 78);
		panel.add(rdbtnEasy);
		
		rdbtnAverage = new JRadioButton("AVERAGE");
		rdbtnAverage.setForeground(Color.WHITE);
		rdbtnAverage.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnAverage.setBackground(Color.RED);
		rdbtnAverage.setBounds(188, 290, 269, 73);
		panel.add(rdbtnAverage);
		
		rdbtnDifficult = new JRadioButton("DIFFICULT");
		rdbtnDifficult.setForeground(Color.WHITE);
		rdbtnDifficult.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnDifficult.setBackground(Color.RED);
		rdbtnDifficult.setBounds(176, 342, 269, 68);
		panel.add(rdbtnDifficult);
		
		ButtonGroup difficulty = new ButtonGroup();
		difficulty.add(rdbtnEasy);
		difficulty.add(rdbtnAverage);
		difficulty.add(rdbtnDifficult);
		
		btnStart = new JButton("START");
		
		
	
		
		btnStart.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
			if(rdbtnEasy.isSelected()){
				///////////
				
 				lblNewLabel_3.setText(generateQuestion());
 				
 				
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_1.setVisible(true);
				
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnAverage.isSelected()){
				
				lblNewLabel_3.setText(generateQuestionAverage());
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_2.setVisible(true);
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnDifficult.isSelected()){
				
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			}
		});
		btnStart.setBackground(Color.WHITE);
		btnStart.setForeground(Color.RED);
		btnStart.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnStart.setBounds(212, 453, 125, 43);
		panel.add(btnStart);
		
		lblNewLabel_2 = new JLabel("");
		lblNewLabel_2.setVisible(false);
		lblNewLabel_2.setForeground(Color.WHITE);
		lblNewLabel_2.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_2.setBounds(317, 90, 125, 129);
		panel.add(lblNewLabel_2);
		
		lblNewLabel_3 = new JLabel("");
		lblNewLabel_3.setVisible(false);
		lblNewLabel_3.setForeground(Color.WHITE);
		lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_3.setBounds(215, 90, 300, 200);
		panel.add(lblNewLabel_3);
		
		lblNewLabel_4 = new JLabel("");
		lblNewLabel_4.addMouseListener(new MouseAdapter() {
			public void mouseReleased(MouseEvent e) {
				
			}
		});
		lblNewLabel_4.setVisible(false);
		lblNewLabel_4.setForeground(Color.WHITE);
		lblNewLabel_4.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_4.setBounds(121, 90, 103, 129);
		panel.add(lblNewLabel_4);
				
		textField = new JTextField();
		textField.setHorizontalAlignment(SwingConstants.RIGHT);
		textField.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField.setVisible(false);
		textField.setBounds(121, 261, 324, 49);
		panel.add(textField);
		textField.setColumns(10);
		
		textField1 = new JTextField();
		textField1.setHorizontalAlignment(SwingConstants.RIGHT);
		textField1.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField1.setVisible(false);
		textField1.setBounds(121, 261, 324, 49);
		panel.add(textField1);
		textField1.setColumns(10);
		
		returnButton = new JButton("Return");
		returnButton.setVisible(false);
		returnButton.setFont(new Font("Tahoma", Font.BOLD, 20));
		returnButton.setForeground(Color.RED);
		returnButton.setBackground(Color.WHITE);
		returnButton.setBounds(225, 363, 126, 43);
		panel.add(returnButton);
		
		
		returnButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel.setVisible(true);
				rdbtnEasy.setVisible(true);
				rdbtnAverage.setVisible(true);
				rdbtnDifficult.setVisible(true);
				lblNewLabel_1_2_3.setVisible(true);
				lblNewLabel_1_2_1.setVisible(true);
				lblNewLabel_1_2_2.setVisible(true);
				lblNewLabel_1_1.setVisible(true);
				lblNewLabel_1.setVisible(true);
				lblNewLabel_1_2.setVisible(true);
				lblNewLabel_1_2_4.setVisible(true);
				btnStart.setVisible(true);
				returnButton.setVisible(false);
				lblNewLabel_3.setVisible(false);
				lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
			}

		
			
			
		});
		
		btnNewButton_1 = new JButton("SUBMIT");
		btnNewButton_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				
				
				double result = getResult(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
				
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
				
			}
		});
		btnNewButton_1.setVisible(false);
		btnNewButton_1.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_1.setForeground(Color.RED);
		btnNewButton_1.setBackground(Color.WHITE);
		btnNewButton_1.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_1);
		
		//Button 2
		btnNewButton_2 = new JButton("SUBMIT");
		btnNewButton_2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				double result = getResultAverage(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
			
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
			}
		});
		btnNewButton_2.setVisible(false);
		btnNewButton_2.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_2.setForeground(Color.RED);
		btnNewButton_2.setBackground(Color.WHITE);
		btnNewButton_2.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_2);
		
		
		textField2 = new JTextField();
		textField2.setHorizontalAlignment(SwingConstants.RIGHT);
		textField2.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField2.setVisible(false);
		textField2.setBounds(121, 261, 324, 49);
		panel.add(textField2);
		textField2.setColumns(10);
		
		btnNewButton_3 = new JButton("SUBMIT");
		btnNewButton_3.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel_2.setVisible(false);
				
				textField.setVisible(false);
				textField1.setVisible(false);
				btnNewButton_1.setVisible(false);
				btnNewButton_2.setVisible(false);
				
				textField2.setVisible(false);
				btnNewButton_3.setVisible(false);
				
				
				
			}
		});
		btnNewButton_3.setVisible(false);
		btnNewButton_3.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_3.setForeground(Color.RED);
		btnNewButton_3.setBackground(Color.WHITE);
		btnNewButton_3.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_3);
		
		
	}
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.getClipboardData(ClipboardOperationAction.java:479)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.doCutCopyWithImportsOperation(ClipboardOperationAction.java:406)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.internalDoOperation(ClipboardOperationAction.java:365)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:74)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.run(ClipboardOperationAction.java:286)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:474)
	at org.eclipse.jface.commands.ActionHandler.execute(ActionHandler.java:121)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at jdk.internal.reflect.GeneratedMethodAccessor49.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:251)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:485)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:647)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1262)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1065)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1090)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1075)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1117)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1113)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1542)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4868)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4746)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5026)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3643)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-04-30 17:34:19.598
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.getClipboardData(ClipboardOperationAction.java:479)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.doCutCopyWithImportsOperation(ClipboardOperationAction.java:406)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.internalDoOperation(ClipboardOperationAction.java:365)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:74)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.run(ClipboardOperationAction.java:286)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:474)
	at org.eclipse.jface.commands.ActionHandler.execute(ActionHandler.java:121)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at jdk.internal.reflect.GeneratedMethodAccessor49.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:251)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:485)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:647)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1262)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1065)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1090)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1075)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1117)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1113)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1542)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4868)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4746)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5026)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3643)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-04-30 17:34:19.598
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.getClipboardData(ClipboardOperationAction.java:479)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.doCutCopyWithImportsOperation(ClipboardOperationAction.java:406)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.internalDoOperation(ClipboardOperationAction.java:365)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:74)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.run(ClipboardOperationAction.java:286)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:474)
	at org.eclipse.jface.commands.ActionHandler.execute(ActionHandler.java:121)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at jdk.internal.reflect.GeneratedMethodAccessor49.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:251)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:485)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:647)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1262)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1065)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1090)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1075)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1117)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1113)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1542)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4868)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4746)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5026)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3643)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-30 17:34:20.123
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import java.awt.Color;
import java.awt.Toolkit;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

import java.awt.Font;
import javax.swing.JRadioButton;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Arrays;
import java.util.Random;


public class Main extends JFrame {

	private JPanel contentPane;
	private JLabel lblNewLabel_1_2;
	private JLabel lblNewLabel_1;
	private JLabel lblNewLabel_1_1; 
	private JLabel lblNewLabel_1_2_1;
	private JLabel lblNewLabel_1_2_2;
	private JLabel lblNewLabel_1_2_3;
	private JLabel lblNewLabel_1_2_4;
	private JRadioButton rdbtnEasy;
	private JRadioButton rdbtnAverage;
	private JRadioButton rdbtnDifficult;
	private JButton btnStart; 
	private JLabel lblNewLabel;
	private JLabel lblNewLabel_2;
	private JLabel lblNewLabel_3;
	private JLabel lblNewLabel_4;
	private JTextField textField;
	private JButton btnNewButton_1;
	private JTextField textField1;
	private JButton btnNewButton_2;
	private JButton returnButton;

	private JTextField textField2;
	private JButton btnNewButton_3;
	int currentQuestionNumber = 1;
	int playerScore = 0;
	Random random = new Random();
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Main frame = new Main();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
	
	
	
	

	/**
	 * Create the frame.
	 */
	
	
	public int findIndex(char operand) {
		char[] operandOrder = {'-', '+', '/', '*'};
		int index = 0;
		
		for(int i = 0; i < operandOrder.length; i++) {
			if(operand == operandOrder[i]) index = i;
		}
		return index;
	}
	
	public double getResult(String question) {
		char[] questionData = question.toCharArray(); 
		
		char operand = questionData[1];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double result = 0;
		
		if(operand == '+') result = firstNumber + secondNumber;
		if(operand == '-') result = firstNumber - secondNumber;
		if(operand == '*') result = firstNumber * secondNumber;
		if(operand == '/') result = firstNumber / secondNumber;
		double roundedResult = Math.round(result);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	public double getResultAverage(String question) {
		char[] questionData = question.toCharArray(); 
		
		char firstOperand = questionData[1];
		char secondOperand = questionData[3];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double thirdNumber = Double.parseDouble(String.valueOf(questionData[4]));
		double result = 0;
		
		
		char[] operandOrder = {'-', '+', '/', '*'};
		int indexFirst = findIndex(firstOperand);
		int indexSecond = findIndex(secondOperand);
		double totalResult = 0;
		double initialResult = 0;
		
		
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+')  totalResult = firstNumber + thirdNumber;
			if(secondOperand == '-')  totalResult = firstNumber - thirdNumber;
			if(secondOperand == '*')  totalResult = firstNumber * thirdNumber;
			if(secondOperand == '/')  totalResult = firstNumber / thirdNumber;
			
			
		}
		
		else (indexSecond < indexFirst) {
			if(firstOperand == '+')  totalResult = initialResult + thirdNumber;
			if(firstOperand == '-')  totalResult = initialResult - thirdNumber;
			if(firstOperand == '*')  totalResult = initialResult * thirdNumber;
			if(firstOperand == '/')  totalResult = initialResult / thirdNumber;
		}
		
		
		
		
		
		double roundedResult = Math.round(totalResult);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	
	public String generateQuestion() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond];
		
		return question;
	}
	
	public String generateQuestionAverage() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexThird = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		int randomIndexOperand2 = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond] + operands[randomIndexOperand2] + numbers[randomIndexThird];
		System.out.println(question);
		return question;
	}
	
	
	public Main() {
		setIconImage(Toolkit.getDefaultToolkit().getImage("C:\\Users\\user\\Downloads\\quiz.png"));
		setTitle("QUIZ GAME");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(400, 100, 600, 600);
		contentPane = new JPanel();
		contentPane.setBackground(Color.WHITE);
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));

		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JPanel panel = new JPanel();
		panel.setBackground(Color.RED);
		panel.setBounds(10, 0, 564, 550);
		contentPane.add(panel);
		panel.setLayout(null);
		
		lblNewLabel_1_2_4 = new JLabel("quiz");
		lblNewLabel_1_2_4.setForeground(Color.WHITE);
		lblNewLabel_1_2_4.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_4.setBounds(140, 130, 561, 120);
		panel.add(lblNewLabel_1_2_4);
		
		lblNewLabel_1_2 = new JLabel("MATH");
		lblNewLabel_1_2.setForeground(Color.WHITE);
		lblNewLabel_1_2.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_2.setBounds(70, 50, 561, 120);
		panel.add(lblNewLabel_1_2);
		
		lblNewLabel_1 = new JLabel("MATH");
		lblNewLabel_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1.setForeground(Color.DARK_GRAY);
		lblNewLabel_1.setBounds(78, 50, 777, 120);
		panel.add(lblNewLabel_1);
		
		lblNewLabel_1_1 = new JLabel("MATH");
		lblNewLabel_1_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_1.setBounds(89, 50, 612, 120);
		panel.add(lblNewLabel_1_1);
		
		lblNewLabel_1_2_2 = new JLabel("quiz");
		lblNewLabel_1_2_2.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_2.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_2.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_2);
		
		lblNewLabel_1_2_1 = new JLabel("quiz");
		lblNewLabel_1_2_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_2_1.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_1.setBounds(159, 130, 561, 120);
		panel.add(lblNewLabel_1_2_1);
		
		lblNewLabel_1_2_3 = new JLabel("quiz");
		lblNewLabel_1_2_3.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_3.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_3.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_3);
		
		lblNewLabel = new JLabel("");
		lblNewLabel.setFont(new Font("Dialog", Font.BOLD, 9));
		lblNewLabel.setBounds(225, 428, 161, 14);
		panel.add(lblNewLabel);
		
		rdbtnEasy = new JRadioButton("EASY");
		rdbtnEasy.setForeground(Color.WHITE);
		rdbtnEasy.setBackground(Color.RED);
		rdbtnEasy.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnEasy.setBounds(215, 232, 269, 78);
		panel.add(rdbtnEasy);
		
		rdbtnAverage = new JRadioButton("AVERAGE");
		rdbtnAverage.setForeground(Color.WHITE);
		rdbtnAverage.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnAverage.setBackground(Color.RED);
		rdbtnAverage.setBounds(188, 290, 269, 73);
		panel.add(rdbtnAverage);
		
		rdbtnDifficult = new JRadioButton("DIFFICULT");
		rdbtnDifficult.setForeground(Color.WHITE);
		rdbtnDifficult.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnDifficult.setBackground(Color.RED);
		rdbtnDifficult.setBounds(176, 342, 269, 68);
		panel.add(rdbtnDifficult);
		
		ButtonGroup difficulty = new ButtonGroup();
		difficulty.add(rdbtnEasy);
		difficulty.add(rdbtnAverage);
		difficulty.add(rdbtnDifficult);
		
		btnStart = new JButton("START");
		
		
	
		
		btnStart.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
			if(rdbtnEasy.isSelected()){
				///////////
				
 				lblNewLabel_3.setText(generateQuestion());
 				
 				
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_1.setVisible(true);
				
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnAverage.isSelected()){
				
				lblNewLabel_3.setText(generateQuestionAverage());
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_2.setVisible(true);
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnDifficult.isSelected()){
				
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			}
		});
		btnStart.setBackground(Color.WHITE);
		btnStart.setForeground(Color.RED);
		btnStart.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnStart.setBounds(212, 453, 125, 43);
		panel.add(btnStart);
		
		lblNewLabel_2 = new JLabel("");
		lblNewLabel_2.setVisible(false);
		lblNewLabel_2.setForeground(Color.WHITE);
		lblNewLabel_2.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_2.setBounds(317, 90, 125, 129);
		panel.add(lblNewLabel_2);
		
		lblNewLabel_3 = new JLabel("");
		lblNewLabel_3.setVisible(false);
		lblNewLabel_3.setForeground(Color.WHITE);
		lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_3.setBounds(215, 90, 300, 200);
		panel.add(lblNewLabel_3);
		
		lblNewLabel_4 = new JLabel("");
		lblNewLabel_4.addMouseListener(new MouseAdapter() {
			public void mouseReleased(MouseEvent e) {
				
			}
		});
		lblNewLabel_4.setVisible(false);
		lblNewLabel_4.setForeground(Color.WHITE);
		lblNewLabel_4.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_4.setBounds(121, 90, 103, 129);
		panel.add(lblNewLabel_4);
				
		textField = new JTextField();
		textField.setHorizontalAlignment(SwingConstants.RIGHT);
		textField.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField.setVisible(false);
		textField.setBounds(121, 261, 324, 49);
		panel.add(textField);
		textField.setColumns(10);
		
		textField1 = new JTextField();
		textField1.setHorizontalAlignment(SwingConstants.RIGHT);
		textField1.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField1.setVisible(false);
		textField1.setBounds(121, 261, 324, 49);
		panel.add(textField1);
		textField1.setColumns(10);
		
		returnButton = new JButton("Return");
		returnButton.setVisible(false);
		returnButton.setFont(new Font("Tahoma", Font.BOLD, 20));
		returnButton.setForeground(Color.RED);
		returnButton.setBackground(Color.WHITE);
		returnButton.setBounds(225, 363, 126, 43);
		panel.add(returnButton);
		
		
		returnButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel.setVisible(true);
				rdbtnEasy.setVisible(true);
				rdbtnAverage.setVisible(true);
				rdbtnDifficult.setVisible(true);
				lblNewLabel_1_2_3.setVisible(true);
				lblNewLabel_1_2_1.setVisible(true);
				lblNewLabel_1_2_2.setVisible(true);
				lblNewLabel_1_1.setVisible(true);
				lblNewLabel_1.setVisible(true);
				lblNewLabel_1_2.setVisible(true);
				lblNewLabel_1_2_4.setVisible(true);
				btnStart.setVisible(true);
				returnButton.setVisible(false);
				lblNewLabel_3.setVisible(false);
				lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
			}

		
			
			
		});
		
		btnNewButton_1 = new JButton("SUBMIT");
		btnNewButton_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				
				
				double result = getResult(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
				
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
				
			}
		});
		btnNewButton_1.setVisible(false);
		btnNewButton_1.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_1.setForeground(Color.RED);
		btnNewButton_1.setBackground(Color.WHITE);
		btnNewButton_1.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_1);
		
		//Button 2
		btnNewButton_2 = new JButton("SUBMIT");
		btnNewButton_2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				double result = getResultAverage(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
			
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
			}
		});
		btnNewButton_2.setVisible(false);
		btnNewButton_2.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_2.setForeground(Color.RED);
		btnNewButton_2.setBackground(Color.WHITE);
		btnNewButton_2.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_2);
		
		
		textField2 = new JTextField();
		textField2.setHorizontalAlignment(SwingConstants.RIGHT);
		textField2.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField2.setVisible(false);
		textField2.setBounds(121, 261, 324, 49);
		panel.add(textField2);
		textField2.setColumns(10);
		
		btnNewButton_3 = new JButton("SUBMIT");
		btnNewButton_3.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel_2.setVisible(false);
				
				textField.setVisible(false);
				textField1.setVisible(false);
				btnNewButton_1.setVisible(false);
				btnNewButton_2.setVisible(false);
				
				textField2.setVisible(false);
				btnNewButton_3.setVisible(false);
				
				
				
			}
		});
		btnNewButton_3.setVisible(false);
		btnNewButton_3.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_3.setForeground(Color.RED);
		btnNewButton_3.setBackground(Color.WHITE);
		btnNewButton_3.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_3);
		
		
	}
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-04-30 17:34:20.124
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-04-30 17:34:20.124
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-30 17:34:20.539
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import java.awt.Color;
import java.awt.Toolkit;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

import java.awt.Font;
import javax.swing.JRadioButton;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Arrays;
import java.util.Random;


public class Main extends JFrame {

	private JPanel contentPane;
	private JLabel lblNewLabel_1_2;
	private JLabel lblNewLabel_1;
	private JLabel lblNewLabel_1_1; 
	private JLabel lblNewLabel_1_2_1;
	private JLabel lblNewLabel_1_2_2;
	private JLabel lblNewLabel_1_2_3;
	private JLabel lblNewLabel_1_2_4;
	private JRadioButton rdbtnEasy;
	private JRadioButton rdbtnAverage;
	private JRadioButton rdbtnDifficult;
	private JButton btnStart; 
	private JLabel lblNewLabel;
	private JLabel lblNewLabel_2;
	private JLabel lblNewLabel_3;
	private JLabel lblNewLabel_4;
	private JTextField textField;
	private JButton btnNewButton_1;
	private JTextField textField1;
	private JButton btnNewButton_2;
	private JButton returnButton;

	private JTextField textField2;
	private JButton btnNewButton_3;
	int currentQuestionNumber = 1;
	int playerScore = 0;
	Random random = new Random();
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Main frame = new Main();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
	
	
	
	

	/**
	 * Create the frame.
	 */
	
	
	public int findIndex(char operand) {
		char[] operandOrder = {'-', '+', '/', '*'};
		int index = 0;
		
		for(int i = 0; i < operandOrder.length; i++) {
			if(operand == operandOrder[i]) index = i;
		}
		return index;
	}
	
	public double getResult(String question) {
		char[] questionData = question.toCharArray(); 
		
		char operand = questionData[1];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double result = 0;
		
		if(operand == '+') result = firstNumber + secondNumber;
		if(operand == '-') result = firstNumber - secondNumber;
		if(operand == '*') result = firstNumber * secondNumber;
		if(operand == '/') result = firstNumber / secondNumber;
		double roundedResult = Math.round(result);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	public double getResultAverage(String question) {
		char[] questionData = question.toCharArray(); 
		
		char firstOperand = questionData[1];
		char secondOperand = questionData[3];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double thirdNumber = Double.parseDouble(String.valueOf(questionData[4]));
		double result = 0;
		
		
		char[] operandOrder = {'-', '+', '/', '*'};
		int indexFirst = findIndex(firstOperand);
		int indexSecond = findIndex(secondOperand);
		double totalResult = 0;
		double initialResult = 0;
		
		
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+')  totalResult = firstNumber + thirdNumber;
			if(secondOperand == '-')  totalResult = firstNumber - thirdNumber;
			if(secondOperand == '*')  totalResult = firstNumber * thirdNumber;
			if(secondOperand == '/')  totalResult = firstNumber / thirdNumber;
			
			
		}
		
		else (indexSecond < indexFirst) {
			if(firstOperand == '+')  totalResult = initialResult + thirdNumber;
			if(firstOperand == '-')  totalResult = initialResult - thirdNumber;
			if(firstOperand == '*')  totalResult = initialResult * thirdNumber;
			if(firstOperand == '/')  totalResult = initialResult / thirdNumber;
		}
		
		
		
		
		
		double roundedResult = Math.round(totalResult);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	
	public String generateQuestion() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond];
		
		return question;
	}
	
	public String generateQuestionAverage() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexThird = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		int randomIndexOperand2 = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond] + operands[randomIndexOperand2] + numbers[randomIndexThird];
		System.out.println(question);
		return question;
	}
	
	
	public Main() {
		setIconImage(Toolkit.getDefaultToolkit().getImage("C:\\Users\\user\\Downloads\\quiz.png"));
		setTitle("QUIZ GAME");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(400, 100, 600, 600);
		contentPane = new JPanel();
		contentPane.setBackground(Color.WHITE);
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));

		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JPanel panel = new JPanel();
		panel.setBackground(Color.RED);
		panel.setBounds(10, 0, 564, 550);
		contentPane.add(panel);
		panel.setLayout(null);
		
		lblNewLabel_1_2_4 = new JLabel("quiz");
		lblNewLabel_1_2_4.setForeground(Color.WHITE);
		lblNewLabel_1_2_4.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_4.setBounds(140, 130, 561, 120);
		panel.add(lblNewLabel_1_2_4);
		
		lblNewLabel_1_2 = new JLabel("MATH");
		lblNewLabel_1_2.setForeground(Color.WHITE);
		lblNewLabel_1_2.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_2.setBounds(70, 50, 561, 120);
		panel.add(lblNewLabel_1_2);
		
		lblNewLabel_1 = new JLabel("MATH");
		lblNewLabel_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1.setForeground(Color.DARK_GRAY);
		lblNewLabel_1.setBounds(78, 50, 777, 120);
		panel.add(lblNewLabel_1);
		
		lblNewLabel_1_1 = new JLabel("MATH");
		lblNewLabel_1_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_1.setBounds(89, 50, 612, 120);
		panel.add(lblNewLabel_1_1);
		
		lblNewLabel_1_2_2 = new JLabel("quiz");
		lblNewLabel_1_2_2.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_2.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_2.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_2);
		
		lblNewLabel_1_2_1 = new JLabel("quiz");
		lblNewLabel_1_2_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_2_1.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_1.setBounds(159, 130, 561, 120);
		panel.add(lblNewLabel_1_2_1);
		
		lblNewLabel_1_2_3 = new JLabel("quiz");
		lblNewLabel_1_2_3.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_3.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_3.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_3);
		
		lblNewLabel = new JLabel("");
		lblNewLabel.setFont(new Font("Dialog", Font.BOLD, 9));
		lblNewLabel.setBounds(225, 428, 161, 14);
		panel.add(lblNewLabel);
		
		rdbtnEasy = new JRadioButton("EASY");
		rdbtnEasy.setForeground(Color.WHITE);
		rdbtnEasy.setBackground(Color.RED);
		rdbtnEasy.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnEasy.setBounds(215, 232, 269, 78);
		panel.add(rdbtnEasy);
		
		rdbtnAverage = new JRadioButton("AVERAGE");
		rdbtnAverage.setForeground(Color.WHITE);
		rdbtnAverage.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnAverage.setBackground(Color.RED);
		rdbtnAverage.setBounds(188, 290, 269, 73);
		panel.add(rdbtnAverage);
		
		rdbtnDifficult = new JRadioButton("DIFFICULT");
		rdbtnDifficult.setForeground(Color.WHITE);
		rdbtnDifficult.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnDifficult.setBackground(Color.RED);
		rdbtnDifficult.setBounds(176, 342, 269, 68);
		panel.add(rdbtnDifficult);
		
		ButtonGroup difficulty = new ButtonGroup();
		difficulty.add(rdbtnEasy);
		difficulty.add(rdbtnAverage);
		difficulty.add(rdbtnDifficult);
		
		btnStart = new JButton("START");
		
		
	
		
		btnStart.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
			if(rdbtnEasy.isSelected()){
				///////////
				
 				lblNewLabel_3.setText(generateQuestion());
 				
 				
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_1.setVisible(true);
				
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnAverage.isSelected()){
				
				lblNewLabel_3.setText(generateQuestionAverage());
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_2.setVisible(true);
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnDifficult.isSelected()){
				
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			}
		});
		btnStart.setBackground(Color.WHITE);
		btnStart.setForeground(Color.RED);
		btnStart.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnStart.setBounds(212, 453, 125, 43);
		panel.add(btnStart);
		
		lblNewLabel_2 = new JLabel("");
		lblNewLabel_2.setVisible(false);
		lblNewLabel_2.setForeground(Color.WHITE);
		lblNewLabel_2.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_2.setBounds(317, 90, 125, 129);
		panel.add(lblNewLabel_2);
		
		lblNewLabel_3 = new JLabel("");
		lblNewLabel_3.setVisible(false);
		lblNewLabel_3.setForeground(Color.WHITE);
		lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_3.setBounds(215, 90, 300, 200);
		panel.add(lblNewLabel_3);
		
		lblNewLabel_4 = new JLabel("");
		lblNewLabel_4.addMouseListener(new MouseAdapter() {
			public void mouseReleased(MouseEvent e) {
				
			}
		});
		lblNewLabel_4.setVisible(false);
		lblNewLabel_4.setForeground(Color.WHITE);
		lblNewLabel_4.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_4.setBounds(121, 90, 103, 129);
		panel.add(lblNewLabel_4);
				
		textField = new JTextField();
		textField.setHorizontalAlignment(SwingConstants.RIGHT);
		textField.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField.setVisible(false);
		textField.setBounds(121, 261, 324, 49);
		panel.add(textField);
		textField.setColumns(10);
		
		textField1 = new JTextField();
		textField1.setHorizontalAlignment(SwingConstants.RIGHT);
		textField1.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField1.setVisible(false);
		textField1.setBounds(121, 261, 324, 49);
		panel.add(textField1);
		textField1.setColumns(10);
		
		returnButton = new JButton("Return");
		returnButton.setVisible(false);
		returnButton.setFont(new Font("Tahoma", Font.BOLD, 20));
		returnButton.setForeground(Color.RED);
		returnButton.setBackground(Color.WHITE);
		returnButton.setBounds(225, 363, 126, 43);
		panel.add(returnButton);
		
		
		returnButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel.setVisible(true);
				rdbtnEasy.setVisible(true);
				rdbtnAverage.setVisible(true);
				rdbtnDifficult.setVisible(true);
				lblNewLabel_1_2_3.setVisible(true);
				lblNewLabel_1_2_1.setVisible(true);
				lblNewLabel_1_2_2.setVisible(true);
				lblNewLabel_1_1.setVisible(true);
				lblNewLabel_1.setVisible(true);
				lblNewLabel_1_2.setVisible(true);
				lblNewLabel_1_2_4.setVisible(true);
				btnStart.setVisible(true);
				returnButton.setVisible(false);
				lblNewLabel_3.setVisible(false);
				lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
			}

		
			
			
		});
		
		btnNewButton_1 = new JButton("SUBMIT");
		btnNewButton_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				
				
				double result = getResult(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
				
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
				
			}
		});
		btnNewButton_1.setVisible(false);
		btnNewButton_1.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_1.setForeground(Color.RED);
		btnNewButton_1.setBackground(Color.WHITE);
		btnNewButton_1.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_1);
		
		//Button 2
		btnNewButton_2 = new JButton("SUBMIT");
		btnNewButton_2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				double result = getResultAverage(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
			
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
			}
		});
		btnNewButton_2.setVisible(false);
		btnNewButton_2.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_2.setForeground(Color.RED);
		btnNewButton_2.setBackground(Color.WHITE);
		btnNewButton_2.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_2);
		
		
		textField2 = new JTextField();
		textField2.setHorizontalAlignment(SwingConstants.RIGHT);
		textField2.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField2.setVisible(false);
		textField2.setBounds(121, 261, 324, 49);
		panel.add(textField2);
		textField2.setColumns(10);
		
		btnNewButton_3 = new JButton("SUBMIT");
		btnNewButton_3.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel_2.setVisible(false);
				
				textField.setVisible(false);
				textField1.setVisible(false);
				btnNewButton_1.setVisible(false);
				btnNewButton_2.setVisible(false);
				
				textField2.setVisible(false);
				btnNewButton_3.setVisible(false);
				
				
				
			}
		});
		btnNewButton_3.setVisible(false);
		btnNewButton_3.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_3.setForeground(Color.RED);
		btnNewButton_3.setBackground(Color.WHITE);
		btnNewButton_3.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_3);
		
		
	}
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-04-30 17:34:20.540
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-04-30 17:34:20.541
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-30 17:34:27.308
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import java.awt.Color;
import java.awt.Toolkit;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

import java.awt.Font;
import javax.swing.JRadioButton;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Arrays;
import java.util.Random;


public class Main extends JFrame {

	private JPanel contentPane;
	private JLabel lblNewLabel_1_2;
	private JLabel lblNewLabel_1;
	private JLabel lblNewLabel_1_1; 
	private JLabel lblNewLabel_1_2_1;
	private JLabel lblNewLabel_1_2_2;
	private JLabel lblNewLabel_1_2_3;
	private JLabel lblNewLabel_1_2_4;
	private JRadioButton rdbtnEasy;
	private JRadioButton rdbtnAverage;
	private JRadioButton rdbtnDifficult;
	private JButton btnStart; 
	private JLabel lblNewLabel;
	private JLabel lblNewLabel_2;
	private JLabel lblNewLabel_3;
	private JLabel lblNewLabel_4;
	private JTextField textField;
	private JButton btnNewButton_1;
	private JTextField textField1;
	private JButton btnNewButton_2;
	private JButton returnButton;

	private JTextField textField2;
	private JButton btnNewButton_3;
	int currentQuestionNumber = 1;
	int playerScore = 0;
	Random random = new Random();
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Main frame = new Main();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
	
	
	
	

	/**
	 * Create the frame.
	 */
	
	
	public int findIndex(char operand) {
		char[] operandOrder = {'-', '+', '/', '*'};
		int index = 0;
		
		for(int i = 0; i < operandOrder.length; i++) {
			if(operand == operandOrder[i]) index = i;
		}
		return index;
	}
	
	public double getResult(String question) {
		char[] questionData = question.toCharArray(); 
		
		char operand = questionData[1];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double result = 0;
		
		if(operand == '+') result = firstNumber + secondNumber;
		if(operand == '-') result = firstNumber - secondNumber;
		if(operand == '*') result = firstNumber * secondNumber;
		if(operand == '/') result = firstNumber / secondNumber;
		double roundedResult = Math.round(result);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	public double getResultAverage(String question) {
		char[] questionData = question.toCharArray(); 
		
		char firstOperand = questionData[1];
		char secondOperand = questionData[3];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double thirdNumber = Double.parseDouble(String.valueOf(questionData[4]));
		double result = 0;
		
		
		char[] operandOrder = {'-', '+', '/', '*'};
		int indexFirst = findIndex(firstOperand);
		int indexSecond = findIndex(secondOperand);
		double totalResult = 0;
		double initialResult = 0;
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+') initialResult = secondNumber + thirdNumber;
			if(secondOperand == '-') initialResult = secondNumber - thirdNumber;
			if(secondOperand == '*') initialResult = secondNumber * thirdNumber;
			if(secondOperand == '/') initialResult = secondNumber / thirdNumber;
			
			
		}
		else if (indexSecond < indexFirst) {
			if(firstOperand == '+') initialResult = firstNumber + secondNumber;
			if(firstOperand == '-') initialResult = firstNumber - secondNumber;
			if(firstOperand == '*') initialResult = firstNumber * secondNumber;
			if(firstOperand == '/') initialResult = firstNumber / secondNumber;
		}
		else {
			if(firstOperand == '+') totalResult = firstNumber + secondNumber + thirdNumber;
			if(firstOperand == '-') totalResult = firstNumber - secondNumber - thirdNumber;
			if(firstOperand == '*') totalResult = firstNumber * secondNumber * thirdNumber;
			if(firstOperand == '/') totalResult = firstNumber / secondNumber / thirdNumber;
		}
		
		
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+')  totalResult = firstNumber + thirdNumber;
			if(secondOperand == '-')  totalResult = firstNumber - thirdNumber;
			if(secondOperand == '*')  totalResult = firstNumber * thirdNumber;
			if(secondOperand == '/')  totalResult = firstNumber / thirdNumber;
			
			
		}
		
		else (indexSecond < indexFirst) {
			if(firstOperand == '+')  totalResult = initialResult + thirdNumber;
			if(firstOperand == '-')  totalResult = initialResult - thirdNumber;
			if(firstOperand == '*')  totalResult = initialResult * thirdNumber;
			if(firstOperand == '/')  totalResult = initialResult / thirdNumber;
		}
		
		
		
		
		
		double roundedResult = Math.round(totalResult);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	
	public String generateQuestion() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond];
		
		return question;
	}
	
	public String generateQuestionAverage() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexThird = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		int randomIndexOperand2 = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond] + operands[randomIndexOperand2] + numbers[randomIndexThird];
		System.out.println(question);
		return question;
	}
	
	
	public Main() {
		setIconImage(Toolkit.getDefaultToolkit().getImage("C:\\Users\\user\\Downloads\\quiz.png"));
		setTitle("QUIZ GAME");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(400, 100, 600, 600);
		contentPane = new JPanel();
		contentPane.setBackground(Color.WHITE);
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));

		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JPanel panel = new JPanel();
		panel.setBackground(Color.RED);
		panel.setBounds(10, 0, 564, 550);
		contentPane.add(panel);
		panel.setLayout(null);
		
		lblNewLabel_1_2_4 = new JLabel("quiz");
		lblNewLabel_1_2_4.setForeground(Color.WHITE);
		lblNewLabel_1_2_4.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_4.setBounds(140, 130, 561, 120);
		panel.add(lblNewLabel_1_2_4);
		
		lblNewLabel_1_2 = new JLabel("MATH");
		lblNewLabel_1_2.setForeground(Color.WHITE);
		lblNewLabel_1_2.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_2.setBounds(70, 50, 561, 120);
		panel.add(lblNewLabel_1_2);
		
		lblNewLabel_1 = new JLabel("MATH");
		lblNewLabel_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1.setForeground(Color.DARK_GRAY);
		lblNewLabel_1.setBounds(78, 50, 777, 120);
		panel.add(lblNewLabel_1);
		
		lblNewLabel_1_1 = new JLabel("MATH");
		lblNewLabel_1_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_1.setBounds(89, 50, 612, 120);
		panel.add(lblNewLabel_1_1);
		
		lblNewLabel_1_2_2 = new JLabel("quiz");
		lblNewLabel_1_2_2.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_2.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_2.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_2);
		
		lblNewLabel_1_2_1 = new JLabel("quiz");
		lblNewLabel_1_2_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_2_1.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_1.setBounds(159, 130, 561, 120);
		panel.add(lblNewLabel_1_2_1);
		
		lblNewLabel_1_2_3 = new JLabel("quiz");
		lblNewLabel_1_2_3.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_3.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_3.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_3);
		
		lblNewLabel = new JLabel("");
		lblNewLabel.setFont(new Font("Dialog", Font.BOLD, 9));
		lblNewLabel.setBounds(225, 428, 161, 14);
		panel.add(lblNewLabel);
		
		rdbtnEasy = new JRadioButton("EASY");
		rdbtnEasy.setForeground(Color.WHITE);
		rdbtnEasy.setBackground(Color.RED);
		rdbtnEasy.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnEasy.setBounds(215, 232, 269, 78);
		panel.add(rdbtnEasy);
		
		rdbtnAverage = new JRadioButton("AVERAGE");
		rdbtnAverage.setForeground(Color.WHITE);
		rdbtnAverage.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnAverage.setBackground(Color.RED);
		rdbtnAverage.setBounds(188, 290, 269, 73);
		panel.add(rdbtnAverage);
		
		rdbtnDifficult = new JRadioButton("DIFFICULT");
		rdbtnDifficult.setForeground(Color.WHITE);
		rdbtnDifficult.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnDifficult.setBackground(Color.RED);
		rdbtnDifficult.setBounds(176, 342, 269, 68);
		panel.add(rdbtnDifficult);
		
		ButtonGroup difficulty = new ButtonGroup();
		difficulty.add(rdbtnEasy);
		difficulty.add(rdbtnAverage);
		difficulty.add(rdbtnDifficult);
		
		btnStart = new JButton("START");
		
		
	
		
		btnStart.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
			if(rdbtnEasy.isSelected()){
				///////////
				
 				lblNewLabel_3.setText(generateQuestion());
 				
 				
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_1.setVisible(true);
				
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnAverage.isSelected()){
				
				lblNewLabel_3.setText(generateQuestionAverage());
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_2.setVisible(true);
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnDifficult.isSelected()){
				
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			}
		});
		btnStart.setBackground(Color.WHITE);
		btnStart.setForeground(Color.RED);
		btnStart.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnStart.setBounds(212, 453, 125, 43);
		panel.add(btnStart);
		
		lblNewLabel_2 = new JLabel("");
		lblNewLabel_2.setVisible(false);
		lblNewLabel_2.setForeground(Color.WHITE);
		lblNewLabel_2.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_2.setBounds(317, 90, 125, 129);
		panel.add(lblNewLabel_2);
		
		lblNewLabel_3 = new JLabel("");
		lblNewLabel_3.setVisible(false);
		lblNewLabel_3.setForeground(Color.WHITE);
		lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_3.setBounds(215, 90, 300, 200);
		panel.add(lblNewLabel_3);
		
		lblNewLabel_4 = new JLabel("");
		lblNewLabel_4.addMouseListener(new MouseAdapter() {
			public void mouseReleased(MouseEvent e) {
				
			}
		});
		lblNewLabel_4.setVisible(false);
		lblNewLabel_4.setForeground(Color.WHITE);
		lblNewLabel_4.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_4.setBounds(121, 90, 103, 129);
		panel.add(lblNewLabel_4);
				
		textField = new JTextField();
		textField.setHorizontalAlignment(SwingConstants.RIGHT);
		textField.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField.setVisible(false);
		textField.setBounds(121, 261, 324, 49);
		panel.add(textField);
		textField.setColumns(10);
		
		textField1 = new JTextField();
		textField1.setHorizontalAlignment(SwingConstants.RIGHT);
		textField1.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField1.setVisible(false);
		textField1.setBounds(121, 261, 324, 49);
		panel.add(textField1);
		textField1.setColumns(10);
		
		returnButton = new JButton("Return");
		returnButton.setVisible(false);
		returnButton.setFont(new Font("Tahoma", Font.BOLD, 20));
		returnButton.setForeground(Color.RED);
		returnButton.setBackground(Color.WHITE);
		returnButton.setBounds(225, 363, 126, 43);
		panel.add(returnButton);
		
		
		returnButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel.setVisible(true);
				rdbtnEasy.setVisible(true);
				rdbtnAverage.setVisible(true);
				rdbtnDifficult.setVisible(true);
				lblNewLabel_1_2_3.setVisible(true);
				lblNewLabel_1_2_1.setVisible(true);
				lblNewLabel_1_2_2.setVisible(true);
				lblNewLabel_1_1.setVisible(true);
				lblNewLabel_1.setVisible(true);
				lblNewLabel_1_2.setVisible(true);
				lblNewLabel_1_2_4.setVisible(true);
				btnStart.setVisible(true);
				returnButton.setVisible(false);
				lblNewLabel_3.setVisible(false);
				lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
			}

		
			
			
		});
		
		btnNewButton_1 = new JButton("SUBMIT");
		btnNewButton_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				
				
				double result = getResult(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
				
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
				
			}
		});
		btnNewButton_1.setVisible(false);
		btnNewButton_1.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_1.setForeground(Color.RED);
		btnNewButton_1.setBackground(Color.WHITE);
		btnNewButton_1.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_1);
		
		//Button 2
		btnNewButton_2 = new JButton("SUBMIT");
		btnNewButton_2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				double result = getResultAverage(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
			
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
			}
		});
		btnNewButton_2.setVisible(false);
		btnNewButton_2.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_2.setForeground(Color.RED);
		btnNewButton_2.setBackground(Color.WHITE);
		btnNewButton_2.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_2);
		
		
		textField2 = new JTextField();
		textField2.setHorizontalAlignment(SwingConstants.RIGHT);
		textField2.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField2.setVisible(false);
		textField2.setBounds(121, 261, 324, 49);
		panel.add(textField2);
		textField2.setColumns(10);
		
		btnNewButton_3 = new JButton("SUBMIT");
		btnNewButton_3.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel_2.setVisible(false);
				
				textField.setVisible(false);
				textField1.setVisible(false);
				btnNewButton_1.setVisible(false);
				btnNewButton_2.setVisible(false);
				
				textField2.setVisible(false);
				btnNewButton_3.setVisible(false);
				
				
				
			}
		});
		btnNewButton_3.setVisible(false);
		btnNewButton_3.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_3.setForeground(Color.RED);
		btnNewButton_3.setBackground(Color.WHITE);
		btnNewButton_3.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_3);
		
		
	}
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-04-30 17:34:27.309
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-04-30 17:34:27.310
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-30 17:34:27.564
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import java.awt.Color;
import java.awt.Toolkit;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

import java.awt.Font;
import javax.swing.JRadioButton;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Arrays;
import java.util.Random;


public class Main extends JFrame {

	private JPanel contentPane;
	private JLabel lblNewLabel_1_2;
	private JLabel lblNewLabel_1;
	private JLabel lblNewLabel_1_1; 
	private JLabel lblNewLabel_1_2_1;
	private JLabel lblNewLabel_1_2_2;
	private JLabel lblNewLabel_1_2_3;
	private JLabel lblNewLabel_1_2_4;
	private JRadioButton rdbtnEasy;
	private JRadioButton rdbtnAverage;
	private JRadioButton rdbtnDifficult;
	private JButton btnStart; 
	private JLabel lblNewLabel;
	private JLabel lblNewLabel_2;
	private JLabel lblNewLabel_3;
	private JLabel lblNewLabel_4;
	private JTextField textField;
	private JButton btnNewButton_1;
	private JTextField textField1;
	private JButton btnNewButton_2;
	private JButton returnButton;

	private JTextField textField2;
	private JButton btnNewButton_3;
	int currentQuestionNumber = 1;
	int playerScore = 0;
	Random random = new Random();
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Main frame = new Main();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
	
	
	
	

	/**
	 * Create the frame.
	 */
	
	
	public int findIndex(char operand) {
		char[] operandOrder = {'-', '+', '/', '*'};
		int index = 0;
		
		for(int i = 0; i < operandOrder.length; i++) {
			if(operand == operandOrder[i]) index = i;
		}
		return index;
	}
	
	public double getResult(String question) {
		char[] questionData = question.toCharArray(); 
		
		char operand = questionData[1];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double result = 0;
		
		if(operand == '+') result = firstNumber + secondNumber;
		if(operand == '-') result = firstNumber - secondNumber;
		if(operand == '*') result = firstNumber * secondNumber;
		if(operand == '/') result = firstNumber / secondNumber;
		double roundedResult = Math.round(result);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	public double getResultAverage(String question) {
		char[] questionData = question.toCharArray(); 
		
		char firstOperand = questionData[1];
		char secondOperand = questionData[3];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double thirdNumber = Double.parseDouble(String.valueOf(questionData[4]));
		double result = 0;
		
		
		char[] operandOrder = {'-', '+', '/', '*'};
		int indexFirst = findIndex(firstOperand);
		int indexSecond = findIndex(secondOperand);
		double totalResult = 0;
		double initialResult = 0;
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+') initialResult = secondNumber + thirdNumber;
			if(secondOperand == '-') initialResult = secondNumber - thirdNumber;
			if(secondOperand == '*') initialResult = secondNumber * thirdNumber;
			if(secondOperand == '/') initialResult = secondNumber / thirdNumber;
			
			
		}
		else if (indexSecond < indexFirst) {
			if(firstOperand == '+') initialResult = firstNumber + secondNumber;
			if(firstOperand == '-') initialResult = firstNumber - secondNumber;
			if(firstOperand == '*') initialResult = firstNumber * secondNumber;
			if(firstOperand == '/') initialResult = firstNumber / secondNumber;
		}
		else {
			if(firstOperand == '+') totalResult = firstNumber + secondNumber + thirdNumber;
			if(firstOperand == '-') totalResult = firstNumber - secondNumber - thirdNumber;
			if(firstOperand == '*') totalResult = firstNumber * secondNumber * thirdNumber;
			if(firstOperand == '/') totalResult = firstNumber / secondNumber / thirdNumber;
		}
		
		
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+')  totalResult = firstNumber + thirdNumber;
			if(secondOperand == '-')  totalResult = firstNumber - thirdNumber;
			if(secondOperand == '*')  totalResult = firstNumber * thirdNumber;
			if(secondOperand == '/')  totalResult = firstNumber / thirdNumber;
			
			
		}
		
		else (indexSecond < indexFirst) {
			if(firstOperand == '+')  totalResult = initialResult + thirdNumber;
			if(firstOperand == '-')  totalResult = initialResult - thirdNumber;
			if(firstOperand == '*')  totalResult = initialResult * thirdNumber;
			if(firstOperand == '/')  totalResult = initialResult / thirdNumber;
		}
		
		
		
		
		
		double roundedResult = Math.round(totalResult);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	
	public String generateQuestion() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond];
		
		return question;
	}
	
	public String generateQuestionAverage() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexThird = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		int randomIndexOperand2 = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond] + operands[randomIndexOperand2] + numbers[randomIndexThird];
		System.out.println(question);
		return question;
	}
	
	
	public Main() {
		setIconImage(Toolkit.getDefaultToolkit().getImage("C:\\Users\\user\\Downloads\\quiz.png"));
		setTitle("QUIZ GAME");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(400, 100, 600, 600);
		contentPane = new JPanel();
		contentPane.setBackground(Color.WHITE);
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));

		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JPanel panel = new JPanel();
		panel.setBackground(Color.RED);
		panel.setBounds(10, 0, 564, 550);
		contentPane.add(panel);
		panel.setLayout(null);
		
		lblNewLabel_1_2_4 = new JLabel("quiz");
		lblNewLabel_1_2_4.setForeground(Color.WHITE);
		lblNewLabel_1_2_4.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_4.setBounds(140, 130, 561, 120);
		panel.add(lblNewLabel_1_2_4);
		
		lblNewLabel_1_2 = new JLabel("MATH");
		lblNewLabel_1_2.setForeground(Color.WHITE);
		lblNewLabel_1_2.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_2.setBounds(70, 50, 561, 120);
		panel.add(lblNewLabel_1_2);
		
		lblNewLabel_1 = new JLabel("MATH");
		lblNewLabel_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1.setForeground(Color.DARK_GRAY);
		lblNewLabel_1.setBounds(78, 50, 777, 120);
		panel.add(lblNewLabel_1);
		
		lblNewLabel_1_1 = new JLabel("MATH");
		lblNewLabel_1_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_1.setBounds(89, 50, 612, 120);
		panel.add(lblNewLabel_1_1);
		
		lblNewLabel_1_2_2 = new JLabel("quiz");
		lblNewLabel_1_2_2.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_2.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_2.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_2);
		
		lblNewLabel_1_2_1 = new JLabel("quiz");
		lblNewLabel_1_2_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_2_1.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_1.setBounds(159, 130, 561, 120);
		panel.add(lblNewLabel_1_2_1);
		
		lblNewLabel_1_2_3 = new JLabel("quiz");
		lblNewLabel_1_2_3.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_3.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_3.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_3);
		
		lblNewLabel = new JLabel("");
		lblNewLabel.setFont(new Font("Dialog", Font.BOLD, 9));
		lblNewLabel.setBounds(225, 428, 161, 14);
		panel.add(lblNewLabel);
		
		rdbtnEasy = new JRadioButton("EASY");
		rdbtnEasy.setForeground(Color.WHITE);
		rdbtnEasy.setBackground(Color.RED);
		rdbtnEasy.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnEasy.setBounds(215, 232, 269, 78);
		panel.add(rdbtnEasy);
		
		rdbtnAverage = new JRadioButton("AVERAGE");
		rdbtnAverage.setForeground(Color.WHITE);
		rdbtnAverage.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnAverage.setBackground(Color.RED);
		rdbtnAverage.setBounds(188, 290, 269, 73);
		panel.add(rdbtnAverage);
		
		rdbtnDifficult = new JRadioButton("DIFFICULT");
		rdbtnDifficult.setForeground(Color.WHITE);
		rdbtnDifficult.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnDifficult.setBackground(Color.RED);
		rdbtnDifficult.setBounds(176, 342, 269, 68);
		panel.add(rdbtnDifficult);
		
		ButtonGroup difficulty = new ButtonGroup();
		difficulty.add(rdbtnEasy);
		difficulty.add(rdbtnAverage);
		difficulty.add(rdbtnDifficult);
		
		btnStart = new JButton("START");
		
		
	
		
		btnStart.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
			if(rdbtnEasy.isSelected()){
				///////////
				
 				lblNewLabel_3.setText(generateQuestion());
 				
 				
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_1.setVisible(true);
				
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnAverage.isSelected()){
				
				lblNewLabel_3.setText(generateQuestionAverage());
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_2.setVisible(true);
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnDifficult.isSelected()){
				
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			}
		});
		btnStart.setBackground(Color.WHITE);
		btnStart.setForeground(Color.RED);
		btnStart.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnStart.setBounds(212, 453, 125, 43);
		panel.add(btnStart);
		
		lblNewLabel_2 = new JLabel("");
		lblNewLabel_2.setVisible(false);
		lblNewLabel_2.setForeground(Color.WHITE);
		lblNewLabel_2.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_2.setBounds(317, 90, 125, 129);
		panel.add(lblNewLabel_2);
		
		lblNewLabel_3 = new JLabel("");
		lblNewLabel_3.setVisible(false);
		lblNewLabel_3.setForeground(Color.WHITE);
		lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_3.setBounds(215, 90, 300, 200);
		panel.add(lblNewLabel_3);
		
		lblNewLabel_4 = new JLabel("");
		lblNewLabel_4.addMouseListener(new MouseAdapter() {
			public void mouseReleased(MouseEvent e) {
				
			}
		});
		lblNewLabel_4.setVisible(false);
		lblNewLabel_4.setForeground(Color.WHITE);
		lblNewLabel_4.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_4.setBounds(121, 90, 103, 129);
		panel.add(lblNewLabel_4);
				
		textField = new JTextField();
		textField.setHorizontalAlignment(SwingConstants.RIGHT);
		textField.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField.setVisible(false);
		textField.setBounds(121, 261, 324, 49);
		panel.add(textField);
		textField.setColumns(10);
		
		textField1 = new JTextField();
		textField1.setHorizontalAlignment(SwingConstants.RIGHT);
		textField1.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField1.setVisible(false);
		textField1.setBounds(121, 261, 324, 49);
		panel.add(textField1);
		textField1.setColumns(10);
		
		returnButton = new JButton("Return");
		returnButton.setVisible(false);
		returnButton.setFont(new Font("Tahoma", Font.BOLD, 20));
		returnButton.setForeground(Color.RED);
		returnButton.setBackground(Color.WHITE);
		returnButton.setBounds(225, 363, 126, 43);
		panel.add(returnButton);
		
		
		returnButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel.setVisible(true);
				rdbtnEasy.setVisible(true);
				rdbtnAverage.setVisible(true);
				rdbtnDifficult.setVisible(true);
				lblNewLabel_1_2_3.setVisible(true);
				lblNewLabel_1_2_1.setVisible(true);
				lblNewLabel_1_2_2.setVisible(true);
				lblNewLabel_1_1.setVisible(true);
				lblNewLabel_1.setVisible(true);
				lblNewLabel_1_2.setVisible(true);
				lblNewLabel_1_2_4.setVisible(true);
				btnStart.setVisible(true);
				returnButton.setVisible(false);
				lblNewLabel_3.setVisible(false);
				lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
			}

		
			
			
		});
		
		btnNewButton_1 = new JButton("SUBMIT");
		btnNewButton_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				
				
				double result = getResult(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
				
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
				
			}
		});
		btnNewButton_1.setVisible(false);
		btnNewButton_1.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_1.setForeground(Color.RED);
		btnNewButton_1.setBackground(Color.WHITE);
		btnNewButton_1.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_1);
		
		//Button 2
		btnNewButton_2 = new JButton("SUBMIT");
		btnNewButton_2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				double result = getResultAverage(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
			
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
			}
		});
		btnNewButton_2.setVisible(false);
		btnNewButton_2.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_2.setForeground(Color.RED);
		btnNewButton_2.setBackground(Color.WHITE);
		btnNewButton_2.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_2);
		
		
		textField2 = new JTextField();
		textField2.setHorizontalAlignment(SwingConstants.RIGHT);
		textField2.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField2.setVisible(false);
		textField2.setBounds(121, 261, 324, 49);
		panel.add(textField2);
		textField2.setColumns(10);
		
		btnNewButton_3 = new JButton("SUBMIT");
		btnNewButton_3.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel_2.setVisible(false);
				
				textField.setVisible(false);
				textField1.setVisible(false);
				btnNewButton_1.setVisible(false);
				btnNewButton_2.setVisible(false);
				
				textField2.setVisible(false);
				btnNewButton_3.setVisible(false);
				
				
				
			}
		});
		btnNewButton_3.setVisible(false);
		btnNewButton_3.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_3.setForeground(Color.RED);
		btnNewButton_3.setBackground(Color.WHITE);
		btnNewButton_3.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_3);
		
		
	}
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-04-30 17:34:27.564
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-04-30 17:34:27.566
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-30 17:34:28.781
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import java.awt.Color;
import java.awt.Toolkit;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

import java.awt.Font;
import javax.swing.JRadioButton;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Arrays;
import java.util.Random;


public class Main extends JFrame {

	private JPanel contentPane;
	private JLabel lblNewLabel_1_2;
	private JLabel lblNewLabel_1;
	private JLabel lblNewLabel_1_1; 
	private JLabel lblNewLabel_1_2_1;
	private JLabel lblNewLabel_1_2_2;
	private JLabel lblNewLabel_1_2_3;
	private JLabel lblNewLabel_1_2_4;
	private JRadioButton rdbtnEasy;
	private JRadioButton rdbtnAverage;
	private JRadioButton rdbtnDifficult;
	private JButton btnStart; 
	private JLabel lblNewLabel;
	private JLabel lblNewLabel_2;
	private JLabel lblNewLabel_3;
	private JLabel lblNewLabel_4;
	private JTextField textField;
	private JButton btnNewButton_1;
	private JTextField textField1;
	private JButton btnNewButton_2;
	private JButton returnButton;

	private JTextField textField2;
	private JButton btnNewButton_3;
	int currentQuestionNumber = 1;
	int playerScore = 0;
	Random random = new Random();
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Main frame = new Main();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
	
	
	
	

	/**
	 * Create the frame.
	 */
	
	
	public int findIndex(char operand) {
		char[] operandOrder = {'-', '+', '/', '*'};
		int index = 0;
		
		for(int i = 0; i < operandOrder.length; i++) {
			if(operand == operandOrder[i]) index = i;
		}
		return index;
	}
	
	public double getResult(String question) {
		char[] questionData = question.toCharArray(); 
		
		char operand = questionData[1];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double result = 0;
		
		if(operand == '+') result = firstNumber + secondNumber;
		if(operand == '-') result = firstNumber - secondNumber;
		if(operand == '*') result = firstNumber * secondNumber;
		if(operand == '/') result = firstNumber / secondNumber;
		double roundedResult = Math.round(result);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	public double getResultAverage(String question) {
		char[] questionData = question.toCharArray(); 
		
		char firstOperand = questionData[1];
		char secondOperand = questionData[3];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double thirdNumber = Double.parseDouble(String.valueOf(questionData[4]));
		double result = 0;
		
		
		char[] operandOrder = {'-', '+', '/', '*'};
		int indexFirst = findIndex(firstOperand);
		int indexSecond = findIndex(secondOperand);
		double totalResult = 0;
		double initialResult = 0;
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+') initialResult = secondNumber + thirdNumber;
			if(secondOperand == '-') initialResult = secondNumber - thirdNumber;
			if(secondOperand == '*') initialResult = secondNumber * thirdNumber;
			if(secondOperand == '/') initialResult = secondNumber / thirdNumber;
			
			
		}
		else if (indexSecond < indexFirst) {
			if(firstOperand == '+') initialResult = firstNumber + secondNumber;
			if(firstOperand == '-') initialResult = firstNumber - secondNumber;
			if(firstOperand == '*') initialResult = firstNumber * secondNumber;
			if(firstOperand == '/') initialResult = firstNumber / secondNumber;
		}
		else {
			if(firstOperand == '+') totalResult = firstNumber + secondNumber + thirdNumber;
			if(firstOperand == '-') totalResult = firstNumber - secondNumber - thirdNumber;
			if(firstOperand == '*') totalResult = firstNumber * secondNumber * thirdNumber;
			if(firstOperand == '/') totalResult = firstNumber / secondNumber / thirdNumber;
		}
		
		
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+')  totalResult = firstNumber + thirdNumber;
			if(secondOperand == '-')  totalResult = firstNumber - thirdNumber;
			if(secondOperand == '*')  totalResult = firstNumber * thirdNumber;
			if(secondOperand == '/')  totalResult = firstNumber / thirdNumber;
			
			
		}
		
		else (indexSecond < indexFirst) {
			if(firstOperand == '+')  totalResult = initialResult + thirdNumber;
			if(firstOperand == '-')  totalResult = initialResult - thirdNumber;
			if(firstOperand == '*')  totalResult = initialResult * thirdNumber;
			if(firstOperand == '/')  totalResult = initialResult / thirdNumber;
		}
		
		
		
		
		
		double roundedResult = Math.round(totalResult);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	
	public String generateQuestion() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond];
		
		return question;
	}
	
	public String generateQuestionAverage() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexThird = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		int randomIndexOperand2 = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond] + operands[randomIndexOperand2] + numbers[randomIndexThird];
		System.out.println(question);
		return question;
	}
	
	
	public Main() {
		setIconImage(Toolkit.getDefaultToolkit().getImage("C:\\Users\\user\\Downloads\\quiz.png"));
		setTitle("QUIZ GAME");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(400, 100, 600, 600);
		contentPane = new JPanel();
		contentPane.setBackground(Color.WHITE);
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));

		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JPanel panel = new JPanel();
		panel.setBackground(Color.RED);
		panel.setBounds(10, 0, 564, 550);
		contentPane.add(panel);
		panel.setLayout(null);
		
		lblNewLabel_1_2_4 = new JLabel("quiz");
		lblNewLabel_1_2_4.setForeground(Color.WHITE);
		lblNewLabel_1_2_4.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_4.setBounds(140, 130, 561, 120);
		panel.add(lblNewLabel_1_2_4);
		
		lblNewLabel_1_2 = new JLabel("MATH");
		lblNewLabel_1_2.setForeground(Color.WHITE);
		lblNewLabel_1_2.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_2.setBounds(70, 50, 561, 120);
		panel.add(lblNewLabel_1_2);
		
		lblNewLabel_1 = new JLabel("MATH");
		lblNewLabel_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1.setForeground(Color.DARK_GRAY);
		lblNewLabel_1.setBounds(78, 50, 777, 120);
		panel.add(lblNewLabel_1);
		
		lblNewLabel_1_1 = new JLabel("MATH");
		lblNewLabel_1_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_1.setBounds(89, 50, 612, 120);
		panel.add(lblNewLabel_1_1);
		
		lblNewLabel_1_2_2 = new JLabel("quiz");
		lblNewLabel_1_2_2.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_2.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_2.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_2);
		
		lblNewLabel_1_2_1 = new JLabel("quiz");
		lblNewLabel_1_2_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_2_1.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_1.setBounds(159, 130, 561, 120);
		panel.add(lblNewLabel_1_2_1);
		
		lblNewLabel_1_2_3 = new JLabel("quiz");
		lblNewLabel_1_2_3.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_3.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_3.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_3);
		
		lblNewLabel = new JLabel("");
		lblNewLabel.setFont(new Font("Dialog", Font.BOLD, 9));
		lblNewLabel.setBounds(225, 428, 161, 14);
		panel.add(lblNewLabel);
		
		rdbtnEasy = new JRadioButton("EASY");
		rdbtnEasy.setForeground(Color.WHITE);
		rdbtnEasy.setBackground(Color.RED);
		rdbtnEasy.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnEasy.setBounds(215, 232, 269, 78);
		panel.add(rdbtnEasy);
		
		rdbtnAverage = new JRadioButton("AVERAGE");
		rdbtnAverage.setForeground(Color.WHITE);
		rdbtnAverage.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnAverage.setBackground(Color.RED);
		rdbtnAverage.setBounds(188, 290, 269, 73);
		panel.add(rdbtnAverage);
		
		rdbtnDifficult = new JRadioButton("DIFFICULT");
		rdbtnDifficult.setForeground(Color.WHITE);
		rdbtnDifficult.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnDifficult.setBackground(Color.RED);
		rdbtnDifficult.setBounds(176, 342, 269, 68);
		panel.add(rdbtnDifficult);
		
		ButtonGroup difficulty = new ButtonGroup();
		difficulty.add(rdbtnEasy);
		difficulty.add(rdbtnAverage);
		difficulty.add(rdbtnDifficult);
		
		btnStart = new JButton("START");
		
		
	
		
		btnStart.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
			if(rdbtnEasy.isSelected()){
				///////////
				
 				lblNewLabel_3.setText(generateQuestion());
 				
 				
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_1.setVisible(true);
				
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnAverage.isSelected()){
				
				lblNewLabel_3.setText(generateQuestionAverage());
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_2.setVisible(true);
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnDifficult.isSelected()){
				
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			}
		});
		btnStart.setBackground(Color.WHITE);
		btnStart.setForeground(Color.RED);
		btnStart.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnStart.setBounds(212, 453, 125, 43);
		panel.add(btnStart);
		
		lblNewLabel_2 = new JLabel("");
		lblNewLabel_2.setVisible(false);
		lblNewLabel_2.setForeground(Color.WHITE);
		lblNewLabel_2.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_2.setBounds(317, 90, 125, 129);
		panel.add(lblNewLabel_2);
		
		lblNewLabel_3 = new JLabel("");
		lblNewLabel_3.setVisible(false);
		lblNewLabel_3.setForeground(Color.WHITE);
		lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_3.setBounds(215, 90, 300, 200);
		panel.add(lblNewLabel_3);
		
		lblNewLabel_4 = new JLabel("");
		lblNewLabel_4.addMouseListener(new MouseAdapter() {
			public void mouseReleased(MouseEvent e) {
				
			}
		});
		lblNewLabel_4.setVisible(false);
		lblNewLabel_4.setForeground(Color.WHITE);
		lblNewLabel_4.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_4.setBounds(121, 90, 103, 129);
		panel.add(lblNewLabel_4);
				
		textField = new JTextField();
		textField.setHorizontalAlignment(SwingConstants.RIGHT);
		textField.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField.setVisible(false);
		textField.setBounds(121, 261, 324, 49);
		panel.add(textField);
		textField.setColumns(10);
		
		textField1 = new JTextField();
		textField1.setHorizontalAlignment(SwingConstants.RIGHT);
		textField1.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField1.setVisible(false);
		textField1.setBounds(121, 261, 324, 49);
		panel.add(textField1);
		textField1.setColumns(10);
		
		returnButton = new JButton("Return");
		returnButton.setVisible(false);
		returnButton.setFont(new Font("Tahoma", Font.BOLD, 20));
		returnButton.setForeground(Color.RED);
		returnButton.setBackground(Color.WHITE);
		returnButton.setBounds(225, 363, 126, 43);
		panel.add(returnButton);
		
		
		returnButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel.setVisible(true);
				rdbtnEasy.setVisible(true);
				rdbtnAverage.setVisible(true);
				rdbtnDifficult.setVisible(true);
				lblNewLabel_1_2_3.setVisible(true);
				lblNewLabel_1_2_1.setVisible(true);
				lblNewLabel_1_2_2.setVisible(true);
				lblNewLabel_1_1.setVisible(true);
				lblNewLabel_1.setVisible(true);
				lblNewLabel_1_2.setVisible(true);
				lblNewLabel_1_2_4.setVisible(true);
				btnStart.setVisible(true);
				returnButton.setVisible(false);
				lblNewLabel_3.setVisible(false);
				lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
			}

		
			
			
		});
		
		btnNewButton_1 = new JButton("SUBMIT");
		btnNewButton_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				
				
				double result = getResult(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
				
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
				
			}
		});
		btnNewButton_1.setVisible(false);
		btnNewButton_1.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_1.setForeground(Color.RED);
		btnNewButton_1.setBackground(Color.WHITE);
		btnNewButton_1.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_1);
		
		//Button 2
		btnNewButton_2 = new JButton("SUBMIT");
		btnNewButton_2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				double result = getResultAverage(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
			
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
			}
		});
		btnNewButton_2.setVisible(false);
		btnNewButton_2.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_2.setForeground(Color.RED);
		btnNewButton_2.setBackground(Color.WHITE);
		btnNewButton_2.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_2);
		
		
		textField2 = new JTextField();
		textField2.setHorizontalAlignment(SwingConstants.RIGHT);
		textField2.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField2.setVisible(false);
		textField2.setBounds(121, 261, 324, 49);
		panel.add(textField2);
		textField2.setColumns(10);
		
		btnNewButton_3 = new JButton("SUBMIT");
		btnNewButton_3.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel_2.setVisible(false);
				
				textField.setVisible(false);
				textField1.setVisible(false);
				btnNewButton_1.setVisible(false);
				btnNewButton_2.setVisible(false);
				
				textField2.setVisible(false);
				btnNewButton_3.setVisible(false);
				
				
				
			}
		});
		btnNewButton_3.setVisible(false);
		btnNewButton_3.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_3.setForeground(Color.RED);
		btnNewButton_3.setBackground(Color.WHITE);
		btnNewButton_3.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_3);
		
		
	}
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-04-30 17:34:28.782
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-04-30 17:34:28.782
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-30 17:34:35.285
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import java.awt.Color;
import java.awt.Toolkit;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

import java.awt.Font;
import javax.swing.JRadioButton;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Arrays;
import java.util.Random;


public class Main extends JFrame {

	private JPanel contentPane;
	private JLabel lblNewLabel_1_2;
	private JLabel lblNewLabel_1;
	private JLabel lblNewLabel_1_1; 
	private JLabel lblNewLabel_1_2_1;
	private JLabel lblNewLabel_1_2_2;
	private JLabel lblNewLabel_1_2_3;
	private JLabel lblNewLabel_1_2_4;
	private JRadioButton rdbtnEasy;
	private JRadioButton rdbtnAverage;
	private JRadioButton rdbtnDifficult;
	private JButton btnStart; 
	private JLabel lblNewLabel;
	private JLabel lblNewLabel_2;
	private JLabel lblNewLabel_3;
	private JLabel lblNewLabel_4;
	private JTextField textField;
	private JButton btnNewButton_1;
	private JTextField textField1;
	private JButton btnNewButton_2;
	private JButton returnButton;

	private JTextField textField2;
	private JButton btnNewButton_3;
	int currentQuestionNumber = 1;
	int playerScore = 0;
	Random random = new Random();
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Main frame = new Main();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
	
	
	
	

	/**
	 * Create the frame.
	 */
	
	
	public int findIndex(char operand) {
		char[] operandOrder = {'-', '+', '/', '*'};
		int index = 0;
		
		for(int i = 0; i < operandOrder.length; i++) {
			if(operand == operandOrder[i]) index = i;
		}
		return index;
	}
	
	public double getResult(String question) {
		char[] questionData = question.toCharArray(); 
		
		char operand = questionData[1];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double result = 0;
		
		if(operand == '+') result = firstNumber + secondNumber;
		if(operand == '-') result = firstNumber - secondNumber;
		if(operand == '*') result = firstNumber * secondNumber;
		if(operand == '/') result = firstNumber / secondNumber;
		double roundedResult = Math.round(result);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	public double getResultAverage(String question) {
		char[] questionData = question.toCharArray(); 
		
		char firstOperand = questionData[1];
		char secondOperand = questionData[3];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double thirdNumber = Double.parseDouble(String.valueOf(questionData[4]));
		double result = 0;
		
		
		char[] operandOrder = {'-', '+', '/', '*'};
		int indexFirst = findIndex(firstOperand);
		int indexSecond = findIndex(secondOperand);
		double totalResult = 0;
		double initialResult = 0;
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+') initialResult = secondNumber + thirdNumber;
			if(secondOperand == '-') initialResult = secondNumber - thirdNumber;
			if(secondOperand == '*') initialResult = secondNumber * thirdNumber;
			if(secondOperand == '/') initialResult = secondNumber / thirdNumber;
			
			
		}
		else if (indexSecond < indexFirst) {
			if(firstOperand == '+') initialResult = firstNumber + secondNumber;
			if(firstOperand == '-') initialResult = firstNumber - secondNumber;
			if(firstOperand == '*') initialResult = firstNumber * secondNumber;
			if(firstOperand == '/') initialResult = firstNumber / secondNumber;
		}
		else {
			if(firstOperand == '+') totalResult = firstNumber + secondNumber + thirdNumber;
			if(firstOperand == '-') totalResult = firstNumber - secondNumber - thirdNumber;
			if(firstOperand == '*') totalResult = firstNumber * secondNumber * thirdNumber;
			if(firstOperand == '/') totalResult = firstNumber / secondNumber / thirdNumber;
		}
		
		
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+')  totalResult = firstNumber + thirdNumber;
			if(secondOperand == '-')  totalResult = firstNumber - thirdNumber;
			if(secondOperand == '*')  totalResult = firstNumber * thirdNumber;
			if(secondOperand == '/')  totalResult = firstNumber / thirdNumber;
			
			
		}
		
		else (indexSecond < indexFirst) {
			if(firstOperand == '+')  totalResult = initialResult + thirdNumber;
			if(firstOperand == '-')  totalResult = initialResult - thirdNumber;
			if(firstOperand == '*')  totalResult = initialResult * thirdNumber;
			if(firstOperand == '/')  totalResult = initialResult / thirdNumber;
		}
		
		
		
		
		
		double roundedResult = Math.round(totalResult);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	
	public String generateQuestion() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond];
		
		return question;
	}
	
	public String generateQuestionAverage() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexThird = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		int randomIndexOperand2 = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond] + operands[randomIndexOperand2] + numbers[randomIndexThird];
		System.out.println(question);
		return question;
	}
	
	
	public Main() {
		setIconImage(Toolkit.getDefaultToolkit().getImage("C:\\Users\\user\\Downloads\\quiz.png"));
		setTitle("QUIZ GAME");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(400, 100, 600, 600);
		contentPane = new JPanel();
		contentPane.setBackground(Color.WHITE);
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));

		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JPanel panel = new JPanel();
		panel.setBackground(Color.RED);
		panel.setBounds(10, 0, 564, 550);
		contentPane.add(panel);
		panel.setLayout(null);
		
		lblNewLabel_1_2_4 = new JLabel("quiz");
		lblNewLabel_1_2_4.setForeground(Color.WHITE);
		lblNewLabel_1_2_4.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_4.setBounds(140, 130, 561, 120);
		panel.add(lblNewLabel_1_2_4);
		
		lblNewLabel_1_2 = new JLabel("MATH");
		lblNewLabel_1_2.setForeground(Color.WHITE);
		lblNewLabel_1_2.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_2.setBounds(70, 50, 561, 120);
		panel.add(lblNewLabel_1_2);
		
		lblNewLabel_1 = new JLabel("MATH");
		lblNewLabel_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1.setForeground(Color.DARK_GRAY);
		lblNewLabel_1.setBounds(78, 50, 777, 120);
		panel.add(lblNewLabel_1);
		
		lblNewLabel_1_1 = new JLabel("MATH");
		lblNewLabel_1_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_1.setBounds(89, 50, 612, 120);
		panel.add(lblNewLabel_1_1);
		
		lblNewLabel_1_2_2 = new JLabel("quiz");
		lblNewLabel_1_2_2.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_2.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_2.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_2);
		
		lblNewLabel_1_2_1 = new JLabel("quiz");
		lblNewLabel_1_2_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_2_1.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_1.setBounds(159, 130, 561, 120);
		panel.add(lblNewLabel_1_2_1);
		
		lblNewLabel_1_2_3 = new JLabel("quiz");
		lblNewLabel_1_2_3.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_3.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_3.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_3);
		
		lblNewLabel = new JLabel("");
		lblNewLabel.setFont(new Font("Dialog", Font.BOLD, 9));
		lblNewLabel.setBounds(225, 428, 161, 14);
		panel.add(lblNewLabel);
		
		rdbtnEasy = new JRadioButton("EASY");
		rdbtnEasy.setForeground(Color.WHITE);
		rdbtnEasy.setBackground(Color.RED);
		rdbtnEasy.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnEasy.setBounds(215, 232, 269, 78);
		panel.add(rdbtnEasy);
		
		rdbtnAverage = new JRadioButton("AVERAGE");
		rdbtnAverage.setForeground(Color.WHITE);
		rdbtnAverage.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnAverage.setBackground(Color.RED);
		rdbtnAverage.setBounds(188, 290, 269, 73);
		panel.add(rdbtnAverage);
		
		rdbtnDifficult = new JRadioButton("DIFFICULT");
		rdbtnDifficult.setForeground(Color.WHITE);
		rdbtnDifficult.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnDifficult.setBackground(Color.RED);
		rdbtnDifficult.setBounds(176, 342, 269, 68);
		panel.add(rdbtnDifficult);
		
		ButtonGroup difficulty = new ButtonGroup();
		difficulty.add(rdbtnEasy);
		difficulty.add(rdbtnAverage);
		difficulty.add(rdbtnDifficult);
		
		btnStart = new JButton("START");
		
		
	
		
		btnStart.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
			if(rdbtnEasy.isSelected()){
				///////////
				
 				lblNewLabel_3.setText(generateQuestion());
 				
 				
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_1.setVisible(true);
				
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnAverage.isSelected()){
				
				lblNewLabel_3.setText(generateQuestionAverage());
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_2.setVisible(true);
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnDifficult.isSelected()){
				
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			}
		});
		btnStart.setBackground(Color.WHITE);
		btnStart.setForeground(Color.RED);
		btnStart.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnStart.setBounds(212, 453, 125, 43);
		panel.add(btnStart);
		
		lblNewLabel_2 = new JLabel("");
		lblNewLabel_2.setVisible(false);
		lblNewLabel_2.setForeground(Color.WHITE);
		lblNewLabel_2.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_2.setBounds(317, 90, 125, 129);
		panel.add(lblNewLabel_2);
		
		lblNewLabel_3 = new JLabel("");
		lblNewLabel_3.setVisible(false);
		lblNewLabel_3.setForeground(Color.WHITE);
		lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_3.setBounds(215, 90, 300, 200);
		panel.add(lblNewLabel_3);
		
		lblNewLabel_4 = new JLabel("");
		lblNewLabel_4.addMouseListener(new MouseAdapter() {
			public void mouseReleased(MouseEvent e) {
				
			}
		});
		lblNewLabel_4.setVisible(false);
		lblNewLabel_4.setForeground(Color.WHITE);
		lblNewLabel_4.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_4.setBounds(121, 90, 103, 129);
		panel.add(lblNewLabel_4);
				
		textField = new JTextField();
		textField.setHorizontalAlignment(SwingConstants.RIGHT);
		textField.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField.setVisible(false);
		textField.setBounds(121, 261, 324, 49);
		panel.add(textField);
		textField.setColumns(10);
		
		textField1 = new JTextField();
		textField1.setHorizontalAlignment(SwingConstants.RIGHT);
		textField1.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField1.setVisible(false);
		textField1.setBounds(121, 261, 324, 49);
		panel.add(textField1);
		textField1.setColumns(10);
		
		returnButton = new JButton("Return");
		returnButton.setVisible(false);
		returnButton.setFont(new Font("Tahoma", Font.BOLD, 20));
		returnButton.setForeground(Color.RED);
		returnButton.setBackground(Color.WHITE);
		returnButton.setBounds(225, 363, 126, 43);
		panel.add(returnButton);
		
		
		returnButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel.setVisible(true);
				rdbtnEasy.setVisible(true);
				rdbtnAverage.setVisible(true);
				rdbtnDifficult.setVisible(true);
				lblNewLabel_1_2_3.setVisible(true);
				lblNewLabel_1_2_1.setVisible(true);
				lblNewLabel_1_2_2.setVisible(true);
				lblNewLabel_1_1.setVisible(true);
				lblNewLabel_1.setVisible(true);
				lblNewLabel_1_2.setVisible(true);
				lblNewLabel_1_2_4.setVisible(true);
				btnStart.setVisible(true);
				returnButton.setVisible(false);
				lblNewLabel_3.setVisible(false);
				lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
			}

		
			
			
		});
		
		btnNewButton_1 = new JButton("SUBMIT");
		btnNewButton_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				
				
				double result = getResult(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
				
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
				
			}
		});
		btnNewButton_1.setVisible(false);
		btnNewButton_1.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_1.setForeground(Color.RED);
		btnNewButton_1.setBackground(Color.WHITE);
		btnNewButton_1.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_1);
		
		//Button 2
		btnNewButton_2 = new JButton("SUBMIT");
		btnNewButton_2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				double result = getResultAverage(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
			
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
			}
		});
		btnNewButton_2.setVisible(false);
		btnNewButton_2.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_2.setForeground(Color.RED);
		btnNewButton_2.setBackground(Color.WHITE);
		btnNewButton_2.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_2);
		
		
		textField2 = new JTextField();
		textField2.setHorizontalAlignment(SwingConstants.RIGHT);
		textField2.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField2.setVisible(false);
		textField2.setBounds(121, 261, 324, 49);
		panel.add(textField2);
		textField2.setColumns(10);
		
		btnNewButton_3 = new JButton("SUBMIT");
		btnNewButton_3.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel_2.setVisible(false);
				
				textField.setVisible(false);
				textField1.setVisible(false);
				btnNewButton_1.setVisible(false);
				btnNewButton_2.setVisible(false);
				
				textField2.setVisible(false);
				btnNewButton_3.setVisible(false);
				
				
				
			}
		});
		btnNewButton_3.setVisible(false);
		btnNewButton_3.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_3.setForeground(Color.RED);
		btnNewButton_3.setBackground(Color.WHITE);
		btnNewButton_3.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_3);
		
		
	}
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-04-30 17:34:35.286
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-04-30 17:34:35.287
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-30 17:34:38.491
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import java.awt.Color;
import java.awt.Toolkit;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

import java.awt.Font;
import javax.swing.JRadioButton;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Arrays;
import java.util.Random;


public class Main extends JFrame {

	private JPanel contentPane;
	private JLabel lblNewLabel_1_2;
	private JLabel lblNewLabel_1;
	private JLabel lblNewLabel_1_1; 
	private JLabel lblNewLabel_1_2_1;
	private JLabel lblNewLabel_1_2_2;
	private JLabel lblNewLabel_1_2_3;
	private JLabel lblNewLabel_1_2_4;
	private JRadioButton rdbtnEasy;
	private JRadioButton rdbtnAverage;
	private JRadioButton rdbtnDifficult;
	private JButton btnStart; 
	private JLabel lblNewLabel;
	private JLabel lblNewLabel_2;
	private JLabel lblNewLabel_3;
	private JLabel lblNewLabel_4;
	private JTextField textField;
	private JButton btnNewButton_1;
	private JTextField textField1;
	private JButton btnNewButton_2;
	private JButton returnButton;

	private JTextField textField2;
	private JButton btnNewButton_3;
	int currentQuestionNumber = 1;
	int playerScore = 0;
	Random random = new Random();
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Main frame = new Main();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
	
	
	
	

	/**
	 * Create the frame.
	 */
	
	
	public int findIndex(char operand) {
		char[] operandOrder = {'-', '+', '/', '*'};
		int index = 0;
		
		for(int i = 0; i < operandOrder.length; i++) {
			if(operand == operandOrder[i]) index = i;
		}
		return index;
	}
	
	public double getResult(String question) {
		char[] questionData = question.toCharArray(); 
		
		char operand = questionData[1];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double result = 0;
		
		if(operand == '+') result = firstNumber + secondNumber;
		if(operand == '-') result = firstNumber - secondNumber;
		if(operand == '*') result = firstNumber * secondNumber;
		if(operand == '/') result = firstNumber / secondNumber;
		double roundedResult = Math.round(result);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	public double getResultAverage(String question) {
		char[] questionData = question.toCharArray(); 
		
		char firstOperand = questionData[1];
		char secondOperand = questionData[3];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double thirdNumber = Double.parseDouble(String.valueOf(questionData[4]));
		double result = 0;
		
		
		char[] operandOrder = {'-', '+', '/', '*'};
		int indexFirst = findIndex(firstOperand);
		int indexSecond = findIndex(secondOperand);
		double totalResult = 0;
		double initialResult = 0;
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+') initialResult = secondNumber + thirdNumber;
			if(secondOperand == '-') initialResult = secondNumber - thirdNumber;
			if(secondOperand == '*') initialResult = secondNumber * thirdNumber;
			if(secondOperand == '/') initialResult = secondNumber / thirdNumber;
			
			
		}
		else if (indexSecond < indexFirst) {
			if(firstOperand == '+') initialResult = firstNumber + secondNumber;
			if(firstOperand == '-') initialResult = firstNumber - secondNumber;
			if(firstOperand == '*') initialResult = firstNumber * secondNumber;
			if(firstOperand == '/') initialResult = firstNumber / secondNumber;
		}
		else {
			if(firstOperand == '+') totalResult = firstNumber + secondNumber + thirdNumber;
			if(firstOperand == '-') totalResult = firstNumber - secondNumber - thirdNumber;
			if(firstOperand == '*') totalResult = firstNumber * secondNumber * thirdNumber;
			if(firstOperand == '/') totalResult = firstNumber / secondNumber / thirdNumber;
		}
		
		
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+')  totalResult = firstNumber + thirdNumber;
			if(secondOperand == '-')  totalResult = firstNumber - thirdNumber;
			if(secondOperand == '*')  totalResult = firstNumber * thirdNumber;
			if(secondOperand == '/')  totalResult = firstNumber / thirdNumber;
			
			
		}
		
		else (indexSecond < indexFirst) {
			if(firstOperand == '+')  totalResult = initialResult + thirdNumber;
			if(firstOperand == '-')  totalResult = initialResult - thirdNumber;
			if(firstOperand == '*')  totalResult = initialResult * thirdNumber;
			if(firstOperand == '/')  totalResult = initialResult / thirdNumber;
		}
		
		
		
		
		
		double roundedResult = Math.round(totalResult);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	
	public String generateQuestion() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond];
		
		return question;
	}
	
	public String generateQuestionAverage() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexThird = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		int randomIndexOperand2 = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond] + operands[randomIndexOperand2] + numbers[randomIndexThird];
		System.out.println(question);
		return question;
	}
	
	
	public Main() {
		setIconImage(Toolkit.getDefaultToolkit().getImage("C:\\Users\\user\\Downloads\\quiz.png"));
		setTitle("QUIZ GAME");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(400, 100, 600, 600);
		contentPane = new JPanel();
		contentPane.setBackground(Color.WHITE);
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));

		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JPanel panel = new JPanel();
		panel.setBackground(Color.RED);
		panel.setBounds(10, 0, 564, 550);
		contentPane.add(panel);
		panel.setLayout(null);
		
		lblNewLabel_1_2_4 = new JLabel("quiz");
		lblNewLabel_1_2_4.setForeground(Color.WHITE);
		lblNewLabel_1_2_4.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_4.setBounds(140, 130, 561, 120);
		panel.add(lblNewLabel_1_2_4);
		
		lblNewLabel_1_2 = new JLabel("MATH");
		lblNewLabel_1_2.setForeground(Color.WHITE);
		lblNewLabel_1_2.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_2.setBounds(70, 50, 561, 120);
		panel.add(lblNewLabel_1_2);
		
		lblNewLabel_1 = new JLabel("MATH");
		lblNewLabel_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1.setForeground(Color.DARK_GRAY);
		lblNewLabel_1.setBounds(78, 50, 777, 120);
		panel.add(lblNewLabel_1);
		
		lblNewLabel_1_1 = new JLabel("MATH");
		lblNewLabel_1_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_1.setBounds(89, 50, 612, 120);
		panel.add(lblNewLabel_1_1);
		
		lblNewLabel_1_2_2 = new JLabel("quiz");
		lblNewLabel_1_2_2.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_2.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_2.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_2);
		
		lblNewLabel_1_2_1 = new JLabel("quiz");
		lblNewLabel_1_2_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_2_1.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_1.setBounds(159, 130, 561, 120);
		panel.add(lblNewLabel_1_2_1);
		
		lblNewLabel_1_2_3 = new JLabel("quiz");
		lblNewLabel_1_2_3.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_3.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_3.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_3);
		
		lblNewLabel = new JLabel("");
		lblNewLabel.setFont(new Font("Dialog", Font.BOLD, 9));
		lblNewLabel.setBounds(225, 428, 161, 14);
		panel.add(lblNewLabel);
		
		rdbtnEasy = new JRadioButton("EASY");
		rdbtnEasy.setForeground(Color.WHITE);
		rdbtnEasy.setBackground(Color.RED);
		rdbtnEasy.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnEasy.setBounds(215, 232, 269, 78);
		panel.add(rdbtnEasy);
		
		rdbtnAverage = new JRadioButton("AVERAGE");
		rdbtnAverage.setForeground(Color.WHITE);
		rdbtnAverage.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnAverage.setBackground(Color.RED);
		rdbtnAverage.setBounds(188, 290, 269, 73);
		panel.add(rdbtnAverage);
		
		rdbtnDifficult = new JRadioButton("DIFFICULT");
		rdbtnDifficult.setForeground(Color.WHITE);
		rdbtnDifficult.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnDifficult.setBackground(Color.RED);
		rdbtnDifficult.setBounds(176, 342, 269, 68);
		panel.add(rdbtnDifficult);
		
		ButtonGroup difficulty = new ButtonGroup();
		difficulty.add(rdbtnEasy);
		difficulty.add(rdbtnAverage);
		difficulty.add(rdbtnDifficult);
		
		btnStart = new JButton("START");
		
		
	
		
		btnStart.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
			if(rdbtnEasy.isSelected()){
				///////////
				
 				lblNewLabel_3.setText(generateQuestion());
 				
 				
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_1.setVisible(true);
				
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnAverage.isSelected()){
				
				lblNewLabel_3.setText(generateQuestionAverage());
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_2.setVisible(true);
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnDifficult.isSelected()){
				
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			}
		});
		btnStart.setBackground(Color.WHITE);
		btnStart.setForeground(Color.RED);
		btnStart.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnStart.setBounds(212, 453, 125, 43);
		panel.add(btnStart);
		
		lblNewLabel_2 = new JLabel("");
		lblNewLabel_2.setVisible(false);
		lblNewLabel_2.setForeground(Color.WHITE);
		lblNewLabel_2.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_2.setBounds(317, 90, 125, 129);
		panel.add(lblNewLabel_2);
		
		lblNewLabel_3 = new JLabel("");
		lblNewLabel_3.setVisible(false);
		lblNewLabel_3.setForeground(Color.WHITE);
		lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_3.setBounds(215, 90, 300, 200);
		panel.add(lblNewLabel_3);
		
		lblNewLabel_4 = new JLabel("");
		lblNewLabel_4.addMouseListener(new MouseAdapter() {
			public void mouseReleased(MouseEvent e) {
				
			}
		});
		lblNewLabel_4.setVisible(false);
		lblNewLabel_4.setForeground(Color.WHITE);
		lblNewLabel_4.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_4.setBounds(121, 90, 103, 129);
		panel.add(lblNewLabel_4);
				
		textField = new JTextField();
		textField.setHorizontalAlignment(SwingConstants.RIGHT);
		textField.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField.setVisible(false);
		textField.setBounds(121, 261, 324, 49);
		panel.add(textField);
		textField.setColumns(10);
		
		textField1 = new JTextField();
		textField1.setHorizontalAlignment(SwingConstants.RIGHT);
		textField1.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField1.setVisible(false);
		textField1.setBounds(121, 261, 324, 49);
		panel.add(textField1);
		textField1.setColumns(10);
		
		returnButton = new JButton("Return");
		returnButton.setVisible(false);
		returnButton.setFont(new Font("Tahoma", Font.BOLD, 20));
		returnButton.setForeground(Color.RED);
		returnButton.setBackground(Color.WHITE);
		returnButton.setBounds(225, 363, 126, 43);
		panel.add(returnButton);
		
		
		returnButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel.setVisible(true);
				rdbtnEasy.setVisible(true);
				rdbtnAverage.setVisible(true);
				rdbtnDifficult.setVisible(true);
				lblNewLabel_1_2_3.setVisible(true);
				lblNewLabel_1_2_1.setVisible(true);
				lblNewLabel_1_2_2.setVisible(true);
				lblNewLabel_1_1.setVisible(true);
				lblNewLabel_1.setVisible(true);
				lblNewLabel_1_2.setVisible(true);
				lblNewLabel_1_2_4.setVisible(true);
				btnStart.setVisible(true);
				returnButton.setVisible(false);
				lblNewLabel_3.setVisible(false);
				lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
			}

		
			
			
		});
		
		btnNewButton_1 = new JButton("SUBMIT");
		btnNewButton_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				
				
				double result = getResult(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
				
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
				
			}
		});
		btnNewButton_1.setVisible(false);
		btnNewButton_1.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_1.setForeground(Color.RED);
		btnNewButton_1.setBackground(Color.WHITE);
		btnNewButton_1.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_1);
		
		//Button 2
		btnNewButton_2 = new JButton("SUBMIT");
		btnNewButton_2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				double result = getResultAverage(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
			
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
			}
		});
		btnNewButton_2.setVisible(false);
		btnNewButton_2.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_2.setForeground(Color.RED);
		btnNewButton_2.setBackground(Color.WHITE);
		btnNewButton_2.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_2);
		
		
		textField2 = new JTextField();
		textField2.setHorizontalAlignment(SwingConstants.RIGHT);
		textField2.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField2.setVisible(false);
		textField2.setBounds(121, 261, 324, 49);
		panel.add(textField2);
		textField2.setColumns(10);
		
		btnNewButton_3 = new JButton("SUBMIT");
		btnNewButton_3.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel_2.setVisible(false);
				
				textField.setVisible(false);
				textField1.setVisible(false);
				btnNewButton_1.setVisible(false);
				btnNewButton_2.setVisible(false);
				
				textField2.setVisible(false);
				btnNewButton_3.setVisible(false);
				
				
				
			}
		});
		btnNewButton_3.setVisible(false);
		btnNewButton_3.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_3.setForeground(Color.RED);
		btnNewButton_3.setBackground(Color.WHITE);
		btnNewButton_3.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_3);
		
		
	}
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.getClipboardData(ClipboardOperationAction.java:479)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.doCutCopyWithImportsOperation(ClipboardOperationAction.java:406)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.internalDoOperation(ClipboardOperationAction.java:365)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:74)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.run(ClipboardOperationAction.java:286)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:474)
	at org.eclipse.jface.commands.ActionHandler.execute(ActionHandler.java:121)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at jdk.internal.reflect.GeneratedMethodAccessor49.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:251)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:485)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:647)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1262)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1065)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1090)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1075)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1117)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1113)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1542)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4868)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4746)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5026)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3643)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-04-30 17:34:38.491
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.getClipboardData(ClipboardOperationAction.java:479)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.doCutCopyWithImportsOperation(ClipboardOperationAction.java:406)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.internalDoOperation(ClipboardOperationAction.java:365)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:74)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.run(ClipboardOperationAction.java:286)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:474)
	at org.eclipse.jface.commands.ActionHandler.execute(ActionHandler.java:121)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at jdk.internal.reflect.GeneratedMethodAccessor49.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:251)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:485)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:647)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1262)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1065)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1090)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1075)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1117)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1113)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1542)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4868)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4746)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5026)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3643)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-04-30 17:34:38.492
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.getClipboardData(ClipboardOperationAction.java:479)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.doCutCopyWithImportsOperation(ClipboardOperationAction.java:406)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.internalDoOperation(ClipboardOperationAction.java:365)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:74)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.run(ClipboardOperationAction.java:286)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:474)
	at org.eclipse.jface.commands.ActionHandler.execute(ActionHandler.java:121)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at jdk.internal.reflect.GeneratedMethodAccessor49.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:251)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:485)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:647)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1262)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1065)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1090)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1075)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1117)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1113)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1542)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4868)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4746)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5026)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3643)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-30 17:34:39.015
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import java.awt.Color;
import java.awt.Toolkit;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

import java.awt.Font;
import javax.swing.JRadioButton;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Arrays;
import java.util.Random;


public class Main extends JFrame {

	private JPanel contentPane;
	private JLabel lblNewLabel_1_2;
	private JLabel lblNewLabel_1;
	private JLabel lblNewLabel_1_1; 
	private JLabel lblNewLabel_1_2_1;
	private JLabel lblNewLabel_1_2_2;
	private JLabel lblNewLabel_1_2_3;
	private JLabel lblNewLabel_1_2_4;
	private JRadioButton rdbtnEasy;
	private JRadioButton rdbtnAverage;
	private JRadioButton rdbtnDifficult;
	private JButton btnStart; 
	private JLabel lblNewLabel;
	private JLabel lblNewLabel_2;
	private JLabel lblNewLabel_3;
	private JLabel lblNewLabel_4;
	private JTextField textField;
	private JButton btnNewButton_1;
	private JTextField textField1;
	private JButton btnNewButton_2;
	private JButton returnButton;

	private JTextField textField2;
	private JButton btnNewButton_3;
	int currentQuestionNumber = 1;
	int playerScore = 0;
	Random random = new Random();
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Main frame = new Main();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
	
	
	
	

	/**
	 * Create the frame.
	 */
	
	
	public int findIndex(char operand) {
		char[] operandOrder = {'-', '+', '/', '*'};
		int index = 0;
		
		for(int i = 0; i < operandOrder.length; i++) {
			if(operand == operandOrder[i]) index = i;
		}
		return index;
	}
	
	public double getResult(String question) {
		char[] questionData = question.toCharArray(); 
		
		char operand = questionData[1];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double result = 0;
		
		if(operand == '+') result = firstNumber + secondNumber;
		if(operand == '-') result = firstNumber - secondNumber;
		if(operand == '*') result = firstNumber * secondNumber;
		if(operand == '/') result = firstNumber / secondNumber;
		double roundedResult = Math.round(result);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	public double getResultAverage(String question) {
		char[] questionData = question.toCharArray(); 
		
		char firstOperand = questionData[1];
		char secondOperand = questionData[3];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double thirdNumber = Double.parseDouble(String.valueOf(questionData[4]));
		double result = 0;
		
		
		char[] operandOrder = {'-', '+', '/', '*'};
		int indexFirst = findIndex(firstOperand);
		int indexSecond = findIndex(secondOperand);
		double totalResult = 0;
		double initialResult = 0;
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+') initialResult = secondNumber + thirdNumber;
			if(secondOperand == '-') initialResult = secondNumber - thirdNumber;
			if(secondOperand == '*') initialResult = secondNumber * thirdNumber;
			if(secondOperand == '/') initialResult = secondNumber / thirdNumber;
			
			
		}
		else if (indexSecond < indexFirst) {
			if(firstOperand == '+') initialResult = firstNumber + secondNumber;
			if(firstOperand == '-') initialResult = firstNumber - secondNumber;
			if(firstOperand == '*') initialResult = firstNumber * secondNumber;
			if(firstOperand == '/') initialResult = firstNumber / secondNumber;
		}
		
		
		
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+')  totalResult = firstNumber + thirdNumber;
			if(secondOperand == '-')  totalResult = firstNumber - thirdNumber;
			if(secondOperand == '*')  totalResult = firstNumber * thirdNumber;
			if(secondOperand == '/')  totalResult = firstNumber / thirdNumber;
			
			
		}
		
		else (indexSecond < indexFirst) {
			if(firstOperand == '+')  totalResult = initialResult + thirdNumber;
			if(firstOperand == '-')  totalResult = initialResult - thirdNumber;
			if(firstOperand == '*')  totalResult = initialResult * thirdNumber;
			if(firstOperand == '/')  totalResult = initialResult / thirdNumber;
		}
		
		
		
		
		
		double roundedResult = Math.round(totalResult);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	
	public String generateQuestion() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond];
		
		return question;
	}
	
	public String generateQuestionAverage() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexThird = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		int randomIndexOperand2 = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond] + operands[randomIndexOperand2] + numbers[randomIndexThird];
		System.out.println(question);
		return question;
	}
	
	
	public Main() {
		setIconImage(Toolkit.getDefaultToolkit().getImage("C:\\Users\\user\\Downloads\\quiz.png"));
		setTitle("QUIZ GAME");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(400, 100, 600, 600);
		contentPane = new JPanel();
		contentPane.setBackground(Color.WHITE);
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));

		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JPanel panel = new JPanel();
		panel.setBackground(Color.RED);
		panel.setBounds(10, 0, 564, 550);
		contentPane.add(panel);
		panel.setLayout(null);
		
		lblNewLabel_1_2_4 = new JLabel("quiz");
		lblNewLabel_1_2_4.setForeground(Color.WHITE);
		lblNewLabel_1_2_4.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_4.setBounds(140, 130, 561, 120);
		panel.add(lblNewLabel_1_2_4);
		
		lblNewLabel_1_2 = new JLabel("MATH");
		lblNewLabel_1_2.setForeground(Color.WHITE);
		lblNewLabel_1_2.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_2.setBounds(70, 50, 561, 120);
		panel.add(lblNewLabel_1_2);
		
		lblNewLabel_1 = new JLabel("MATH");
		lblNewLabel_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1.setForeground(Color.DARK_GRAY);
		lblNewLabel_1.setBounds(78, 50, 777, 120);
		panel.add(lblNewLabel_1);
		
		lblNewLabel_1_1 = new JLabel("MATH");
		lblNewLabel_1_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_1.setBounds(89, 50, 612, 120);
		panel.add(lblNewLabel_1_1);
		
		lblNewLabel_1_2_2 = new JLabel("quiz");
		lblNewLabel_1_2_2.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_2.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_2.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_2);
		
		lblNewLabel_1_2_1 = new JLabel("quiz");
		lblNewLabel_1_2_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_2_1.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_1.setBounds(159, 130, 561, 120);
		panel.add(lblNewLabel_1_2_1);
		
		lblNewLabel_1_2_3 = new JLabel("quiz");
		lblNewLabel_1_2_3.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_3.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_3.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_3);
		
		lblNewLabel = new JLabel("");
		lblNewLabel.setFont(new Font("Dialog", Font.BOLD, 9));
		lblNewLabel.setBounds(225, 428, 161, 14);
		panel.add(lblNewLabel);
		
		rdbtnEasy = new JRadioButton("EASY");
		rdbtnEasy.setForeground(Color.WHITE);
		rdbtnEasy.setBackground(Color.RED);
		rdbtnEasy.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnEasy.setBounds(215, 232, 269, 78);
		panel.add(rdbtnEasy);
		
		rdbtnAverage = new JRadioButton("AVERAGE");
		rdbtnAverage.setForeground(Color.WHITE);
		rdbtnAverage.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnAverage.setBackground(Color.RED);
		rdbtnAverage.setBounds(188, 290, 269, 73);
		panel.add(rdbtnAverage);
		
		rdbtnDifficult = new JRadioButton("DIFFICULT");
		rdbtnDifficult.setForeground(Color.WHITE);
		rdbtnDifficult.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnDifficult.setBackground(Color.RED);
		rdbtnDifficult.setBounds(176, 342, 269, 68);
		panel.add(rdbtnDifficult);
		
		ButtonGroup difficulty = new ButtonGroup();
		difficulty.add(rdbtnEasy);
		difficulty.add(rdbtnAverage);
		difficulty.add(rdbtnDifficult);
		
		btnStart = new JButton("START");
		
		
	
		
		btnStart.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
			if(rdbtnEasy.isSelected()){
				///////////
				
 				lblNewLabel_3.setText(generateQuestion());
 				
 				
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_1.setVisible(true);
				
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnAverage.isSelected()){
				
				lblNewLabel_3.setText(generateQuestionAverage());
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_2.setVisible(true);
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnDifficult.isSelected()){
				
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			}
		});
		btnStart.setBackground(Color.WHITE);
		btnStart.setForeground(Color.RED);
		btnStart.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnStart.setBounds(212, 453, 125, 43);
		panel.add(btnStart);
		
		lblNewLabel_2 = new JLabel("");
		lblNewLabel_2.setVisible(false);
		lblNewLabel_2.setForeground(Color.WHITE);
		lblNewLabel_2.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_2.setBounds(317, 90, 125, 129);
		panel.add(lblNewLabel_2);
		
		lblNewLabel_3 = new JLabel("");
		lblNewLabel_3.setVisible(false);
		lblNewLabel_3.setForeground(Color.WHITE);
		lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_3.setBounds(215, 90, 300, 200);
		panel.add(lblNewLabel_3);
		
		lblNewLabel_4 = new JLabel("");
		lblNewLabel_4.addMouseListener(new MouseAdapter() {
			public void mouseReleased(MouseEvent e) {
				
			}
		});
		lblNewLabel_4.setVisible(false);
		lblNewLabel_4.setForeground(Color.WHITE);
		lblNewLabel_4.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_4.setBounds(121, 90, 103, 129);
		panel.add(lblNewLabel_4);
				
		textField = new JTextField();
		textField.setHorizontalAlignment(SwingConstants.RIGHT);
		textField.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField.setVisible(false);
		textField.setBounds(121, 261, 324, 49);
		panel.add(textField);
		textField.setColumns(10);
		
		textField1 = new JTextField();
		textField1.setHorizontalAlignment(SwingConstants.RIGHT);
		textField1.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField1.setVisible(false);
		textField1.setBounds(121, 261, 324, 49);
		panel.add(textField1);
		textField1.setColumns(10);
		
		returnButton = new JButton("Return");
		returnButton.setVisible(false);
		returnButton.setFont(new Font("Tahoma", Font.BOLD, 20));
		returnButton.setForeground(Color.RED);
		returnButton.setBackground(Color.WHITE);
		returnButton.setBounds(225, 363, 126, 43);
		panel.add(returnButton);
		
		
		returnButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel.setVisible(true);
				rdbtnEasy.setVisible(true);
				rdbtnAverage.setVisible(true);
				rdbtnDifficult.setVisible(true);
				lblNewLabel_1_2_3.setVisible(true);
				lblNewLabel_1_2_1.setVisible(true);
				lblNewLabel_1_2_2.setVisible(true);
				lblNewLabel_1_1.setVisible(true);
				lblNewLabel_1.setVisible(true);
				lblNewLabel_1_2.setVisible(true);
				lblNewLabel_1_2_4.setVisible(true);
				btnStart.setVisible(true);
				returnButton.setVisible(false);
				lblNewLabel_3.setVisible(false);
				lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
			}

		
			
			
		});
		
		btnNewButton_1 = new JButton("SUBMIT");
		btnNewButton_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				
				
				double result = getResult(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
				
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
				
			}
		});
		btnNewButton_1.setVisible(false);
		btnNewButton_1.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_1.setForeground(Color.RED);
		btnNewButton_1.setBackground(Color.WHITE);
		btnNewButton_1.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_1);
		
		//Button 2
		btnNewButton_2 = new JButton("SUBMIT");
		btnNewButton_2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				double result = getResultAverage(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
			
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
			}
		});
		btnNewButton_2.setVisible(false);
		btnNewButton_2.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_2.setForeground(Color.RED);
		btnNewButton_2.setBackground(Color.WHITE);
		btnNewButton_2.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_2);
		
		
		textField2 = new JTextField();
		textField2.setHorizontalAlignment(SwingConstants.RIGHT);
		textField2.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField2.setVisible(false);
		textField2.setBounds(121, 261, 324, 49);
		panel.add(textField2);
		textField2.setColumns(10);
		
		btnNewButton_3 = new JButton("SUBMIT");
		btnNewButton_3.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel_2.setVisible(false);
				
				textField.setVisible(false);
				textField1.setVisible(false);
				btnNewButton_1.setVisible(false);
				btnNewButton_2.setVisible(false);
				
				textField2.setVisible(false);
				btnNewButton_3.setVisible(false);
				
				
				
			}
		});
		btnNewButton_3.setVisible(false);
		btnNewButton_3.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_3.setForeground(Color.RED);
		btnNewButton_3.setBackground(Color.WHITE);
		btnNewButton_3.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_3);
		
		
	}
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-04-30 17:34:39.016
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-04-30 17:34:39.017
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-30 17:34:39.441
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import java.awt.Color;
import java.awt.Toolkit;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

import java.awt.Font;
import javax.swing.JRadioButton;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Arrays;
import java.util.Random;


public class Main extends JFrame {

	private JPanel contentPane;
	private JLabel lblNewLabel_1_2;
	private JLabel lblNewLabel_1;
	private JLabel lblNewLabel_1_1; 
	private JLabel lblNewLabel_1_2_1;
	private JLabel lblNewLabel_1_2_2;
	private JLabel lblNewLabel_1_2_3;
	private JLabel lblNewLabel_1_2_4;
	private JRadioButton rdbtnEasy;
	private JRadioButton rdbtnAverage;
	private JRadioButton rdbtnDifficult;
	private JButton btnStart; 
	private JLabel lblNewLabel;
	private JLabel lblNewLabel_2;
	private JLabel lblNewLabel_3;
	private JLabel lblNewLabel_4;
	private JTextField textField;
	private JButton btnNewButton_1;
	private JTextField textField1;
	private JButton btnNewButton_2;
	private JButton returnButton;

	private JTextField textField2;
	private JButton btnNewButton_3;
	int currentQuestionNumber = 1;
	int playerScore = 0;
	Random random = new Random();
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Main frame = new Main();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
	
	
	
	

	/**
	 * Create the frame.
	 */
	
	
	public int findIndex(char operand) {
		char[] operandOrder = {'-', '+', '/', '*'};
		int index = 0;
		
		for(int i = 0; i < operandOrder.length; i++) {
			if(operand == operandOrder[i]) index = i;
		}
		return index;
	}
	
	public double getResult(String question) {
		char[] questionData = question.toCharArray(); 
		
		char operand = questionData[1];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double result = 0;
		
		if(operand == '+') result = firstNumber + secondNumber;
		if(operand == '-') result = firstNumber - secondNumber;
		if(operand == '*') result = firstNumber * secondNumber;
		if(operand == '/') result = firstNumber / secondNumber;
		double roundedResult = Math.round(result);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	public double getResultAverage(String question) {
		char[] questionData = question.toCharArray(); 
		
		char firstOperand = questionData[1];
		char secondOperand = questionData[3];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double thirdNumber = Double.parseDouble(String.valueOf(questionData[4]));
		double result = 0;
		
		
		char[] operandOrder = {'-', '+', '/', '*'};
		int indexFirst = findIndex(firstOperand);
		int indexSecond = findIndex(secondOperand);
		double totalResult = 0;
		double initialResult = 0;
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+') initialResult = secondNumber + thirdNumber;
			if(secondOperand == '-') initialResult = secondNumber - thirdNumber;
			if(secondOperand == '*') initialResult = secondNumber * thirdNumber;
			if(secondOperand == '/') initialResult = secondNumber / thirdNumber;
			
			
		}
		else if (indexSecond < indexFirst) {
			if(firstOperand == '+') initialResult = firstNumber + secondNumber;
			if(firstOperand == '-') initialResult = firstNumber - secondNumber;
			if(firstOperand == '*') initialResult = firstNumber * secondNumber;
			if(firstOperand == '/') initialResult = firstNumber / secondNumber;
		}
		
		
		
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+')  totalResult = firstNumber + thirdNumber;
			if(secondOperand == '-')  totalResult = firstNumber - thirdNumber;
			if(secondOperand == '*')  totalResult = firstNumber * thirdNumber;
			if(secondOperand == '/')  totalResult = firstNumber / thirdNumber;
			
			
		}
		
		else (indexSecond < indexFirst) {
			if(firstOperand == '+')  totalResult = initialResult + thirdNumber;
			if(firstOperand == '-')  totalResult = initialResult - thirdNumber;
			if(firstOperand == '*')  totalResult = initialResult * thirdNumber;
			if(firstOperand == '/')  totalResult = initialResult / thirdNumber;
		}
		
		
		
		
		
		double roundedResult = Math.round(totalResult);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	
	public String generateQuestion() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond];
		
		return question;
	}
	
	public String generateQuestionAverage() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexThird = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		int randomIndexOperand2 = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond] + operands[randomIndexOperand2] + numbers[randomIndexThird];
		System.out.println(question);
		return question;
	}
	
	
	public Main() {
		setIconImage(Toolkit.getDefaultToolkit().getImage("C:\\Users\\user\\Downloads\\quiz.png"));
		setTitle("QUIZ GAME");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(400, 100, 600, 600);
		contentPane = new JPanel();
		contentPane.setBackground(Color.WHITE);
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));

		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JPanel panel = new JPanel();
		panel.setBackground(Color.RED);
		panel.setBounds(10, 0, 564, 550);
		contentPane.add(panel);
		panel.setLayout(null);
		
		lblNewLabel_1_2_4 = new JLabel("quiz");
		lblNewLabel_1_2_4.setForeground(Color.WHITE);
		lblNewLabel_1_2_4.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_4.setBounds(140, 130, 561, 120);
		panel.add(lblNewLabel_1_2_4);
		
		lblNewLabel_1_2 = new JLabel("MATH");
		lblNewLabel_1_2.setForeground(Color.WHITE);
		lblNewLabel_1_2.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_2.setBounds(70, 50, 561, 120);
		panel.add(lblNewLabel_1_2);
		
		lblNewLabel_1 = new JLabel("MATH");
		lblNewLabel_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1.setForeground(Color.DARK_GRAY);
		lblNewLabel_1.setBounds(78, 50, 777, 120);
		panel.add(lblNewLabel_1);
		
		lblNewLabel_1_1 = new JLabel("MATH");
		lblNewLabel_1_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_1.setBounds(89, 50, 612, 120);
		panel.add(lblNewLabel_1_1);
		
		lblNewLabel_1_2_2 = new JLabel("quiz");
		lblNewLabel_1_2_2.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_2.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_2.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_2);
		
		lblNewLabel_1_2_1 = new JLabel("quiz");
		lblNewLabel_1_2_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_2_1.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_1.setBounds(159, 130, 561, 120);
		panel.add(lblNewLabel_1_2_1);
		
		lblNewLabel_1_2_3 = new JLabel("quiz");
		lblNewLabel_1_2_3.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_3.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_3.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_3);
		
		lblNewLabel = new JLabel("");
		lblNewLabel.setFont(new Font("Dialog", Font.BOLD, 9));
		lblNewLabel.setBounds(225, 428, 161, 14);
		panel.add(lblNewLabel);
		
		rdbtnEasy = new JRadioButton("EASY");
		rdbtnEasy.setForeground(Color.WHITE);
		rdbtnEasy.setBackground(Color.RED);
		rdbtnEasy.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnEasy.setBounds(215, 232, 269, 78);
		panel.add(rdbtnEasy);
		
		rdbtnAverage = new JRadioButton("AVERAGE");
		rdbtnAverage.setForeground(Color.WHITE);
		rdbtnAverage.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnAverage.setBackground(Color.RED);
		rdbtnAverage.setBounds(188, 290, 269, 73);
		panel.add(rdbtnAverage);
		
		rdbtnDifficult = new JRadioButton("DIFFICULT");
		rdbtnDifficult.setForeground(Color.WHITE);
		rdbtnDifficult.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnDifficult.setBackground(Color.RED);
		rdbtnDifficult.setBounds(176, 342, 269, 68);
		panel.add(rdbtnDifficult);
		
		ButtonGroup difficulty = new ButtonGroup();
		difficulty.add(rdbtnEasy);
		difficulty.add(rdbtnAverage);
		difficulty.add(rdbtnDifficult);
		
		btnStart = new JButton("START");
		
		
	
		
		btnStart.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
			if(rdbtnEasy.isSelected()){
				///////////
				
 				lblNewLabel_3.setText(generateQuestion());
 				
 				
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_1.setVisible(true);
				
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnAverage.isSelected()){
				
				lblNewLabel_3.setText(generateQuestionAverage());
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_2.setVisible(true);
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnDifficult.isSelected()){
				
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			}
		});
		btnStart.setBackground(Color.WHITE);
		btnStart.setForeground(Color.RED);
		btnStart.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnStart.setBounds(212, 453, 125, 43);
		panel.add(btnStart);
		
		lblNewLabel_2 = new JLabel("");
		lblNewLabel_2.setVisible(false);
		lblNewLabel_2.setForeground(Color.WHITE);
		lblNewLabel_2.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_2.setBounds(317, 90, 125, 129);
		panel.add(lblNewLabel_2);
		
		lblNewLabel_3 = new JLabel("");
		lblNewLabel_3.setVisible(false);
		lblNewLabel_3.setForeground(Color.WHITE);
		lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_3.setBounds(215, 90, 300, 200);
		panel.add(lblNewLabel_3);
		
		lblNewLabel_4 = new JLabel("");
		lblNewLabel_4.addMouseListener(new MouseAdapter() {
			public void mouseReleased(MouseEvent e) {
				
			}
		});
		lblNewLabel_4.setVisible(false);
		lblNewLabel_4.setForeground(Color.WHITE);
		lblNewLabel_4.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_4.setBounds(121, 90, 103, 129);
		panel.add(lblNewLabel_4);
				
		textField = new JTextField();
		textField.setHorizontalAlignment(SwingConstants.RIGHT);
		textField.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField.setVisible(false);
		textField.setBounds(121, 261, 324, 49);
		panel.add(textField);
		textField.setColumns(10);
		
		textField1 = new JTextField();
		textField1.setHorizontalAlignment(SwingConstants.RIGHT);
		textField1.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField1.setVisible(false);
		textField1.setBounds(121, 261, 324, 49);
		panel.add(textField1);
		textField1.setColumns(10);
		
		returnButton = new JButton("Return");
		returnButton.setVisible(false);
		returnButton.setFont(new Font("Tahoma", Font.BOLD, 20));
		returnButton.setForeground(Color.RED);
		returnButton.setBackground(Color.WHITE);
		returnButton.setBounds(225, 363, 126, 43);
		panel.add(returnButton);
		
		
		returnButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel.setVisible(true);
				rdbtnEasy.setVisible(true);
				rdbtnAverage.setVisible(true);
				rdbtnDifficult.setVisible(true);
				lblNewLabel_1_2_3.setVisible(true);
				lblNewLabel_1_2_1.setVisible(true);
				lblNewLabel_1_2_2.setVisible(true);
				lblNewLabel_1_1.setVisible(true);
				lblNewLabel_1.setVisible(true);
				lblNewLabel_1_2.setVisible(true);
				lblNewLabel_1_2_4.setVisible(true);
				btnStart.setVisible(true);
				returnButton.setVisible(false);
				lblNewLabel_3.setVisible(false);
				lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
			}

		
			
			
		});
		
		btnNewButton_1 = new JButton("SUBMIT");
		btnNewButton_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				
				
				double result = getResult(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
				
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
				
			}
		});
		btnNewButton_1.setVisible(false);
		btnNewButton_1.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_1.setForeground(Color.RED);
		btnNewButton_1.setBackground(Color.WHITE);
		btnNewButton_1.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_1);
		
		//Button 2
		btnNewButton_2 = new JButton("SUBMIT");
		btnNewButton_2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				double result = getResultAverage(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
			
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
			}
		});
		btnNewButton_2.setVisible(false);
		btnNewButton_2.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_2.setForeground(Color.RED);
		btnNewButton_2.setBackground(Color.WHITE);
		btnNewButton_2.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_2);
		
		
		textField2 = new JTextField();
		textField2.setHorizontalAlignment(SwingConstants.RIGHT);
		textField2.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField2.setVisible(false);
		textField2.setBounds(121, 261, 324, 49);
		panel.add(textField2);
		textField2.setColumns(10);
		
		btnNewButton_3 = new JButton("SUBMIT");
		btnNewButton_3.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel_2.setVisible(false);
				
				textField.setVisible(false);
				textField1.setVisible(false);
				btnNewButton_1.setVisible(false);
				btnNewButton_2.setVisible(false);
				
				textField2.setVisible(false);
				btnNewButton_3.setVisible(false);
				
				
				
			}
		});
		btnNewButton_3.setVisible(false);
		btnNewButton_3.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_3.setForeground(Color.RED);
		btnNewButton_3.setBackground(Color.WHITE);
		btnNewButton_3.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_3);
		
		
	}
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-04-30 17:34:39.442
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-04-30 17:34:39.443
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-30 17:34:40.971
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import java.awt.Color;
import java.awt.Toolkit;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

import java.awt.Font;
import javax.swing.JRadioButton;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Arrays;
import java.util.Random;


public class Main extends JFrame {

	private JPanel contentPane;
	private JLabel lblNewLabel_1_2;
	private JLabel lblNewLabel_1;
	private JLabel lblNewLabel_1_1; 
	private JLabel lblNewLabel_1_2_1;
	private JLabel lblNewLabel_1_2_2;
	private JLabel lblNewLabel_1_2_3;
	private JLabel lblNewLabel_1_2_4;
	private JRadioButton rdbtnEasy;
	private JRadioButton rdbtnAverage;
	private JRadioButton rdbtnDifficult;
	private JButton btnStart; 
	private JLabel lblNewLabel;
	private JLabel lblNewLabel_2;
	private JLabel lblNewLabel_3;
	private JLabel lblNewLabel_4;
	private JTextField textField;
	private JButton btnNewButton_1;
	private JTextField textField1;
	private JButton btnNewButton_2;
	private JButton returnButton;

	private JTextField textField2;
	private JButton btnNewButton_3;
	int currentQuestionNumber = 1;
	int playerScore = 0;
	Random random = new Random();
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Main frame = new Main();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
	
	
	
	

	/**
	 * Create the frame.
	 */
	
	
	public int findIndex(char operand) {
		char[] operandOrder = {'-', '+', '/', '*'};
		int index = 0;
		
		for(int i = 0; i < operandOrder.length; i++) {
			if(operand == operandOrder[i]) index = i;
		}
		return index;
	}
	
	public double getResult(String question) {
		char[] questionData = question.toCharArray(); 
		
		char operand = questionData[1];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double result = 0;
		
		if(operand == '+') result = firstNumber + secondNumber;
		if(operand == '-') result = firstNumber - secondNumber;
		if(operand == '*') result = firstNumber * secondNumber;
		if(operand == '/') result = firstNumber / secondNumber;
		double roundedResult = Math.round(result);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	public double getResultAverage(String question) {
		char[] questionData = question.toCharArray(); 
		
		char firstOperand = questionData[1];
		char secondOperand = questionData[3];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double thirdNumber = Double.parseDouble(String.valueOf(questionData[4]));
		double result = 0;
		
		
		char[] operandOrder = {'-', '+', '/', '*'};
		int indexFirst = findIndex(firstOperand);
		int indexSecond = findIndex(secondOperand);
		double totalResult = 0;
		double initialResult = 0;
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+') initialResult = secondNumber + thirdNumber;
			if(secondOperand == '-') initialResult = secondNumber - thirdNumber;
			if(secondOperand == '*') initialResult = secondNumber * thirdNumber;
			if(secondOperand == '/') initialResult = secondNumber / thirdNumber;
			
			
		}
		else if (indexSecond < indexFirst) {
			if(firstOperand == '+') initialResult = firstNumber + secondNumber;
			if(firstOperand == '-') initialResult = firstNumber - secondNumber;
			if(firstOperand == '*') initialResult = firstNumber * secondNumber;
			if(firstOperand == '/') initialResult = firstNumber / secondNumber;
		}
		else {
			if(firstOperand == '+') totalResult = firstNumber + secondNumber + thirdNumber;
			if(firstOperand == '-') totalResult = firstNumber - secondNumber - thirdNumber;
			if(firstOperand == '*') totalResult = firstNumber * secondNumber * thirdNumber;
			if(firstOperand == '/') totalResult = firstNumber / secondNumber / thirdNumber;
		}
		
		
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+')  totalResult = firstNumber + thirdNumber;
			if(secondOperand == '-')  totalResult = firstNumber - thirdNumber;
			if(secondOperand == '*')  totalResult = firstNumber * thirdNumber;
			if(secondOperand == '/')  totalResult = firstNumber / thirdNumber;
			
			
		}
		
		else (indexSecond < indexFirst) {
			if(firstOperand == '+')  totalResult = initialResult + thirdNumber;
			if(firstOperand == '-')  totalResult = initialResult - thirdNumber;
			if(firstOperand == '*')  totalResult = initialResult * thirdNumber;
			if(firstOperand == '/')  totalResult = initialResult / thirdNumber;
		}
		
		
		
		
		
		double roundedResult = Math.round(totalResult);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	
	public String generateQuestion() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond];
		
		return question;
	}
	
	public String generateQuestionAverage() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexThird = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		int randomIndexOperand2 = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond] + operands[randomIndexOperand2] + numbers[randomIndexThird];
		System.out.println(question);
		return question;
	}
	
	
	public Main() {
		setIconImage(Toolkit.getDefaultToolkit().getImage("C:\\Users\\user\\Downloads\\quiz.png"));
		setTitle("QUIZ GAME");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(400, 100, 600, 600);
		contentPane = new JPanel();
		contentPane.setBackground(Color.WHITE);
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));

		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JPanel panel = new JPanel();
		panel.setBackground(Color.RED);
		panel.setBounds(10, 0, 564, 550);
		contentPane.add(panel);
		panel.setLayout(null);
		
		lblNewLabel_1_2_4 = new JLabel("quiz");
		lblNewLabel_1_2_4.setForeground(Color.WHITE);
		lblNewLabel_1_2_4.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_4.setBounds(140, 130, 561, 120);
		panel.add(lblNewLabel_1_2_4);
		
		lblNewLabel_1_2 = new JLabel("MATH");
		lblNewLabel_1_2.setForeground(Color.WHITE);
		lblNewLabel_1_2.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_2.setBounds(70, 50, 561, 120);
		panel.add(lblNewLabel_1_2);
		
		lblNewLabel_1 = new JLabel("MATH");
		lblNewLabel_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1.setForeground(Color.DARK_GRAY);
		lblNewLabel_1.setBounds(78, 50, 777, 120);
		panel.add(lblNewLabel_1);
		
		lblNewLabel_1_1 = new JLabel("MATH");
		lblNewLabel_1_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_1.setBounds(89, 50, 612, 120);
		panel.add(lblNewLabel_1_1);
		
		lblNewLabel_1_2_2 = new JLabel("quiz");
		lblNewLabel_1_2_2.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_2.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_2.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_2);
		
		lblNewLabel_1_2_1 = new JLabel("quiz");
		lblNewLabel_1_2_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_2_1.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_1.setBounds(159, 130, 561, 120);
		panel.add(lblNewLabel_1_2_1);
		
		lblNewLabel_1_2_3 = new JLabel("quiz");
		lblNewLabel_1_2_3.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_3.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_3.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_3);
		
		lblNewLabel = new JLabel("");
		lblNewLabel.setFont(new Font("Dialog", Font.BOLD, 9));
		lblNewLabel.setBounds(225, 428, 161, 14);
		panel.add(lblNewLabel);
		
		rdbtnEasy = new JRadioButton("EASY");
		rdbtnEasy.setForeground(Color.WHITE);
		rdbtnEasy.setBackground(Color.RED);
		rdbtnEasy.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnEasy.setBounds(215, 232, 269, 78);
		panel.add(rdbtnEasy);
		
		rdbtnAverage = new JRadioButton("AVERAGE");
		rdbtnAverage.setForeground(Color.WHITE);
		rdbtnAverage.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnAverage.setBackground(Color.RED);
		rdbtnAverage.setBounds(188, 290, 269, 73);
		panel.add(rdbtnAverage);
		
		rdbtnDifficult = new JRadioButton("DIFFICULT");
		rdbtnDifficult.setForeground(Color.WHITE);
		rdbtnDifficult.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnDifficult.setBackground(Color.RED);
		rdbtnDifficult.setBounds(176, 342, 269, 68);
		panel.add(rdbtnDifficult);
		
		ButtonGroup difficulty = new ButtonGroup();
		difficulty.add(rdbtnEasy);
		difficulty.add(rdbtnAverage);
		difficulty.add(rdbtnDifficult);
		
		btnStart = new JButton("START");
		
		
	
		
		btnStart.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
			if(rdbtnEasy.isSelected()){
				///////////
				
 				lblNewLabel_3.setText(generateQuestion());
 				
 				
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_1.setVisible(true);
				
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnAverage.isSelected()){
				
				lblNewLabel_3.setText(generateQuestionAverage());
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_2.setVisible(true);
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnDifficult.isSelected()){
				
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			}
		});
		btnStart.setBackground(Color.WHITE);
		btnStart.setForeground(Color.RED);
		btnStart.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnStart.setBounds(212, 453, 125, 43);
		panel.add(btnStart);
		
		lblNewLabel_2 = new JLabel("");
		lblNewLabel_2.setVisible(false);
		lblNewLabel_2.setForeground(Color.WHITE);
		lblNewLabel_2.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_2.setBounds(317, 90, 125, 129);
		panel.add(lblNewLabel_2);
		
		lblNewLabel_3 = new JLabel("");
		lblNewLabel_3.setVisible(false);
		lblNewLabel_3.setForeground(Color.WHITE);
		lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_3.setBounds(215, 90, 300, 200);
		panel.add(lblNewLabel_3);
		
		lblNewLabel_4 = new JLabel("");
		lblNewLabel_4.addMouseListener(new MouseAdapter() {
			public void mouseReleased(MouseEvent e) {
				
			}
		});
		lblNewLabel_4.setVisible(false);
		lblNewLabel_4.setForeground(Color.WHITE);
		lblNewLabel_4.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_4.setBounds(121, 90, 103, 129);
		panel.add(lblNewLabel_4);
				
		textField = new JTextField();
		textField.setHorizontalAlignment(SwingConstants.RIGHT);
		textField.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField.setVisible(false);
		textField.setBounds(121, 261, 324, 49);
		panel.add(textField);
		textField.setColumns(10);
		
		textField1 = new JTextField();
		textField1.setHorizontalAlignment(SwingConstants.RIGHT);
		textField1.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField1.setVisible(false);
		textField1.setBounds(121, 261, 324, 49);
		panel.add(textField1);
		textField1.setColumns(10);
		
		returnButton = new JButton("Return");
		returnButton.setVisible(false);
		returnButton.setFont(new Font("Tahoma", Font.BOLD, 20));
		returnButton.setForeground(Color.RED);
		returnButton.setBackground(Color.WHITE);
		returnButton.setBounds(225, 363, 126, 43);
		panel.add(returnButton);
		
		
		returnButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel.setVisible(true);
				rdbtnEasy.setVisible(true);
				rdbtnAverage.setVisible(true);
				rdbtnDifficult.setVisible(true);
				lblNewLabel_1_2_3.setVisible(true);
				lblNewLabel_1_2_1.setVisible(true);
				lblNewLabel_1_2_2.setVisible(true);
				lblNewLabel_1_1.setVisible(true);
				lblNewLabel_1.setVisible(true);
				lblNewLabel_1_2.setVisible(true);
				lblNewLabel_1_2_4.setVisible(true);
				btnStart.setVisible(true);
				returnButton.setVisible(false);
				lblNewLabel_3.setVisible(false);
				lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
			}

		
			
			
		});
		
		btnNewButton_1 = new JButton("SUBMIT");
		btnNewButton_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				
				
				double result = getResult(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
				
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
				
			}
		});
		btnNewButton_1.setVisible(false);
		btnNewButton_1.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_1.setForeground(Color.RED);
		btnNewButton_1.setBackground(Color.WHITE);
		btnNewButton_1.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_1);
		
		//Button 2
		btnNewButton_2 = new JButton("SUBMIT");
		btnNewButton_2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				double result = getResultAverage(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
			
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
			}
		});
		btnNewButton_2.setVisible(false);
		btnNewButton_2.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_2.setForeground(Color.RED);
		btnNewButton_2.setBackground(Color.WHITE);
		btnNewButton_2.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_2);
		
		
		textField2 = new JTextField();
		textField2.setHorizontalAlignment(SwingConstants.RIGHT);
		textField2.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField2.setVisible(false);
		textField2.setBounds(121, 261, 324, 49);
		panel.add(textField2);
		textField2.setColumns(10);
		
		btnNewButton_3 = new JButton("SUBMIT");
		btnNewButton_3.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel_2.setVisible(false);
				
				textField.setVisible(false);
				textField1.setVisible(false);
				btnNewButton_1.setVisible(false);
				btnNewButton_2.setVisible(false);
				
				textField2.setVisible(false);
				btnNewButton_3.setVisible(false);
				
				
				
			}
		});
		btnNewButton_3.setVisible(false);
		btnNewButton_3.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_3.setForeground(Color.RED);
		btnNewButton_3.setBackground(Color.WHITE);
		btnNewButton_3.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_3);
		
		
	}
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-04-30 17:34:40.973
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-04-30 17:34:40.973
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-30 17:34:41.169
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import java.awt.Color;
import java.awt.Toolkit;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

import java.awt.Font;
import javax.swing.JRadioButton;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Arrays;
import java.util.Random;


public class Main extends JFrame {

	private JPanel contentPane;
	private JLabel lblNewLabel_1_2;
	private JLabel lblNewLabel_1;
	private JLabel lblNewLabel_1_1; 
	private JLabel lblNewLabel_1_2_1;
	private JLabel lblNewLabel_1_2_2;
	private JLabel lblNewLabel_1_2_3;
	private JLabel lblNewLabel_1_2_4;
	private JRadioButton rdbtnEasy;
	private JRadioButton rdbtnAverage;
	private JRadioButton rdbtnDifficult;
	private JButton btnStart; 
	private JLabel lblNewLabel;
	private JLabel lblNewLabel_2;
	private JLabel lblNewLabel_3;
	private JLabel lblNewLabel_4;
	private JTextField textField;
	private JButton btnNewButton_1;
	private JTextField textField1;
	private JButton btnNewButton_2;
	private JButton returnButton;

	private JTextField textField2;
	private JButton btnNewButton_3;
	int currentQuestionNumber = 1;
	int playerScore = 0;
	Random random = new Random();
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Main frame = new Main();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
	
	
	
	

	/**
	 * Create the frame.
	 */
	
	
	public int findIndex(char operand) {
		char[] operandOrder = {'-', '+', '/', '*'};
		int index = 0;
		
		for(int i = 0; i < operandOrder.length; i++) {
			if(operand == operandOrder[i]) index = i;
		}
		return index;
	}
	
	public double getResult(String question) {
		char[] questionData = question.toCharArray(); 
		
		char operand = questionData[1];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double result = 0;
		
		if(operand == '+') result = firstNumber + secondNumber;
		if(operand == '-') result = firstNumber - secondNumber;
		if(operand == '*') result = firstNumber * secondNumber;
		if(operand == '/') result = firstNumber / secondNumber;
		double roundedResult = Math.round(result);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	public double getResultAverage(String question) {
		char[] questionData = question.toCharArray(); 
		
		char firstOperand = questionData[1];
		char secondOperand = questionData[3];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double thirdNumber = Double.parseDouble(String.valueOf(questionData[4]));
		double result = 0;
		
		
		char[] operandOrder = {'-', '+', '/', '*'};
		int indexFirst = findIndex(firstOperand);
		int indexSecond = findIndex(secondOperand);
		double totalResult = 0;
		double initialResult = 0;
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+') initialResult = secondNumber + thirdNumber;
			if(secondOperand == '-') initialResult = secondNumber - thirdNumber;
			if(secondOperand == '*') initialResult = secondNumber * thirdNumber;
			if(secondOperand == '/') initialResult = secondNumber / thirdNumber;
			
			
		}
		else if (indexSecond < indexFirst) {
			if(firstOperand == '+') initialResult = firstNumber + secondNumber;
			if(firstOperand == '-') initialResult = firstNumber - secondNumber;
			if(firstOperand == '*') initialResult = firstNumber * secondNumber;
			if(firstOperand == '/') initialResult = firstNumber / secondNumber;
		}
		else {
			if(firstOperand == '+') totalResult = firstNumber + secondNumber + thirdNumber;
			if(firstOperand == '-') totalResult = firstNumber - secondNumber - thirdNumber;
			if(firstOperand == '*') totalResult = firstNumber * secondNumber * thirdNumber;
			if(firstOperand == '/') totalResult = firstNumber / secondNumber / thirdNumber;
		}
		
		
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+')  totalResult = firstNumber + thirdNumber;
			if(secondOperand == '-')  totalResult = firstNumber - thirdNumber;
			if(secondOperand == '*')  totalResult = firstNumber * thirdNumber;
			if(secondOperand == '/')  totalResult = firstNumber / thirdNumber;
			
			
		}
		
		else (indexSecond < indexFirst) {
			if(firstOperand == '+')  totalResult = initialResult + thirdNumber;
			if(firstOperand == '-')  totalResult = initialResult - thirdNumber;
			if(firstOperand == '*')  totalResult = initialResult * thirdNumber;
			if(firstOperand == '/')  totalResult = initialResult / thirdNumber;
		}
		
		
		
		
		
		double roundedResult = Math.round(totalResult);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	
	public String generateQuestion() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond];
		
		return question;
	}
	
	public String generateQuestionAverage() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexThird = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		int randomIndexOperand2 = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond] + operands[randomIndexOperand2] + numbers[randomIndexThird];
		System.out.println(question);
		return question;
	}
	
	
	public Main() {
		setIconImage(Toolkit.getDefaultToolkit().getImage("C:\\Users\\user\\Downloads\\quiz.png"));
		setTitle("QUIZ GAME");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(400, 100, 600, 600);
		contentPane = new JPanel();
		contentPane.setBackground(Color.WHITE);
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));

		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JPanel panel = new JPanel();
		panel.setBackground(Color.RED);
		panel.setBounds(10, 0, 564, 550);
		contentPane.add(panel);
		panel.setLayout(null);
		
		lblNewLabel_1_2_4 = new JLabel("quiz");
		lblNewLabel_1_2_4.setForeground(Color.WHITE);
		lblNewLabel_1_2_4.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_4.setBounds(140, 130, 561, 120);
		panel.add(lblNewLabel_1_2_4);
		
		lblNewLabel_1_2 = new JLabel("MATH");
		lblNewLabel_1_2.setForeground(Color.WHITE);
		lblNewLabel_1_2.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_2.setBounds(70, 50, 561, 120);
		panel.add(lblNewLabel_1_2);
		
		lblNewLabel_1 = new JLabel("MATH");
		lblNewLabel_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1.setForeground(Color.DARK_GRAY);
		lblNewLabel_1.setBounds(78, 50, 777, 120);
		panel.add(lblNewLabel_1);
		
		lblNewLabel_1_1 = new JLabel("MATH");
		lblNewLabel_1_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_1.setBounds(89, 50, 612, 120);
		panel.add(lblNewLabel_1_1);
		
		lblNewLabel_1_2_2 = new JLabel("quiz");
		lblNewLabel_1_2_2.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_2.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_2.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_2);
		
		lblNewLabel_1_2_1 = new JLabel("quiz");
		lblNewLabel_1_2_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_2_1.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_1.setBounds(159, 130, 561, 120);
		panel.add(lblNewLabel_1_2_1);
		
		lblNewLabel_1_2_3 = new JLabel("quiz");
		lblNewLabel_1_2_3.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_3.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_3.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_3);
		
		lblNewLabel = new JLabel("");
		lblNewLabel.setFont(new Font("Dialog", Font.BOLD, 9));
		lblNewLabel.setBounds(225, 428, 161, 14);
		panel.add(lblNewLabel);
		
		rdbtnEasy = new JRadioButton("EASY");
		rdbtnEasy.setForeground(Color.WHITE);
		rdbtnEasy.setBackground(Color.RED);
		rdbtnEasy.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnEasy.setBounds(215, 232, 269, 78);
		panel.add(rdbtnEasy);
		
		rdbtnAverage = new JRadioButton("AVERAGE");
		rdbtnAverage.setForeground(Color.WHITE);
		rdbtnAverage.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnAverage.setBackground(Color.RED);
		rdbtnAverage.setBounds(188, 290, 269, 73);
		panel.add(rdbtnAverage);
		
		rdbtnDifficult = new JRadioButton("DIFFICULT");
		rdbtnDifficult.setForeground(Color.WHITE);
		rdbtnDifficult.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnDifficult.setBackground(Color.RED);
		rdbtnDifficult.setBounds(176, 342, 269, 68);
		panel.add(rdbtnDifficult);
		
		ButtonGroup difficulty = new ButtonGroup();
		difficulty.add(rdbtnEasy);
		difficulty.add(rdbtnAverage);
		difficulty.add(rdbtnDifficult);
		
		btnStart = new JButton("START");
		
		
	
		
		btnStart.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
			if(rdbtnEasy.isSelected()){
				///////////
				
 				lblNewLabel_3.setText(generateQuestion());
 				
 				
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_1.setVisible(true);
				
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnAverage.isSelected()){
				
				lblNewLabel_3.setText(generateQuestionAverage());
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_2.setVisible(true);
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnDifficult.isSelected()){
				
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			}
		});
		btnStart.setBackground(Color.WHITE);
		btnStart.setForeground(Color.RED);
		btnStart.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnStart.setBounds(212, 453, 125, 43);
		panel.add(btnStart);
		
		lblNewLabel_2 = new JLabel("");
		lblNewLabel_2.setVisible(false);
		lblNewLabel_2.setForeground(Color.WHITE);
		lblNewLabel_2.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_2.setBounds(317, 90, 125, 129);
		panel.add(lblNewLabel_2);
		
		lblNewLabel_3 = new JLabel("");
		lblNewLabel_3.setVisible(false);
		lblNewLabel_3.setForeground(Color.WHITE);
		lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_3.setBounds(215, 90, 300, 200);
		panel.add(lblNewLabel_3);
		
		lblNewLabel_4 = new JLabel("");
		lblNewLabel_4.addMouseListener(new MouseAdapter() {
			public void mouseReleased(MouseEvent e) {
				
			}
		});
		lblNewLabel_4.setVisible(false);
		lblNewLabel_4.setForeground(Color.WHITE);
		lblNewLabel_4.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_4.setBounds(121, 90, 103, 129);
		panel.add(lblNewLabel_4);
				
		textField = new JTextField();
		textField.setHorizontalAlignment(SwingConstants.RIGHT);
		textField.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField.setVisible(false);
		textField.setBounds(121, 261, 324, 49);
		panel.add(textField);
		textField.setColumns(10);
		
		textField1 = new JTextField();
		textField1.setHorizontalAlignment(SwingConstants.RIGHT);
		textField1.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField1.setVisible(false);
		textField1.setBounds(121, 261, 324, 49);
		panel.add(textField1);
		textField1.setColumns(10);
		
		returnButton = new JButton("Return");
		returnButton.setVisible(false);
		returnButton.setFont(new Font("Tahoma", Font.BOLD, 20));
		returnButton.setForeground(Color.RED);
		returnButton.setBackground(Color.WHITE);
		returnButton.setBounds(225, 363, 126, 43);
		panel.add(returnButton);
		
		
		returnButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel.setVisible(true);
				rdbtnEasy.setVisible(true);
				rdbtnAverage.setVisible(true);
				rdbtnDifficult.setVisible(true);
				lblNewLabel_1_2_3.setVisible(true);
				lblNewLabel_1_2_1.setVisible(true);
				lblNewLabel_1_2_2.setVisible(true);
				lblNewLabel_1_1.setVisible(true);
				lblNewLabel_1.setVisible(true);
				lblNewLabel_1_2.setVisible(true);
				lblNewLabel_1_2_4.setVisible(true);
				btnStart.setVisible(true);
				returnButton.setVisible(false);
				lblNewLabel_3.setVisible(false);
				lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
			}

		
			
			
		});
		
		btnNewButton_1 = new JButton("SUBMIT");
		btnNewButton_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				
				
				double result = getResult(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
				
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
				
			}
		});
		btnNewButton_1.setVisible(false);
		btnNewButton_1.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_1.setForeground(Color.RED);
		btnNewButton_1.setBackground(Color.WHITE);
		btnNewButton_1.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_1);
		
		//Button 2
		btnNewButton_2 = new JButton("SUBMIT");
		btnNewButton_2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				double result = getResultAverage(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
			
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
			}
		});
		btnNewButton_2.setVisible(false);
		btnNewButton_2.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_2.setForeground(Color.RED);
		btnNewButton_2.setBackground(Color.WHITE);
		btnNewButton_2.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_2);
		
		
		textField2 = new JTextField();
		textField2.setHorizontalAlignment(SwingConstants.RIGHT);
		textField2.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField2.setVisible(false);
		textField2.setBounds(121, 261, 324, 49);
		panel.add(textField2);
		textField2.setColumns(10);
		
		btnNewButton_3 = new JButton("SUBMIT");
		btnNewButton_3.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel_2.setVisible(false);
				
				textField.setVisible(false);
				textField1.setVisible(false);
				btnNewButton_1.setVisible(false);
				btnNewButton_2.setVisible(false);
				
				textField2.setVisible(false);
				btnNewButton_3.setVisible(false);
				
				
				
			}
		});
		btnNewButton_3.setVisible(false);
		btnNewButton_3.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_3.setForeground(Color.RED);
		btnNewButton_3.setBackground(Color.WHITE);
		btnNewButton_3.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_3);
		
		
	}
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-04-30 17:34:41.170
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-04-30 17:34:41.171
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)
!SESSION 2023-04-30 19:13:18.000 -----------------------------------------------
eclipse.buildId=4.24.0.I20220607-0700
java.version=17.0.4
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_PH
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2023-04-30 19:13:36.018
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-30 19:13:36.018
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@73d8c8d7,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@361b3ca6,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-30 19:13:36.018
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@48333b12,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@575c23f1,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-04-30 19:13:43.945
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Admin'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.eclipse.jdt.core 4 4 2023-04-30 19:14:05.538
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import java.awt.Color;
import java.awt.Toolkit;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

import java.awt.Font;
import javax.swing.JRadioButton;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Arrays;
import java.util.Random;


public class Main extends JFrame {

	private JPanel contentPane;
	private JLabel lblNewLabel_1_2;
	private JLabel lblNewLabel_1;
	private JLabel lblNewLabel_1_1; 
	private JLabel lblNewLabel_1_2_1;
	private JLabel lblNewLabel_1_2_2;
	private JLabel lblNewLabel_1_2_3;
	private JLabel lblNewLabel_1_2_4;
	private JRadioButton rdbtnEasy;
	private JRadioButton rdbtnAverage;
	private JRadioButton rdbtnDifficult;
	private JButton btnStart; 
	private JLabel lblNewLabel;
	private JLabel lblNewLabel_2;
	private JLabel lblNewLabel_3;
	private JLabel lblNewLabel_4;
	private JTextField textField;
	private JButton btnNewButton_1;
	private JTextField textField1;
	private JButton btnNewButton_2;
	private JButton returnButton;

	private JTextField textField2;
	private JButton btnNewButton_3;
	int currentQuestionNumber = 1;
	int playerScore = 0;
	Random random = new Random();
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Main frame = new Main();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
	
	
	
	

	/**
	 * Create the frame.
	 */
	
	
	public int findIndex(char operand) {
		char[] operandOrder = {'-', '+', '/', '*'};
		int index = 0;
		
		for(int i = 0; i < operandOrder.length; i++) {
			if(operand == operandOrder[i]) index = i;
		}
		return index;
	}
	
	public double getResult(String question) {
		char[] questionData = question.toCharArray(); 
		
		char operand = questionData[1];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double result = 0;
		
		if(operand == '+') result = firstNumber + secondNumber;
		if(operand == '-') result = firstNumber - secondNumber;
		if(operand == '*') result = firstNumber * secondNumber;
		if(operand == '/') result = firstNumber / secondNumber;
		double roundedResult = Math.round(result);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	public double getResultAverage(String question) {
		char[] questionData = question.toCharArray(); 
		
		char firstOperand = questionData[1];
		char secondOperand = questionData[3];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double thirdNumber = Double.parseDouble(String.valueOf(questionData[4]));
		double result = 0;
		
		
		char[] operandOrder = {'-', '+', '/', '*'};
		int indexFirst = findIndex(firstOperand);
		int indexSecond = findIndex(secondOperand);
		double totalResult = 0;
		double initialResult = 0;
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+') initialResult = secondNumber + thirdNumber;
			if(secondOperand == '-') initialResult = secondNumber - thirdNumber;
			if(secondOperand == '*') initialResult = secondNumber * thirdNumber;
			if(secondOperand == '/') initialResult = secondNumber / thirdNumber;
			
			
		}
		
		else if (indexSecond < indexFirst) {
			if(firstOperand == '+') initialResult = firstNumber + secondNumber;
			if(firstOperand == '-') initialResult = firstNumber - secondNumber;
			if(firstOperand == '*') initialResult = firstNumber * secondNumber;
			if(firstOperand == '/') initialResult = firstNumber / secondNumber;
		}
		else {
			if(firstOperand == '+') totalResult = firstNumber + secondNumber + thirdNumber;
			if(firstOperand == '-') totalResult = firstNumber - secondNumber - thirdNumber;
			if(firstOperand == '*') totalResult = firstNumber * secondNumber * thirdNumber;
			if(firstOperand == '/') totalResult = firstNumber / secondNumber / thirdNumber;
		}
		
		
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+')  totalResult = firstNumber + thirdNumber;
			if(secondOperand == '-')  totalResult = firstNumber - thirdNumber;
			if(secondOperand == '*')  totalResult = firstNumber * thirdNumber;
			if(secondOperand == '/')  totalResult = firstNumber / thirdNumber;
			
			
		}
		
		else (indexFirst < indexSecond) {
			if(firstOperand == '+')  totalResult = initialResult + thirdNumber;
			if(firstOperand == '-')  totalResult = initialResult - thirdNumber;
			if(firstOperand == '*')  totalResult = initialResult * thirdNumber;
			if(firstOperand == '/')  totalResult = initialResult / thirdNumber;
		}
		
		
		
		
		
		double roundedResult = Math.round(totalResult);
		return roundedResult;
		
	}
	
	public String generateQuestion() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond];
		
		return question;
	}
	
	public String generateQuestionAverage() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexThird = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		int randomIndexOperand2 = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond] + operands[randomIndexOperand2] + numbers[randomIndexThird];
		System.out.println(question);
		return question;
	}
	
	
	public Main() {
		setIconImage(Toolkit.getDefaultToolkit().getImage("C:\\Users\\user\\Downloads\\quiz.png"));
		setTitle("QUIZ GAME");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(400, 100, 600, 600);
		contentPane = new JPanel();
		contentPane.setBackground(Color.WHITE);
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));

		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JPanel panel = new JPanel();
		panel.setBackground(Color.RED);
		panel.setBounds(10, 0, 564, 550);
		contentPane.add(panel);
		panel.setLayout(null);
		
		lblNewLabel_1_2_4 = new JLabel("quiz");
		lblNewLabel_1_2_4.setForeground(Color.WHITE);
		lblNewLabel_1_2_4.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_4.setBounds(140, 130, 561, 120);
		panel.add(lblNewLabel_1_2_4);
		
		lblNewLabel_1_2 = new JLabel("MATH");
		lblNewLabel_1_2.setForeground(Color.WHITE);
		lblNewLabel_1_2.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_2.setBounds(70, 50, 561, 120);
		panel.add(lblNewLabel_1_2);
		
		lblNewLabel_1 = new JLabel("MATH");
		lblNewLabel_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1.setForeground(Color.DARK_GRAY);
		lblNewLabel_1.setBounds(78, 50, 777, 120);
		panel.add(lblNewLabel_1);
		
		lblNewLabel_1_1 = new JLabel("MATH");
		lblNewLabel_1_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_1.setBounds(89, 50, 612, 120);
		panel.add(lblNewLabel_1_1);
		
		lblNewLabel_1_2_2 = new JLabel("quiz");
		lblNewLabel_1_2_2.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_2.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_2.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_2);
		
		lblNewLabel_1_2_1 = new JLabel("quiz");
		lblNewLabel_1_2_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_2_1.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_1.setBounds(159, 130, 561, 120);
		panel.add(lblNewLabel_1_2_1);
		
		lblNewLabel_1_2_3 = new JLabel("quiz");
		lblNewLabel_1_2_3.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_3.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_3.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_3);
		
		lblNewLabel = new JLabel("");
		lblNewLabel.setFont(new Font("Dialog", Font.BOLD, 9));
		lblNewLabel.setBounds(225, 428, 161, 14);
		panel.add(lblNewLabel);
		
		rdbtnEasy = new JRadioButton("EASY");
		rdbtnEasy.setForeground(Color.WHITE);
		rdbtnEasy.setBackground(Color.RED);
		rdbtnEasy.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnEasy.setBounds(215, 232, 269, 78);
		panel.add(rdbtnEasy);
		
		rdbtnAverage = new JRadioButton("AVERAGE");
		rdbtnAverage.setForeground(Color.WHITE);
		rdbtnAverage.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnAverage.setBackground(Color.RED);
		rdbtnAverage.setBounds(188, 290, 269, 73);
		panel.add(rdbtnAverage);
		
		rdbtnDifficult = new JRadioButton("DIFFICULT");
		rdbtnDifficult.setForeground(Color.WHITE);
		rdbtnDifficult.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnDifficult.setBackground(Color.RED);
		rdbtnDifficult.setBounds(176, 342, 269, 68);
		panel.add(rdbtnDifficult);
		
		ButtonGroup difficulty = new ButtonGroup();
		difficulty.add(rdbtnEasy);
		difficulty.add(rdbtnAverage);
		difficulty.add(rdbtnDifficult);
		
		btnStart = new JButton("START");
		
		
	
		
		btnStart.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
			if(rdbtnEasy.isSelected()){
				///////////
				
 				lblNewLabel_3.setText(generateQuestion());
 				
 				
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_1.setVisible(true);
				
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnAverage.isSelected()){
				
				lblNewLabel_3.setText(generateQuestionAverage());
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_2.setVisible(true);
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnDifficult.isSelected()){
				
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			}
		});
		btnStart.setBackground(Color.WHITE);
		btnStart.setForeground(Color.RED);
		btnStart.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnStart.setBounds(212, 453, 125, 43);
		panel.add(btnStart);
		
		lblNewLabel_2 = new JLabel("");
		lblNewLabel_2.setVisible(false);
		lblNewLabel_2.setForeground(Color.WHITE);
		lblNewLabel_2.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_2.setBounds(317, 90, 125, 129);
		panel.add(lblNewLabel_2);
		
		lblNewLabel_3 = new JLabel("");
		lblNewLabel_3.setVisible(false);
		lblNewLabel_3.setForeground(Color.WHITE);
		lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_3.setBounds(215, 90, 300, 200);
		panel.add(lblNewLabel_3);
		
		lblNewLabel_4 = new JLabel("");
		lblNewLabel_4.addMouseListener(new MouseAdapter() {
			public void mouseReleased(MouseEvent e) {
				
			}
		});
		lblNewLabel_4.setVisible(false);
		lblNewLabel_4.setForeground(Color.WHITE);
		lblNewLabel_4.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_4.setBounds(121, 90, 103, 129);
		panel.add(lblNewLabel_4);
				
		textField = new JTextField();
		textField.setHorizontalAlignment(SwingConstants.RIGHT);
		textField.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField.setVisible(false);
		textField.setBounds(121, 261, 324, 49);
		panel.add(textField);
		textField.setColumns(10);
		
		textField1 = new JTextField();
		textField1.setHorizontalAlignment(SwingConstants.RIGHT);
		textField1.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField1.setVisible(false);
		textField1.setBounds(121, 261, 324, 49);
		panel.add(textField1);
		textField1.setColumns(10);
		
		returnButton = new JButton("Return");
		returnButton.setVisible(false);
		returnButton.setFont(new Font("Tahoma", Font.BOLD, 20));
		returnButton.setForeground(Color.RED);
		returnButton.setBackground(Color.WHITE);
		returnButton.setBounds(225, 363, 126, 43);
		panel.add(returnButton);
		
		
		returnButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel.setVisible(true);
				rdbtnEasy.setVisible(true);
				rdbtnAverage.setVisible(true);
				rdbtnDifficult.setVisible(true);
				lblNewLabel_1_2_3.setVisible(true);
				lblNewLabel_1_2_1.setVisible(true);
				lblNewLabel_1_2_2.setVisible(true);
				lblNewLabel_1_1.setVisible(true);
				lblNewLabel_1.setVisible(true);
				lblNewLabel_1_2.setVisible(true);
				lblNewLabel_1_2_4.setVisible(true);
				btnStart.setVisible(true);
				returnButton.setVisible(false);
				lblNewLabel_3.setVisible(false);
				lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
			}

		
			
			
		});
		
		btnNewButton_1 = new JButton("SUBMIT");
		btnNewButton_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				
				
				double result = getResult(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
				
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
				
			}
		});
		btnNewButton_1.setVisible(false);
		btnNewButton_1.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_1.setForeground(Color.RED);
		btnNewButton_1.setBackground(Color.WHITE);
		btnNewButton_1.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_1);
		
		//Button 2
		btnNewButton_2 = new JButton("SUBMIT");
		btnNewButton_2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				double result = getResultAverage(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
			
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
			}
		});
		btnNewButton_2.setVisible(false);
		btnNewButton_2.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_2.setForeground(Color.RED);
		btnNewButton_2.setBackground(Color.WHITE);
		btnNewButton_2.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_2);
		
		
		textField2 = new JTextField();
		textField2.setHorizontalAlignment(SwingConstants.RIGHT);
		textField2.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField2.setVisible(false);
		textField2.setBounds(121, 261, 324, 49);
		panel.add(textField2);
		textField2.setColumns(10);
		
		btnNewButton_3 = new JButton("SUBMIT");
		btnNewButton_3.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel_2.setVisible(false);
				
				textField.setVisible(false);
				textField1.setVisible(false);
				btnNewButton_1.setVisible(false);
				btnNewButton_2.setVisible(false);
				
				textField2.setVisible(false);
				btnNewButton_3.setVisible(false);
				
				
				
			}
		});
		btnNewButton_3.setVisible(false);
		btnNewButton_3.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_3.setForeground(Color.RED);
		btnNewButton_3.setBackground(Color.WHITE);
		btnNewButton_3.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_3);
		
		
	}
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-04-30 19:14:05.541
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-04-30 19:14:05.542
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-30 19:14:05.739
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import java.awt.Color;
import java.awt.Toolkit;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

import java.awt.Font;
import javax.swing.JRadioButton;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Arrays;
import java.util.Random;


public class Main extends JFrame {

	private JPanel contentPane;
	private JLabel lblNewLabel_1_2;
	private JLabel lblNewLabel_1;
	private JLabel lblNewLabel_1_1; 
	private JLabel lblNewLabel_1_2_1;
	private JLabel lblNewLabel_1_2_2;
	private JLabel lblNewLabel_1_2_3;
	private JLabel lblNewLabel_1_2_4;
	private JRadioButton rdbtnEasy;
	private JRadioButton rdbtnAverage;
	private JRadioButton rdbtnDifficult;
	private JButton btnStart; 
	private JLabel lblNewLabel;
	private JLabel lblNewLabel_2;
	private JLabel lblNewLabel_3;
	private JLabel lblNewLabel_4;
	private JTextField textField;
	private JButton btnNewButton_1;
	private JTextField textField1;
	private JButton btnNewButton_2;
	private JButton returnButton;

	private JTextField textField2;
	private JButton btnNewButton_3;
	int currentQuestionNumber = 1;
	int playerScore = 0;
	Random random = new Random();
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Main frame = new Main();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
	
	
	
	

	/**
	 * Create the frame.
	 */
	
	
	public int findIndex(char operand) {
		char[] operandOrder = {'-', '+', '/', '*'};
		int index = 0;
		
		for(int i = 0; i < operandOrder.length; i++) {
			if(operand == operandOrder[i]) index = i;
		}
		return index;
	}
	
	public double getResult(String question) {
		char[] questionData = question.toCharArray(); 
		
		char operand = questionData[1];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double result = 0;
		
		if(operand == '+') result = firstNumber + secondNumber;
		if(operand == '-') result = firstNumber - secondNumber;
		if(operand == '*') result = firstNumber * secondNumber;
		if(operand == '/') result = firstNumber / secondNumber;
		double roundedResult = Math.round(result);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	public double getResultAverage(String question) {
		char[] questionData = question.toCharArray(); 
		
		char firstOperand = questionData[1];
		char secondOperand = questionData[3];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double thirdNumber = Double.parseDouble(String.valueOf(questionData[4]));
		double result = 0;
		
		
		char[] operandOrder = {'-', '+', '/', '*'};
		int indexFirst = findIndex(firstOperand);
		int indexSecond = findIndex(secondOperand);
		double totalResult = 0;
		double initialResult = 0;
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+') initialResult = secondNumber + thirdNumber;
			if(secondOperand == '-') initialResult = secondNumber - thirdNumber;
			if(secondOperand == '*') initialResult = secondNumber * thirdNumber;
			if(secondOperand == '/') initialResult = secondNumber / thirdNumber;
			
			
		}
		
		else if (indexSecond < indexFirst) {
			if(firstOperand == '+') initialResult = firstNumber + secondNumber;
			if(firstOperand == '-') initialResult = firstNumber - secondNumber;
			if(firstOperand == '*') initialResult = firstNumber * secondNumber;
			if(firstOperand == '/') initialResult = firstNumber / secondNumber;
		}
		else {
			if(firstOperand == '+') totalResult = firstNumber + secondNumber + thirdNumber;
			if(firstOperand == '-') totalResult = firstNumber - secondNumber - thirdNumber;
			if(firstOperand == '*') totalResult = firstNumber * secondNumber * thirdNumber;
			if(firstOperand == '/') totalResult = firstNumber / secondNumber / thirdNumber;
		}
		
		
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+')  totalResult = firstNumber + thirdNumber;
			if(secondOperand == '-')  totalResult = firstNumber - thirdNumber;
			if(secondOperand == '*')  totalResult = firstNumber * thirdNumber;
			if(secondOperand == '/')  totalResult = firstNumber / thirdNumber;
			
			
		}
		
		else (indexFirst < indexSecond) {
			if(firstOperand == '+')  totalResult = initialResult + thirdNumber;
			if(firstOperand == '-')  totalResult = initialResult - thirdNumber;
			if(firstOperand == '*')  totalResult = initialResult * thirdNumber;
			if(firstOperand == '/')  totalResult = initialResult / thirdNumber;
		}
		
		
		
		
		
		double roundedResult = Math.round(totalResult);
		return roundedResult;
		
	}
	
	public String generateQuestion() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond];
		
		return question;
	}
	
	public String generateQuestionAverage() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexThird = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		int randomIndexOperand2 = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond] + operands[randomIndexOperand2] + numbers[randomIndexThird];
		System.out.println(question);
		return question;
	}
	
	
	public Main() {
		setIconImage(Toolkit.getDefaultToolkit().getImage("C:\\Users\\user\\Downloads\\quiz.png"));
		setTitle("QUIZ GAME");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(400, 100, 600, 600);
		contentPane = new JPanel();
		contentPane.setBackground(Color.WHITE);
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));

		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JPanel panel = new JPanel();
		panel.setBackground(Color.RED);
		panel.setBounds(10, 0, 564, 550);
		contentPane.add(panel);
		panel.setLayout(null);
		
		lblNewLabel_1_2_4 = new JLabel("quiz");
		lblNewLabel_1_2_4.setForeground(Color.WHITE);
		lblNewLabel_1_2_4.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_4.setBounds(140, 130, 561, 120);
		panel.add(lblNewLabel_1_2_4);
		
		lblNewLabel_1_2 = new JLabel("MATH");
		lblNewLabel_1_2.setForeground(Color.WHITE);
		lblNewLabel_1_2.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_2.setBounds(70, 50, 561, 120);
		panel.add(lblNewLabel_1_2);
		
		lblNewLabel_1 = new JLabel("MATH");
		lblNewLabel_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1.setForeground(Color.DARK_GRAY);
		lblNewLabel_1.setBounds(78, 50, 777, 120);
		panel.add(lblNewLabel_1);
		
		lblNewLabel_1_1 = new JLabel("MATH");
		lblNewLabel_1_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_1.setBounds(89, 50, 612, 120);
		panel.add(lblNewLabel_1_1);
		
		lblNewLabel_1_2_2 = new JLabel("quiz");
		lblNewLabel_1_2_2.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_2.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_2.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_2);
		
		lblNewLabel_1_2_1 = new JLabel("quiz");
		lblNewLabel_1_2_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_2_1.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_1.setBounds(159, 130, 561, 120);
		panel.add(lblNewLabel_1_2_1);
		
		lblNewLabel_1_2_3 = new JLabel("quiz");
		lblNewLabel_1_2_3.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_3.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_3.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_3);
		
		lblNewLabel = new JLabel("");
		lblNewLabel.setFont(new Font("Dialog", Font.BOLD, 9));
		lblNewLabel.setBounds(225, 428, 161, 14);
		panel.add(lblNewLabel);
		
		rdbtnEasy = new JRadioButton("EASY");
		rdbtnEasy.setForeground(Color.WHITE);
		rdbtnEasy.setBackground(Color.RED);
		rdbtnEasy.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnEasy.setBounds(215, 232, 269, 78);
		panel.add(rdbtnEasy);
		
		rdbtnAverage = new JRadioButton("AVERAGE");
		rdbtnAverage.setForeground(Color.WHITE);
		rdbtnAverage.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnAverage.setBackground(Color.RED);
		rdbtnAverage.setBounds(188, 290, 269, 73);
		panel.add(rdbtnAverage);
		
		rdbtnDifficult = new JRadioButton("DIFFICULT");
		rdbtnDifficult.setForeground(Color.WHITE);
		rdbtnDifficult.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnDifficult.setBackground(Color.RED);
		rdbtnDifficult.setBounds(176, 342, 269, 68);
		panel.add(rdbtnDifficult);
		
		ButtonGroup difficulty = new ButtonGroup();
		difficulty.add(rdbtnEasy);
		difficulty.add(rdbtnAverage);
		difficulty.add(rdbtnDifficult);
		
		btnStart = new JButton("START");
		
		
	
		
		btnStart.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
			if(rdbtnEasy.isSelected()){
				///////////
				
 				lblNewLabel_3.setText(generateQuestion());
 				
 				
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_1.setVisible(true);
				
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnAverage.isSelected()){
				
				lblNewLabel_3.setText(generateQuestionAverage());
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_2.setVisible(true);
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnDifficult.isSelected()){
				
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			}
		});
		btnStart.setBackground(Color.WHITE);
		btnStart.setForeground(Color.RED);
		btnStart.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnStart.setBounds(212, 453, 125, 43);
		panel.add(btnStart);
		
		lblNewLabel_2 = new JLabel("");
		lblNewLabel_2.setVisible(false);
		lblNewLabel_2.setForeground(Color.WHITE);
		lblNewLabel_2.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_2.setBounds(317, 90, 125, 129);
		panel.add(lblNewLabel_2);
		
		lblNewLabel_3 = new JLabel("");
		lblNewLabel_3.setVisible(false);
		lblNewLabel_3.setForeground(Color.WHITE);
		lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_3.setBounds(215, 90, 300, 200);
		panel.add(lblNewLabel_3);
		
		lblNewLabel_4 = new JLabel("");
		lblNewLabel_4.addMouseListener(new MouseAdapter() {
			public void mouseReleased(MouseEvent e) {
				
			}
		});
		lblNewLabel_4.setVisible(false);
		lblNewLabel_4.setForeground(Color.WHITE);
		lblNewLabel_4.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_4.setBounds(121, 90, 103, 129);
		panel.add(lblNewLabel_4);
				
		textField = new JTextField();
		textField.setHorizontalAlignment(SwingConstants.RIGHT);
		textField.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField.setVisible(false);
		textField.setBounds(121, 261, 324, 49);
		panel.add(textField);
		textField.setColumns(10);
		
		textField1 = new JTextField();
		textField1.setHorizontalAlignment(SwingConstants.RIGHT);
		textField1.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField1.setVisible(false);
		textField1.setBounds(121, 261, 324, 49);
		panel.add(textField1);
		textField1.setColumns(10);
		
		returnButton = new JButton("Return");
		returnButton.setVisible(false);
		returnButton.setFont(new Font("Tahoma", Font.BOLD, 20));
		returnButton.setForeground(Color.RED);
		returnButton.setBackground(Color.WHITE);
		returnButton.setBounds(225, 363, 126, 43);
		panel.add(returnButton);
		
		
		returnButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel.setVisible(true);
				rdbtnEasy.setVisible(true);
				rdbtnAverage.setVisible(true);
				rdbtnDifficult.setVisible(true);
				lblNewLabel_1_2_3.setVisible(true);
				lblNewLabel_1_2_1.setVisible(true);
				lblNewLabel_1_2_2.setVisible(true);
				lblNewLabel_1_1.setVisible(true);
				lblNewLabel_1.setVisible(true);
				lblNewLabel_1_2.setVisible(true);
				lblNewLabel_1_2_4.setVisible(true);
				btnStart.setVisible(true);
				returnButton.setVisible(false);
				lblNewLabel_3.setVisible(false);
				lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
			}

		
			
			
		});
		
		btnNewButton_1 = new JButton("SUBMIT");
		btnNewButton_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				
				
				double result = getResult(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
				
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
				
			}
		});
		btnNewButton_1.setVisible(false);
		btnNewButton_1.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_1.setForeground(Color.RED);
		btnNewButton_1.setBackground(Color.WHITE);
		btnNewButton_1.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_1);
		
		//Button 2
		btnNewButton_2 = new JButton("SUBMIT");
		btnNewButton_2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				double result = getResultAverage(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
			
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
			}
		});
		btnNewButton_2.setVisible(false);
		btnNewButton_2.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_2.setForeground(Color.RED);
		btnNewButton_2.setBackground(Color.WHITE);
		btnNewButton_2.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_2);
		
		
		textField2 = new JTextField();
		textField2.setHorizontalAlignment(SwingConstants.RIGHT);
		textField2.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField2.setVisible(false);
		textField2.setBounds(121, 261, 324, 49);
		panel.add(textField2);
		textField2.setColumns(10);
		
		btnNewButton_3 = new JButton("SUBMIT");
		btnNewButton_3.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel_2.setVisible(false);
				
				textField.setVisible(false);
				textField1.setVisible(false);
				btnNewButton_1.setVisible(false);
				btnNewButton_2.setVisible(false);
				
				textField2.setVisible(false);
				btnNewButton_3.setVisible(false);
				
				
				
			}
		});
		btnNewButton_3.setVisible(false);
		btnNewButton_3.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_3.setForeground(Color.RED);
		btnNewButton_3.setBackground(Color.WHITE);
		btnNewButton_3.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_3);
		
		
	}
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-04-30 19:14:05.740
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-04-30 19:14:05.742
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-30 19:14:06.848
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import java.awt.Color;
import java.awt.Toolkit;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

import java.awt.Font;
import javax.swing.JRadioButton;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Arrays;
import java.util.Random;


public class Main extends JFrame {

	private JPanel contentPane;
	private JLabel lblNewLabel_1_2;
	private JLabel lblNewLabel_1;
	private JLabel lblNewLabel_1_1; 
	private JLabel lblNewLabel_1_2_1;
	private JLabel lblNewLabel_1_2_2;
	private JLabel lblNewLabel_1_2_3;
	private JLabel lblNewLabel_1_2_4;
	private JRadioButton rdbtnEasy;
	private JRadioButton rdbtnAverage;
	private JRadioButton rdbtnDifficult;
	private JButton btnStart; 
	private JLabel lblNewLabel;
	private JLabel lblNewLabel_2;
	private JLabel lblNewLabel_3;
	private JLabel lblNewLabel_4;
	private JTextField textField;
	private JButton btnNewButton_1;
	private JTextField textField1;
	private JButton btnNewButton_2;
	private JButton returnButton;

	private JTextField textField2;
	private JButton btnNewButton_3;
	int currentQuestionNumber = 1;
	int playerScore = 0;
	Random random = new Random();
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Main frame = new Main();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
	
	
	
	

	/**
	 * Create the frame.
	 */
	
	
	public int findIndex(char operand) {
		char[] operandOrder = {'-', '+', '/', '*'};
		int index = 0;
		
		for(int i = 0; i < operandOrder.length; i++) {
			if(operand == operandOrder[i]) index = i;
		}
		return index;
	}
	
	public double getResult(String question) {
		char[] questionData = question.toCharArray(); 
		
		char operand = questionData[1];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double result = 0;
		
		if(operand == '+') result = firstNumber + secondNumber;
		if(operand == '-') result = firstNumber - secondNumber;
		if(operand == '*') result = firstNumber * secondNumber;
		if(operand == '/') result = firstNumber / secondNumber;
		double roundedResult = Math.round(result);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	public double getResultAverage(String question) {
		char[] questionData = question.toCharArray(); 
		
		char firstOperand = questionData[1];
		char secondOperand = questionData[3];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double thirdNumber = Double.parseDouble(String.valueOf(questionData[4]));
		double result = 0;
		
		
		char[] operandOrder = {'-', '+', '/', '*'};
		int indexFirst = findIndex(firstOperand);
		int indexSecond = findIndex(secondOperand);
		double totalResult = 0;
		double initialResult = 0;
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+') initialResult = secondNumber + thirdNumber;
			if(secondOperand == '-') initialResult = secondNumber - thirdNumber;
			if(secondOperand == '*') initialResult = secondNumber * thirdNumber;
			if(secondOperand == '/') initialResult = secondNumber / thirdNumber;
			
			
		}
		
		else if (indexSecond < indexFirst) {
			if(firstOperand == '+') initialResult = firstNumber + secondNumber;
			if(firstOperand == '-') initialResult = firstNumber - secondNumber;
			if(firstOperand == '*') initialResult = firstNumber * secondNumber;
			if(firstOperand == '/') initialResult = firstNumber / secondNumber;
		}
		else {
			if(firstOperand == '+') totalResult = firstNumber + secondNumber + thirdNumber;
			if(firstOperand == '-') totalResult = firstNumber - secondNumber - thirdNumber;
			if(firstOperand == '*') totalResult = firstNumber * secondNumber * thirdNumber;
			if(firstOperand == '/') totalResult = firstNumber / secondNumber / thirdNumber;
		}
		
		
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+')  totalResult = firstNumber + thirdNumber;
			if(secondOperand == '-')  totalResult = firstNumber - thirdNumber;
			if(secondOperand == '*')  totalResult = firstNumber * thirdNumber;
			if(secondOperand == '/')  totalResult = firstNumber / thirdNumber;
			
			
		}
		
		else (indexFirst < indexSecond) {
			if(firstOperand == '+')  totalResult = initialResult + thirdNumber;
			if(firstOperand == '-')  totalResult = initialResult - thirdNumber;
			if(firstOperand == '*')  totalResult = initialResult * thirdNumber;
			if(firstOperand == '/')  totalResult = initialResult / thirdNumber;
		}
		
		
		
		
		
		double roundedResult = Math.round(totalResult);
		return roundedResult;
		
	}
	
	public String generateQuestion() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond];
		
		return question;
	}
	
	public String generateQuestionAverage() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexThird = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		int randomIndexOperand2 = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond] + operands[randomIndexOperand2] + numbers[randomIndexThird];
		System.out.println(question);
		return question;
	}
	
	
	public Main() {
		setIconImage(Toolkit.getDefaultToolkit().getImage("C:\\Users\\user\\Downloads\\quiz.png"));
		setTitle("QUIZ GAME");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(400, 100, 600, 600);
		contentPane = new JPanel();
		contentPane.setBackground(Color.WHITE);
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));

		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JPanel panel = new JPanel();
		panel.setBackground(Color.RED);
		panel.setBounds(10, 0, 564, 550);
		contentPane.add(panel);
		panel.setLayout(null);
		
		lblNewLabel_1_2_4 = new JLabel("quiz");
		lblNewLabel_1_2_4.setForeground(Color.WHITE);
		lblNewLabel_1_2_4.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_4.setBounds(140, 130, 561, 120);
		panel.add(lblNewLabel_1_2_4);
		
		lblNewLabel_1_2 = new JLabel("MATH");
		lblNewLabel_1_2.setForeground(Color.WHITE);
		lblNewLabel_1_2.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_2.setBounds(70, 50, 561, 120);
		panel.add(lblNewLabel_1_2);
		
		lblNewLabel_1 = new JLabel("MATH");
		lblNewLabel_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1.setForeground(Color.DARK_GRAY);
		lblNewLabel_1.setBounds(78, 50, 777, 120);
		panel.add(lblNewLabel_1);
		
		lblNewLabel_1_1 = new JLabel("MATH");
		lblNewLabel_1_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_1.setBounds(89, 50, 612, 120);
		panel.add(lblNewLabel_1_1);
		
		lblNewLabel_1_2_2 = new JLabel("quiz");
		lblNewLabel_1_2_2.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_2.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_2.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_2);
		
		lblNewLabel_1_2_1 = new JLabel("quiz");
		lblNewLabel_1_2_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_2_1.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_1.setBounds(159, 130, 561, 120);
		panel.add(lblNewLabel_1_2_1);
		
		lblNewLabel_1_2_3 = new JLabel("quiz");
		lblNewLabel_1_2_3.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_3.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_3.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_3);
		
		lblNewLabel = new JLabel("");
		lblNewLabel.setFont(new Font("Dialog", Font.BOLD, 9));
		lblNewLabel.setBounds(225, 428, 161, 14);
		panel.add(lblNewLabel);
		
		rdbtnEasy = new JRadioButton("EASY");
		rdbtnEasy.setForeground(Color.WHITE);
		rdbtnEasy.setBackground(Color.RED);
		rdbtnEasy.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnEasy.setBounds(215, 232, 269, 78);
		panel.add(rdbtnEasy);
		
		rdbtnAverage = new JRadioButton("AVERAGE");
		rdbtnAverage.setForeground(Color.WHITE);
		rdbtnAverage.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnAverage.setBackground(Color.RED);
		rdbtnAverage.setBounds(188, 290, 269, 73);
		panel.add(rdbtnAverage);
		
		rdbtnDifficult = new JRadioButton("DIFFICULT");
		rdbtnDifficult.setForeground(Color.WHITE);
		rdbtnDifficult.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnDifficult.setBackground(Color.RED);
		rdbtnDifficult.setBounds(176, 342, 269, 68);
		panel.add(rdbtnDifficult);
		
		ButtonGroup difficulty = new ButtonGroup();
		difficulty.add(rdbtnEasy);
		difficulty.add(rdbtnAverage);
		difficulty.add(rdbtnDifficult);
		
		btnStart = new JButton("START");
		
		
	
		
		btnStart.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
			if(rdbtnEasy.isSelected()){
				///////////
				
 				lblNewLabel_3.setText(generateQuestion());
 				
 				
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_1.setVisible(true);
				
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnAverage.isSelected()){
				
				lblNewLabel_3.setText(generateQuestionAverage());
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_2.setVisible(true);
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnDifficult.isSelected()){
				
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			}
		});
		btnStart.setBackground(Color.WHITE);
		btnStart.setForeground(Color.RED);
		btnStart.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnStart.setBounds(212, 453, 125, 43);
		panel.add(btnStart);
		
		lblNewLabel_2 = new JLabel("");
		lblNewLabel_2.setVisible(false);
		lblNewLabel_2.setForeground(Color.WHITE);
		lblNewLabel_2.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_2.setBounds(317, 90, 125, 129);
		panel.add(lblNewLabel_2);
		
		lblNewLabel_3 = new JLabel("");
		lblNewLabel_3.setVisible(false);
		lblNewLabel_3.setForeground(Color.WHITE);
		lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_3.setBounds(215, 90, 300, 200);
		panel.add(lblNewLabel_3);
		
		lblNewLabel_4 = new JLabel("");
		lblNewLabel_4.addMouseListener(new MouseAdapter() {
			public void mouseReleased(MouseEvent e) {
				
			}
		});
		lblNewLabel_4.setVisible(false);
		lblNewLabel_4.setForeground(Color.WHITE);
		lblNewLabel_4.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_4.setBounds(121, 90, 103, 129);
		panel.add(lblNewLabel_4);
				
		textField = new JTextField();
		textField.setHorizontalAlignment(SwingConstants.RIGHT);
		textField.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField.setVisible(false);
		textField.setBounds(121, 261, 324, 49);
		panel.add(textField);
		textField.setColumns(10);
		
		textField1 = new JTextField();
		textField1.setHorizontalAlignment(SwingConstants.RIGHT);
		textField1.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField1.setVisible(false);
		textField1.setBounds(121, 261, 324, 49);
		panel.add(textField1);
		textField1.setColumns(10);
		
		returnButton = new JButton("Return");
		returnButton.setVisible(false);
		returnButton.setFont(new Font("Tahoma", Font.BOLD, 20));
		returnButton.setForeground(Color.RED);
		returnButton.setBackground(Color.WHITE);
		returnButton.setBounds(225, 363, 126, 43);
		panel.add(returnButton);
		
		
		returnButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel.setVisible(true);
				rdbtnEasy.setVisible(true);
				rdbtnAverage.setVisible(true);
				rdbtnDifficult.setVisible(true);
				lblNewLabel_1_2_3.setVisible(true);
				lblNewLabel_1_2_1.setVisible(true);
				lblNewLabel_1_2_2.setVisible(true);
				lblNewLabel_1_1.setVisible(true);
				lblNewLabel_1.setVisible(true);
				lblNewLabel_1_2.setVisible(true);
				lblNewLabel_1_2_4.setVisible(true);
				btnStart.setVisible(true);
				returnButton.setVisible(false);
				lblNewLabel_3.setVisible(false);
				lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
			}

		
			
			
		});
		
		btnNewButton_1 = new JButton("SUBMIT");
		btnNewButton_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				
				
				double result = getResult(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
				
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
				
			}
		});
		btnNewButton_1.setVisible(false);
		btnNewButton_1.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_1.setForeground(Color.RED);
		btnNewButton_1.setBackground(Color.WHITE);
		btnNewButton_1.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_1);
		
		//Button 2
		btnNewButton_2 = new JButton("SUBMIT");
		btnNewButton_2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				double result = getResultAverage(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
			
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
			}
		});
		btnNewButton_2.setVisible(false);
		btnNewButton_2.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_2.setForeground(Color.RED);
		btnNewButton_2.setBackground(Color.WHITE);
		btnNewButton_2.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_2);
		
		
		textField2 = new JTextField();
		textField2.setHorizontalAlignment(SwingConstants.RIGHT);
		textField2.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField2.setVisible(false);
		textField2.setBounds(121, 261, 324, 49);
		panel.add(textField2);
		textField2.setColumns(10);
		
		btnNewButton_3 = new JButton("SUBMIT");
		btnNewButton_3.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel_2.setVisible(false);
				
				textField.setVisible(false);
				textField1.setVisible(false);
				btnNewButton_1.setVisible(false);
				btnNewButton_2.setVisible(false);
				
				textField2.setVisible(false);
				btnNewButton_3.setVisible(false);
				
				
				
			}
		});
		btnNewButton_3.setVisible(false);
		btnNewButton_3.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_3.setForeground(Color.RED);
		btnNewButton_3.setBackground(Color.WHITE);
		btnNewButton_3.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_3);
		
		
	}
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-04-30 19:14:06.850
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-04-30 19:14:06.851
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-30 19:14:08.322
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import java.awt.Color;
import java.awt.Toolkit;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

import java.awt.Font;
import javax.swing.JRadioButton;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Arrays;
import java.util.Random;


public class Main extends JFrame {

	private JPanel contentPane;
	private JLabel lblNewLabel_1_2;
	private JLabel lblNewLabel_1;
	private JLabel lblNewLabel_1_1; 
	private JLabel lblNewLabel_1_2_1;
	private JLabel lblNewLabel_1_2_2;
	private JLabel lblNewLabel_1_2_3;
	private JLabel lblNewLabel_1_2_4;
	private JRadioButton rdbtnEasy;
	private JRadioButton rdbtnAverage;
	private JRadioButton rdbtnDifficult;
	private JButton btnStart; 
	private JLabel lblNewLabel;
	private JLabel lblNewLabel_2;
	private JLabel lblNewLabel_3;
	private JLabel lblNewLabel_4;
	private JTextField textField;
	private JButton btnNewButton_1;
	private JTextField textField1;
	private JButton btnNewButton_2;
	private JButton returnButton;

	private JTextField textField2;
	private JButton btnNewButton_3;
	int currentQuestionNumber = 1;
	int playerScore = 0;
	Random random = new Random();
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Main frame = new Main();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
	
	
	
	

	/**
	 * Create the frame.
	 */
	
	
	public int findIndex(char operand) {
		char[] operandOrder = {'-', '+', '/', '*'};
		int index = 0;
		
		for(int i = 0; i < operandOrder.length; i++) {
			if(operand == operandOrder[i]) index = i;
		}
		return index;
	}
	
	public double getResult(String question) {
		char[] questionData = question.toCharArray(); 
		
		char operand = questionData[1];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double result = 0;
		
		if(operand == '+') result = firstNumber + secondNumber;
		if(operand == '-') result = firstNumber - secondNumber;
		if(operand == '*') result = firstNumber * secondNumber;
		if(operand == '/') result = firstNumber / secondNumber;
		double roundedResult = Math.round(result);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	public double getResultAverage(String question) {
		char[] questionData = question.toCharArray(); 
		
		char firstOperand = questionData[1];
		char secondOperand = questionData[3];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double thirdNumber = Double.parseDouble(String.valueOf(questionData[4]));
		double result = 0;
		
		
		char[] operandOrder = {'-', '+', '/', '*'};
		int indexFirst = findIndex(firstOperand);
		int indexSecond = findIndex(secondOperand);
		double totalResult = 0;
		double initialResult = 0;
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+') initialResult = secondNumber + thirdNumber;
			if(secondOperand == '-') initialResult = secondNumber - thirdNumber;
			if(secondOperand == '*') initialResult = secondNumber * thirdNumber;
			if(secondOperand == '/') initialResult = secondNumber / thirdNumber;
			
			
		}
		
		else if (indexSecond < indexFirst) {
			if(firstOperand == '+') initialResult = firstNumber + secondNumber;
			if(firstOperand == '-') initialResult = firstNumber - secondNumber;
			if(firstOperand == '*') initialResult = firstNumber * secondNumber;
			if(firstOperand == '/') initialResult = firstNumber / secondNumber;
		}
		else {
			if(firstOperand == '+') totalResult = firstNumber + secondNumber + thirdNumber;
			if(firstOperand == '-') totalResult = firstNumber - secondNumber - thirdNumber;
			if(firstOperand == '*') totalResult = firstNumber * secondNumber * thirdNumber;
			if(firstOperand == '/') totalResult = firstNumber / secondNumber / thirdNumber;
		}
		
		
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+')  totalResult = firstNumber + thirdNumber;
			if(secondOperand == '-')  totalResult = firstNumber - thirdNumber;
			if(secondOperand == '*')  totalResult = firstNumber * thirdNumber;
			if(secondOperand == '/')  totalResult = firstNumber / thirdNumber;
			
			
		}
		
		else (indexF < indexSecond) {
			if(firstOperand == '+')  totalResult = initialResult + thirdNumber;
			if(firstOperand == '-')  totalResult = initialResult - thirdNumber;
			if(firstOperand == '*')  totalResult = initialResult * thirdNumber;
			if(firstOperand == '/')  totalResult = initialResult / thirdNumber;
		}
		
		
		
		
		
		double roundedResult = Math.round(totalResult);
		return roundedResult;
		
	}
	
	public String generateQuestion() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond];
		
		return question;
	}
	
	public String generateQuestionAverage() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexThird = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		int randomIndexOperand2 = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond] + operands[randomIndexOperand2] + numbers[randomIndexThird];
		System.out.println(question);
		return question;
	}
	
	
	public Main() {
		setIconImage(Toolkit.getDefaultToolkit().getImage("C:\\Users\\user\\Downloads\\quiz.png"));
		setTitle("QUIZ GAME");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(400, 100, 600, 600);
		contentPane = new JPanel();
		contentPane.setBackground(Color.WHITE);
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));

		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JPanel panel = new JPanel();
		panel.setBackground(Color.RED);
		panel.setBounds(10, 0, 564, 550);
		contentPane.add(panel);
		panel.setLayout(null);
		
		lblNewLabel_1_2_4 = new JLabel("quiz");
		lblNewLabel_1_2_4.setForeground(Color.WHITE);
		lblNewLabel_1_2_4.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_4.setBounds(140, 130, 561, 120);
		panel.add(lblNewLabel_1_2_4);
		
		lblNewLabel_1_2 = new JLabel("MATH");
		lblNewLabel_1_2.setForeground(Color.WHITE);
		lblNewLabel_1_2.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_2.setBounds(70, 50, 561, 120);
		panel.add(lblNewLabel_1_2);
		
		lblNewLabel_1 = new JLabel("MATH");
		lblNewLabel_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1.setForeground(Color.DARK_GRAY);
		lblNewLabel_1.setBounds(78, 50, 777, 120);
		panel.add(lblNewLabel_1);
		
		lblNewLabel_1_1 = new JLabel("MATH");
		lblNewLabel_1_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_1.setBounds(89, 50, 612, 120);
		panel.add(lblNewLabel_1_1);
		
		lblNewLabel_1_2_2 = new JLabel("quiz");
		lblNewLabel_1_2_2.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_2.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_2.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_2);
		
		lblNewLabel_1_2_1 = new JLabel("quiz");
		lblNewLabel_1_2_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_2_1.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_1.setBounds(159, 130, 561, 120);
		panel.add(lblNewLabel_1_2_1);
		
		lblNewLabel_1_2_3 = new JLabel("quiz");
		lblNewLabel_1_2_3.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_3.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_3.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_3);
		
		lblNewLabel = new JLabel("");
		lblNewLabel.setFont(new Font("Dialog", Font.BOLD, 9));
		lblNewLabel.setBounds(225, 428, 161, 14);
		panel.add(lblNewLabel);
		
		rdbtnEasy = new JRadioButton("EASY");
		rdbtnEasy.setForeground(Color.WHITE);
		rdbtnEasy.setBackground(Color.RED);
		rdbtnEasy.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnEasy.setBounds(215, 232, 269, 78);
		panel.add(rdbtnEasy);
		
		rdbtnAverage = new JRadioButton("AVERAGE");
		rdbtnAverage.setForeground(Color.WHITE);
		rdbtnAverage.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnAverage.setBackground(Color.RED);
		rdbtnAverage.setBounds(188, 290, 269, 73);
		panel.add(rdbtnAverage);
		
		rdbtnDifficult = new JRadioButton("DIFFICULT");
		rdbtnDifficult.setForeground(Color.WHITE);
		rdbtnDifficult.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnDifficult.setBackground(Color.RED);
		rdbtnDifficult.setBounds(176, 342, 269, 68);
		panel.add(rdbtnDifficult);
		
		ButtonGroup difficulty = new ButtonGroup();
		difficulty.add(rdbtnEasy);
		difficulty.add(rdbtnAverage);
		difficulty.add(rdbtnDifficult);
		
		btnStart = new JButton("START");
		
		
	
		
		btnStart.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
			if(rdbtnEasy.isSelected()){
				///////////
				
 				lblNewLabel_3.setText(generateQuestion());
 				
 				
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_1.setVisible(true);
				
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnAverage.isSelected()){
				
				lblNewLabel_3.setText(generateQuestionAverage());
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_2.setVisible(true);
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnDifficult.isSelected()){
				
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			}
		});
		btnStart.setBackground(Color.WHITE);
		btnStart.setForeground(Color.RED);
		btnStart.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnStart.setBounds(212, 453, 125, 43);
		panel.add(btnStart);
		
		lblNewLabel_2 = new JLabel("");
		lblNewLabel_2.setVisible(false);
		lblNewLabel_2.setForeground(Color.WHITE);
		lblNewLabel_2.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_2.setBounds(317, 90, 125, 129);
		panel.add(lblNewLabel_2);
		
		lblNewLabel_3 = new JLabel("");
		lblNewLabel_3.setVisible(false);
		lblNewLabel_3.setForeground(Color.WHITE);
		lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_3.setBounds(215, 90, 300, 200);
		panel.add(lblNewLabel_3);
		
		lblNewLabel_4 = new JLabel("");
		lblNewLabel_4.addMouseListener(new MouseAdapter() {
			public void mouseReleased(MouseEvent e) {
				
			}
		});
		lblNewLabel_4.setVisible(false);
		lblNewLabel_4.setForeground(Color.WHITE);
		lblNewLabel_4.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_4.setBounds(121, 90, 103, 129);
		panel.add(lblNewLabel_4);
				
		textField = new JTextField();
		textField.setHorizontalAlignment(SwingConstants.RIGHT);
		textField.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField.setVisible(false);
		textField.setBounds(121, 261, 324, 49);
		panel.add(textField);
		textField.setColumns(10);
		
		textField1 = new JTextField();
		textField1.setHorizontalAlignment(SwingConstants.RIGHT);
		textField1.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField1.setVisible(false);
		textField1.setBounds(121, 261, 324, 49);
		panel.add(textField1);
		textField1.setColumns(10);
		
		returnButton = new JButton("Return");
		returnButton.setVisible(false);
		returnButton.setFont(new Font("Tahoma", Font.BOLD, 20));
		returnButton.setForeground(Color.RED);
		returnButton.setBackground(Color.WHITE);
		returnButton.setBounds(225, 363, 126, 43);
		panel.add(returnButton);
		
		
		returnButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel.setVisible(true);
				rdbtnEasy.setVisible(true);
				rdbtnAverage.setVisible(true);
				rdbtnDifficult.setVisible(true);
				lblNewLabel_1_2_3.setVisible(true);
				lblNewLabel_1_2_1.setVisible(true);
				lblNewLabel_1_2_2.setVisible(true);
				lblNewLabel_1_1.setVisible(true);
				lblNewLabel_1.setVisible(true);
				lblNewLabel_1_2.setVisible(true);
				lblNewLabel_1_2_4.setVisible(true);
				btnStart.setVisible(true);
				returnButton.setVisible(false);
				lblNewLabel_3.setVisible(false);
				lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
			}

		
			
			
		});
		
		btnNewButton_1 = new JButton("SUBMIT");
		btnNewButton_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				
				
				double result = getResult(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
				
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
				
			}
		});
		btnNewButton_1.setVisible(false);
		btnNewButton_1.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_1.setForeground(Color.RED);
		btnNewButton_1.setBackground(Color.WHITE);
		btnNewButton_1.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_1);
		
		//Button 2
		btnNewButton_2 = new JButton("SUBMIT");
		btnNewButton_2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				double result = getResultAverage(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
			
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
			}
		});
		btnNewButton_2.setVisible(false);
		btnNewButton_2.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_2.setForeground(Color.RED);
		btnNewButton_2.setBackground(Color.WHITE);
		btnNewButton_2.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_2);
		
		
		textField2 = new JTextField();
		textField2.setHorizontalAlignment(SwingConstants.RIGHT);
		textField2.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField2.setVisible(false);
		textField2.setBounds(121, 261, 324, 49);
		panel.add(textField2);
		textField2.setColumns(10);
		
		btnNewButton_3 = new JButton("SUBMIT");
		btnNewButton_3.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel_2.setVisible(false);
				
				textField.setVisible(false);
				textField1.setVisible(false);
				btnNewButton_1.setVisible(false);
				btnNewButton_2.setVisible(false);
				
				textField2.setVisible(false);
				btnNewButton_3.setVisible(false);
				
				
				
			}
		});
		btnNewButton_3.setVisible(false);
		btnNewButton_3.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_3.setForeground(Color.RED);
		btnNewButton_3.setBackground(Color.WHITE);
		btnNewButton_3.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_3);
		
		
	}
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-04-30 19:14:08.323
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-04-30 19:14:08.325
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-30 19:14:10.332
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import java.awt.Color;
import java.awt.Toolkit;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

import java.awt.Font;
import javax.swing.JRadioButton;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Arrays;
import java.util.Random;


public class Main extends JFrame {

	private JPanel contentPane;
	private JLabel lblNewLabel_1_2;
	private JLabel lblNewLabel_1;
	private JLabel lblNewLabel_1_1; 
	private JLabel lblNewLabel_1_2_1;
	private JLabel lblNewLabel_1_2_2;
	private JLabel lblNewLabel_1_2_3;
	private JLabel lblNewLabel_1_2_4;
	private JRadioButton rdbtnEasy;
	private JRadioButton rdbtnAverage;
	private JRadioButton rdbtnDifficult;
	private JButton btnStart; 
	private JLabel lblNewLabel;
	private JLabel lblNewLabel_2;
	private JLabel lblNewLabel_3;
	private JLabel lblNewLabel_4;
	private JTextField textField;
	private JButton btnNewButton_1;
	private JTextField textField1;
	private JButton btnNewButton_2;
	private JButton returnButton;

	private JTextField textField2;
	private JButton btnNewButton_3;
	int currentQuestionNumber = 1;
	int playerScore = 0;
	Random random = new Random();
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Main frame = new Main();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
	
	
	
	

	/**
	 * Create the frame.
	 */
	
	
	public int findIndex(char operand) {
		char[] operandOrder = {'-', '+', '/', '*'};
		int index = 0;
		
		for(int i = 0; i < operandOrder.length; i++) {
			if(operand == operandOrder[i]) index = i;
		}
		return index;
	}
	
	public double getResult(String question) {
		char[] questionData = question.toCharArray(); 
		
		char operand = questionData[1];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double result = 0;
		
		if(operand == '+') result = firstNumber + secondNumber;
		if(operand == '-') result = firstNumber - secondNumber;
		if(operand == '*') result = firstNumber * secondNumber;
		if(operand == '/') result = firstNumber / secondNumber;
		double roundedResult = Math.round(result);
		System.out.println(roundedResult);
		return roundedResult;
		
	}
	public double getResultAverage(String question) {
		char[] questionData = question.toCharArray(); 
		
		char firstOperand = questionData[1];
		char secondOperand = questionData[3];
		double firstNumber = Double.parseDouble(String.valueOf(questionData[0]));
		double secondNumber = Double.parseDouble(String.valueOf(questionData[2]));
		double thirdNumber = Double.parseDouble(String.valueOf(questionData[4]));
		double result = 0;
		
		
		char[] operandOrder = {'-', '+', '/', '*'};
		int indexFirst = findIndex(firstOperand);
		int indexSecond = findIndex(secondOperand);
		double totalResult = 0;
		double initialResult = 0;
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+') initialResult = secondNumber + thirdNumber;
			if(secondOperand == '-') initialResult = secondNumber - thirdNumber;
			if(secondOperand == '*') initialResult = secondNumber * thirdNumber;
			if(secondOperand == '/') initialResult = secondNumber / thirdNumber;
			
			
		}
		
		else if (indexSecond < indexFirst) {
			if(firstOperand == '+') initialResult = firstNumber + secondNumber;
			if(firstOperand == '-') initialResult = firstNumber - secondNumber;
			if(firstOperand == '*') initialResult = firstNumber * secondNumber;
			if(firstOperand == '/') initialResult = firstNumber / secondNumber;
		}
		else {
			if(firstOperand == '+') totalResult = firstNumber + secondNumber + thirdNumber;
			if(firstOperand == '-') totalResult = firstNumber - secondNumber - thirdNumber;
			if(firstOperand == '*') totalResult = firstNumber * secondNumber * thirdNumber;
			if(firstOperand == '/') totalResult = firstNumber / secondNumber / thirdNumber;
		}
		
		
		
		if(indexFirst < indexSecond) {
			if(secondOperand == '+')  totalResult = firstNumber + thirdNumber;
			if(secondOperand == '-')  totalResult = firstNumber - thirdNumber;
			if(secondOperand == '*')  totalResult = firstNumber * thirdNumber;
			if(secondOperand == '/')  totalResult = firstNumber / thirdNumber;
			
			
		}
		
		else (indexF < indexSecond) {
			if(firstOperand == '+')  totalResult = initialResult + thirdNumber;
			if(firstOperand == '-')  totalResult = initialResult - thirdNumber;
			if(firstOperand == '*')  totalResult = initialResult * thirdNumber;
			if(firstOperand == '/')  totalResult = initialResult / thirdNumber;
		}
		
		
		
		
		
		double roundedResult = Math.round(totalResult);
		return roundedResult;
		
	}
	
	public String generateQuestion() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond];
		
		return question;
	}
	
	public String generateQuestionAverage() {
		String[] numbers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};
		String[] operands = {"+", "-", "/", "*"};
		int randomIndexFirst = random.nextInt(numbers.length);
		int randomIndexSecond = random.nextInt(numbers.length);
		int randomIndexThird = random.nextInt(numbers.length);
		int randomIndexOperand = random.nextInt(operands.length);	
		int randomIndexOperand2 = random.nextInt(operands.length);	
		String question = numbers[randomIndexFirst] + operands[randomIndexOperand] + numbers[randomIndexSecond] + operands[randomIndexOperand2] + numbers[randomIndexThird];
		System.out.println(question);
		return question;
	}
	
	
	public Main() {
		setIconImage(Toolkit.getDefaultToolkit().getImage("C:\\Users\\user\\Downloads\\quiz.png"));
		setTitle("QUIZ GAME");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(400, 100, 600, 600);
		contentPane = new JPanel();
		contentPane.setBackground(Color.WHITE);
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));

		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JPanel panel = new JPanel();
		panel.setBackground(Color.RED);
		panel.setBounds(10, 0, 564, 550);
		contentPane.add(panel);
		panel.setLayout(null);
		
		lblNewLabel_1_2_4 = new JLabel("quiz");
		lblNewLabel_1_2_4.setForeground(Color.WHITE);
		lblNewLabel_1_2_4.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_4.setBounds(140, 130, 561, 120);
		panel.add(lblNewLabel_1_2_4);
		
		lblNewLabel_1_2 = new JLabel("MATH");
		lblNewLabel_1_2.setForeground(Color.WHITE);
		lblNewLabel_1_2.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_2.setBounds(70, 50, 561, 120);
		panel.add(lblNewLabel_1_2);
		
		lblNewLabel_1 = new JLabel("MATH");
		lblNewLabel_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1.setForeground(Color.DARK_GRAY);
		lblNewLabel_1.setBounds(78, 50, 777, 120);
		panel.add(lblNewLabel_1);
		
		lblNewLabel_1_1 = new JLabel("MATH");
		lblNewLabel_1_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_1.setFont(new Font("Magneto", Font.BOLD, 99));
		lblNewLabel_1_1.setBounds(89, 50, 612, 120);
		panel.add(lblNewLabel_1_1);
		
		lblNewLabel_1_2_2 = new JLabel("quiz");
		lblNewLabel_1_2_2.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_2.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_2.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_2);
		
		lblNewLabel_1_2_1 = new JLabel("quiz");
		lblNewLabel_1_2_1.setForeground(new Color(204, 51, 0));
		lblNewLabel_1_2_1.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_1.setBounds(159, 130, 561, 120);
		panel.add(lblNewLabel_1_2_1);
		
		lblNewLabel_1_2_3 = new JLabel("quiz");
		lblNewLabel_1_2_3.setForeground(Color.DARK_GRAY);
		lblNewLabel_1_2_3.setFont(new Font("Magneto", Font.BOLD, 110));
		lblNewLabel_1_2_3.setBounds(148, 130, 561, 120);
		panel.add(lblNewLabel_1_2_3);
		
		lblNewLabel = new JLabel("");
		lblNewLabel.setFont(new Font("Dialog", Font.BOLD, 9));
		lblNewLabel.setBounds(225, 428, 161, 14);
		panel.add(lblNewLabel);
		
		rdbtnEasy = new JRadioButton("EASY");
		rdbtnEasy.setForeground(Color.WHITE);
		rdbtnEasy.setBackground(Color.RED);
		rdbtnEasy.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnEasy.setBounds(215, 232, 269, 78);
		panel.add(rdbtnEasy);
		
		rdbtnAverage = new JRadioButton("AVERAGE");
		rdbtnAverage.setForeground(Color.WHITE);
		rdbtnAverage.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnAverage.setBackground(Color.RED);
		rdbtnAverage.setBounds(188, 290, 269, 73);
		panel.add(rdbtnAverage);
		
		rdbtnDifficult = new JRadioButton("DIFFICULT");
		rdbtnDifficult.setForeground(Color.WHITE);
		rdbtnDifficult.setFont(new Font("Tahoma", Font.BOLD, 30));
		rdbtnDifficult.setBackground(Color.RED);
		rdbtnDifficult.setBounds(176, 342, 269, 68);
		panel.add(rdbtnDifficult);
		
		ButtonGroup difficulty = new ButtonGroup();
		difficulty.add(rdbtnEasy);
		difficulty.add(rdbtnAverage);
		difficulty.add(rdbtnDifficult);
		
		btnStart = new JButton("START");
		
		
	
		
		btnStart.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
			if(rdbtnEasy.isSelected()){
				///////////
				
 				lblNewLabel_3.setText(generateQuestion());
 				
 				
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_1.setVisible(true);
				
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnAverage.isSelected()){
				
				lblNewLabel_3.setText(generateQuestionAverage());
 				
				lblNewLabel_3.setVisible(true);
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				lblNewLabel_2.setVisible(true);
				textField.setVisible(true);
				lblNewLabel_4.setVisible(true);
				btnNewButton_2.setVisible(true);
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			if(rdbtnDifficult.isSelected()){
				
				lblNewLabel.setVisible(false);
				rdbtnEasy.setVisible(false);
				rdbtnAverage.setVisible(false);
				rdbtnDifficult.setVisible(false);
				lblNewLabel_1_2_3.setVisible(false);
				lblNewLabel_1_2_1.setVisible(false);
				lblNewLabel_1_2_2.setVisible(false);
				lblNewLabel_1_1.setVisible(false);
				lblNewLabel_1.setVisible(false);
				lblNewLabel_1_2.setVisible(false);
				lblNewLabel_1_2_4.setVisible(false);
				btnStart.setVisible(false);
				
			}else{
				lblNewLabel.setText("SELECT DIFFICULTY");
				
			}
			
			}
		});
		btnStart.setBackground(Color.WHITE);
		btnStart.setForeground(Color.RED);
		btnStart.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnStart.setBounds(212, 453, 125, 43);
		panel.add(btnStart);
		
		lblNewLabel_2 = new JLabel("");
		lblNewLabel_2.setVisible(false);
		lblNewLabel_2.setForeground(Color.WHITE);
		lblNewLabel_2.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_2.setBounds(317, 90, 125, 129);
		panel.add(lblNewLabel_2);
		
		lblNewLabel_3 = new JLabel("");
		lblNewLabel_3.setVisible(false);
		lblNewLabel_3.setForeground(Color.WHITE);
		lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_3.setBounds(215, 90, 300, 200);
		panel.add(lblNewLabel_3);
		
		lblNewLabel_4 = new JLabel("");
		lblNewLabel_4.addMouseListener(new MouseAdapter() {
			public void mouseReleased(MouseEvent e) {
				
			}
		});
		lblNewLabel_4.setVisible(false);
		lblNewLabel_4.setForeground(Color.WHITE);
		lblNewLabel_4.setFont(new Font("Dialog", Font.BOLD, 80));
		lblNewLabel_4.setBounds(121, 90, 103, 129);
		panel.add(lblNewLabel_4);
				
		textField = new JTextField();
		textField.setHorizontalAlignment(SwingConstants.RIGHT);
		textField.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField.setVisible(false);
		textField.setBounds(121, 261, 324, 49);
		panel.add(textField);
		textField.setColumns(10);
		
		textField1 = new JTextField();
		textField1.setHorizontalAlignment(SwingConstants.RIGHT);
		textField1.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField1.setVisible(false);
		textField1.setBounds(121, 261, 324, 49);
		panel.add(textField1);
		textField1.setColumns(10);
		
		returnButton = new JButton("Return");
		returnButton.setVisible(false);
		returnButton.setFont(new Font("Tahoma", Font.BOLD, 20));
		returnButton.setForeground(Color.RED);
		returnButton.setBackground(Color.WHITE);
		returnButton.setBounds(225, 363, 126, 43);
		panel.add(returnButton);
		
		
		returnButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel.setVisible(true);
				rdbtnEasy.setVisible(true);
				rdbtnAverage.setVisible(true);
				rdbtnDifficult.setVisible(true);
				lblNewLabel_1_2_3.setVisible(true);
				lblNewLabel_1_2_1.setVisible(true);
				lblNewLabel_1_2_2.setVisible(true);
				lblNewLabel_1_1.setVisible(true);
				lblNewLabel_1.setVisible(true);
				lblNewLabel_1_2.setVisible(true);
				lblNewLabel_1_2_4.setVisible(true);
				btnStart.setVisible(true);
				returnButton.setVisible(false);
				lblNewLabel_3.setVisible(false);
				lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 80));
			}

		
			
			
		});
		
		btnNewButton_1 = new JButton("SUBMIT");
		btnNewButton_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				
				
				double result = getResult(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
				
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestion());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
				
			}
		});
		btnNewButton_1.setVisible(false);
		btnNewButton_1.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_1.setForeground(Color.RED);
		btnNewButton_1.setBackground(Color.WHITE);
		btnNewButton_1.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_1);
		
		//Button 2
		btnNewButton_2 = new JButton("SUBMIT");
		btnNewButton_2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				double result = getResultAverage(lblNewLabel_3.getText());
				Double userInput = Double.parseDouble(textField.getText());
			
				if(currentQuestionNumber == 5) {
					lblNewLabel_3.setFont(new Font("Dialog", Font.BOLD, 30));
					if(result == userInput) {
						playerScore++;
						
						lblNewLabel_3.setText("Score: " + playerScore + "/5");
					}
					btnNewButton_2.setVisible(false);
					returnButton.setVisible(true);
					lblNewLabel_3.setText("Score: " + playerScore + "/5");
					textField.setVisible(false);
					
				}
				
				else if(result == userInput) {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
					playerScore++;
					
				}
				else {
					lblNewLabel_3.setText(generateQuestionAverage());
					currentQuestionNumber++;
				}
				
				
				System.out.println("Player Score: " + playerScore);
				
			}
		});
		btnNewButton_2.setVisible(false);
		btnNewButton_2.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_2.setForeground(Color.RED);
		btnNewButton_2.setBackground(Color.WHITE);
		btnNewButton_2.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_2);
		
		
		textField2 = new JTextField();
		textField2.setHorizontalAlignment(SwingConstants.RIGHT);
		textField2.setFont(new Font("Tahoma", Font.BOLD, 40));
		textField2.setVisible(false);
		textField2.setBounds(121, 261, 324, 49);
		panel.add(textField2);
		textField2.setColumns(10);
		
		btnNewButton_3 = new JButton("SUBMIT");
		btnNewButton_3.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				lblNewLabel_2.setVisible(false);
				
				textField.setVisible(false);
				textField1.setVisible(false);
				btnNewButton_1.setVisible(false);
				btnNewButton_2.setVisible(false);
				
				textField2.setVisible(false);
				btnNewButton_3.setVisible(false);
				
				
				
			}
		});
		btnNewButton_3.setVisible(false);
		btnNewButton_3.setFont(new Font("Tahoma", Font.BOLD, 20));
		btnNewButton_3.setForeground(Color.RED);
		btnNewButton_3.setBackground(Color.WHITE);
		btnNewButton_3.setBounds(225, 363, 126, 43);
		panel.add(btnNewButton_3);
		
		
	}
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-04-30 19:14:10.333
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-04-30 19:14:10.334
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)
!SESSION 2023-05-01 08:35:40.465 -----------------------------------------------
eclipse.buildId=4.24.0.I20220607-0700
java.version=17.0.4
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_PH
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2023-05-01 08:36:04.389
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-01 08:36:04.389
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@73d8c8d7,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@361b3ca6,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-01 08:36:04.389
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@48333b12,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@575c23f1,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-05-01 08:36:11.940
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Admin'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-05-01 10:43:25.886 -----------------------------------------------
eclipse.buildId=4.24.0.I20220607-0700
java.version=17.0.4
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_PH
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2023-05-01 10:43:30.577
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-01 10:43:30.577
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@62f7d7bd,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@de63949,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-01 10:43:30.577
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@5c5c784c,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@6a299b9d,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-05-01 10:43:35.626
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Admin'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-05-01 11:21:46.448 -----------------------------------------------
eclipse.buildId=4.24.0.I20220607-0700
java.version=17.0.4
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_PH
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2023-05-01 11:21:49.924
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-01 11:21:49.924
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@73d8c8d7,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@361b3ca6,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-01 11:21:49.924
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@48333b12,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@575c23f1,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-05-01 11:21:54.560
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Admin'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-05-01 11:29:11.544 -----------------------------------------------
eclipse.buildId=4.24.0.I20220607-0700
java.version=17.0.4
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_PH
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2023-05-01 11:29:16.088
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-01 11:29:16.088
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@48144f1a,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@6f7b8ae1,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-01 11:29:16.088
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@6c8d8b60,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@4fa6fb7f,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-05-01 11:29:22.428
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Admin'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-05-01 15:48:59.408 -----------------------------------------------
eclipse.buildId=4.24.0.I20220607-0700
java.version=17.0.4
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_PH
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2023-05-01 15:49:04.405
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-01 15:49:04.405
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@2520010e,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@163fbbc9,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-01 15:49:04.405
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@1669f4e5,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@6e6c8854,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-05-01 15:49:09.570
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Admin'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-05-01 17:07:47.584 -----------------------------------------------
eclipse.buildId=4.24.0.I20220607-0700
java.version=17.0.4
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_PH
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2023-05-01 17:07:52.122
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-01 17:07:52.122
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@48333b12,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@575c23f1,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-01 17:07:52.122
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@62f7d7bd,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@de63949,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-05-01 17:07:57.403
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Admin'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-05-03 20:04:58.563 -----------------------------------------------
eclipse.buildId=4.24.0.I20220607-0700
java.version=17.0.4
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_PH
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2023-05-03 20:05:19.553
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-03 20:05:19.553
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@4fa6fb7f,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@2520010e,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-03 20:05:19.553
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@163fbbc9,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@1669f4e5,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-05-03 20:05:27.627
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Admin'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-05-06 21:52:19.255 -----------------------------------------------
eclipse.buildId=4.24.0.I20220607-0700
java.version=17.0.4
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_PH
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2023-05-06 21:52:36.473
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-06 21:52:36.473
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@361b3ca6,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@48333b12,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-06 21:52:36.473
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@575c23f1,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@62f7d7bd,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-05-06 21:52:43.062
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Admin'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.eclipse.jdt.ui 4 10001 2023-05-06 22:42:34.693
!MESSAGE Internal Error
!STACK 1
Java Model Exception: Error in Java Model (code 969): displaySelectedArtist(String) [in Main [in [Working copy] Main.java [in <default> [in src [in Advanced GUI Controls 1 - Exercise (Finals]]]]] does not exist
	at org.eclipse.jdt.internal.core.JavaElement.newNotPresentException(JavaElement.java:574)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:617)
	at org.eclipse.jdt.internal.core.JavaElement.getElementInfo(JavaElement.java:328)
	at org.eclipse.jdt.internal.core.JavaElement.getElementInfo(JavaElement.java:314)
	at org.eclipse.jdt.internal.core.Member.getFlags(Member.java:172)
	at org.eclipse.jdt.internal.corext.util.JdtFlags.isPrivate(JdtFlags.java:157)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaElementHyperlinkSuperImplementationDetector.isOverriddenMethod(JavaElementHyperlinkSuperImplementationDetector.java:57)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaElementHyperlinkSuperImplementationDetector.addHyperlinks(JavaElementHyperlinkSuperImplementationDetector.java:44)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaElementHyperlinkDetector.detectHyperlinks(JavaElementHyperlinkDetector.java:136)
	at org.eclipse.ui.texteditor.HyperlinkDetectorRegistry$HyperlinkDetectorDelegate.detectHyperlinks(HyperlinkDetectorRegistry.java:81)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:289)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:262)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.mouseMove(HyperlinkManager.java:457)
	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:216)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4251)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1066)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4068)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3645)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)
!SUBENTRY 1 org.eclipse.jdt.core 4 969 2023-05-06 22:42:34.695
!MESSAGE displaySelectedArtist(String) [in Main [in [Working copy] Main.java [in <default> [in src [in Advanced GUI Controls 1 - Exercise (Finals]]]]] does not exist

!ENTRY org.eclipse.jdt.ui 4 10001 2023-05-06 22:42:34.699
!MESSAGE Internal Error
!STACK 1
Java Model Exception: Error in Java Model (code 969): displaySelectedArtist(String) [in Main [in [Working copy] Main.java [in <default> [in src [in Advanced GUI Controls 1 - Exercise (Finals]]]]] does not exist
	at org.eclipse.jdt.internal.core.JavaElement.newNotPresentException(JavaElement.java:574)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:617)
	at org.eclipse.jdt.internal.core.JavaElement.getElementInfo(JavaElement.java:328)
	at org.eclipse.jdt.internal.core.JavaElement.getElementInfo(JavaElement.java:314)
	at org.eclipse.jdt.internal.core.SourceMethod.getReturnType(SourceMethod.java:204)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaElementHyperlinkReturnTypeDetector.addHyperlinks(JavaElementHyperlinkReturnTypeDetector.java:43)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaElementHyperlinkDetector.detectHyperlinks(JavaElementHyperlinkDetector.java:136)
	at org.eclipse.ui.texteditor.HyperlinkDetectorRegistry$HyperlinkDetectorDelegate.detectHyperlinks(HyperlinkDetectorRegistry.java:81)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:289)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:262)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.mouseMove(HyperlinkManager.java:457)
	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:216)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4251)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1066)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4068)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3645)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)
!SUBENTRY 1 org.eclipse.jdt.core 4 969 2023-05-06 22:42:34.699
!MESSAGE displaySelectedArtist(String) [in Main [in [Working copy] Main.java [in <default> [in src [in Advanced GUI Controls 1 - Exercise (Finals]]]]] does not exist
!SESSION 2023-05-10 14:15:53.363 -----------------------------------------------
eclipse.buildId=4.24.0.I20220607-0700
java.version=17.0.4
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_PH
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2023-05-10 14:16:12.428
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-10 14:16:12.428
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@4be1dce6,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@206bd7a0,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-10 14:16:12.428
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@79fcd194,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@73d8c8d7,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-05-10 14:16:19.658
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Admin'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-05-10 15:53:30.716 -----------------------------------------------
eclipse.buildId=4.24.0.I20220607-0700
java.version=17.0.4
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_PH
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2023-05-10 15:53:35.497
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-10 15:53:35.497
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@73d8c8d7,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@361b3ca6,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-10 15:53:35.497
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@48333b12,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@575c23f1,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-05-10 15:53:39.832
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Admin'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-05-10 19:41:58.745 -----------------------------------------------
eclipse.buildId=4.24.0.I20220607-0700
java.version=17.0.4
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_PH
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2023-05-10 19:42:05.039
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-10 19:42:05.039
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@79fcd194,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@73d8c8d7,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-10 19:42:05.039
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@361b3ca6,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@48333b12,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-05-10 19:42:10.025
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Admin'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-05-10 19:55:28.494 -----------------------------------------------
eclipse.buildId=4.24.0.I20220607-0700
java.version=17.0.4
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_PH
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2023-05-10 19:55:32.129
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-10 19:55:32.129
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@2520010e,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@163fbbc9,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-10 19:55:32.129
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@1669f4e5,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@6e6c8854,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-05-10 19:55:35.985
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Admin'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-05-14 18:42:42.702 -----------------------------------------------
eclipse.buildId=4.24.0.I20220607-0700
java.version=17.0.4
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_PH
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2023-05-14 18:43:03.630
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-14 18:43:03.630
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@4be1dce6,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@206bd7a0,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-14 18:43:03.630
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@79fcd194,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@73d8c8d7,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-05-14 18:43:10.789
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Admin'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-05-15 15:10:14.001 -----------------------------------------------
eclipse.buildId=4.24.0.I20220607-0700
java.version=17.0.4
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_PH
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2023-05-15 15:10:32.753
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-15 15:10:32.753
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@48333b12,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@575c23f1,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-15 15:10:32.753
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@62f7d7bd,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@de63949,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-05-15 15:10:38.856
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Admin'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-05-17 08:18:49.973 -----------------------------------------------
eclipse.buildId=4.24.0.I20220607-0700
java.version=17.0.4
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_PH
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2023-05-17 08:19:07.721
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-17 08:19:07.721
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@6e6c8854,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@4be1dce6,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-17 08:19:07.721
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@206bd7a0,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@79fcd194,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-05-17 08:19:12.771
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Admin'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-05-17 09:36:23.914 -----------------------------------------------
eclipse.buildId=4.24.0.I20220607-0700
java.version=17.0.4
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_PH
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2023-05-17 09:36:40.905
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-17 09:36:40.905
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@73d8c8d7,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@361b3ca6,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-17 09:36:40.905
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@48333b12,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@575c23f1,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-05-17 09:36:47.170
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Admin'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-05-22 19:57:49.649 -----------------------------------------------
eclipse.buildId=4.24.0.I20220607-0700
java.version=17.0.4
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_PH
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2023-05-22 19:58:08.501
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-22 19:58:08.501
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@79fcd194,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@73d8c8d7,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-22 19:58:08.501
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@361b3ca6,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@48333b12,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-05-22 19:58:14.961
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Admin'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-05-23 14:48:57.353 -----------------------------------------------
eclipse.buildId=4.24.0.I20220607-0700
java.version=17.0.4
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_PH
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2023-05-23 14:49:24.081
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-23 14:49:24.081
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@48333b12,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@575c23f1,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-23 14:49:24.081
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@62f7d7bd,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@de63949,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-05-23 14:49:40.544
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Admin'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-05-25 11:09:09.377 -----------------------------------------------
eclipse.buildId=4.24.0.I20220607-0700
java.version=17.0.4
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_PH
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2023-05-25 11:09:33.657
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-25 11:09:33.657
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@361b3ca6,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@48333b12,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-25 11:09:33.657
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@575c23f1,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@62f7d7bd,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-05-25 11:09:40.548
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Admin'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.eclipse.oomph.ui 4 0 2023-05-25 11:09:47.295
!MESSAGE java.lang.ExceptionInInitializerError
!STACK 0
java.lang.ExceptionInInitializerError
	at org.eclipse.oomph.setup.ui.recorder.RecorderManager.<clinit>(RecorderManager.java:121)
	at org.eclipse.oomph.setup.ui.SetupUIPlugin.performStartup(SetupUIPlugin.java:216)
	at org.eclipse.oomph.setup.ui.EarlyStartup.earlyStartup(EarlyStartup.java:23)
	at org.eclipse.oomph.internal.ui.EarlyStart.run(EarlyStart.java:119)
	at org.eclipse.oomph.internal.ui.EarlyStart$1.run(EarlyStart.java:98)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)
Caused by: java.lang.IllegalStateException: BundleContext is no longer valid org.eclipse.oomph.p2.core_1.23.0.v20220717-0700 [297]
	at org.eclipse.osgi.internal.framework.BundleContextImpl.checkValid(BundleContextImpl.java:1031)
	at org.eclipse.osgi.internal.framework.BundleContextImpl.ungetService(BundleContextImpl.java:701)
	at org.eclipse.oomph.p2.internal.core.AgentManagerImpl.getCurrentAgent(AgentManagerImpl.java:194)
	at org.eclipse.oomph.p2.core.P2Util.getCurrentProvisioningAgent(P2Util.java:111)
	at org.eclipse.oomph.setup.internal.core.util.SetupCoreUtil.<clinit>(SetupCoreUtil.java:157)
	... 6 more
!SESSION 2023-05-28 15:20:09.654 -----------------------------------------------
eclipse.buildId=4.24.0.I20220607-0700
java.version=17.0.4
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_PH
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2023-05-28 15:20:26.016
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-28 15:20:26.016
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@2520010e,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@163fbbc9,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-28 15:20:26.016
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@1669f4e5,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@6e6c8854,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-05-28 15:20:32.573
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Admin'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
